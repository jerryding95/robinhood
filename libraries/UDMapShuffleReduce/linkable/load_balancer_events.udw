

#define intermediate_ptr_offset 111111
#define intermediate_cache_entry_size 222222
#define intermediate_cache_offset 333333
#define materializing_metadata_offset 444444
#define materialize_kv_cache_offset 555555
#define materialize_kv_cache_size 666666
#define unresolved_kv_count_offset 888888
#define intermediate_cache_count 999999
#define materialize_kv_cache_count 101010
#define inter_kvpair_size 7


thread receiver {
	// event receive_intermediate_kv(unsigned long key, unsigned long value){
		
	// }




	// event fetched_kv_ptr_for_cache(unsigned long kv_arr_addr, unsigned long entry_addr){
	// 	// Decrement unresolved_kv_count by 1
	// 	unsigned long* local ptr = LMBASE + unresolved_kv_count_offset;
	// 	ptr[0] = ptr[0] - 1;
	// 	// Locate intermediate_cache entry
	// 	ptr = LMBASE + intermediate_ptr_offset;
	// 	unsigned long base_addr = ptr[0];
	// 	unsigned long* local entry_ptr = LMBASE + intermediate_cache_offset;
	// 	entry_ptr = entry_ptr + (entry_addr - base_addr) * intermediate_cache_entry_size;

	// 	// Read key and check if already claimed
	// 	unsigned long returned_key = entry_ptr[0];
	// 	unsigned long is_claimed = returned_key & 1;
	// 	returned_key = returned_key >> 1;
	// 	// Account for the dram request coming back
	// 	unsigned long matched_count = 0;
	// 	unsigned long* dest = entry_ptr[1];

	// 	// Update kv_ptr if not claimed
	// 	if (is_claimed == 0) {
	// 		entry_ptr[1] = kv_arr_addr;
	// 		dest = kv_arr_addr;
	// 	}


	// 	// Read materialize_kv_cache metadata
	// 	ptr = LMBASE + materializing_metadata_offset;
	// 	long* local start = ptr[0];
	// 	long* local end = ptr[1];
	// 	long is_empty = ptr[2];

	// 	if (is_empty == 1){
	// 		print("Lane %d receiver fetched_kv_ptr_for_cache gets empty cache! Terminate!", NETID);
	// 	}

	// 	unsigned long ret_cont_word;
	// 	if (is_claimed == 1){ ret_cont_word = evw_update_event(CEVNT, receiver_update_unresolved_kv_count); }
	// 	else{ ret_cont_word = evw_update_event(CEVNT, receiver_materialize_kv_ret); }
		
	// 	ret_cont_word = evw_update_thread(ret_cont_word, NEWTH);

	// 	// If start >= end, set stop at max limit
	// 	// Otherwise, set stop at end
	// 	unsigned long* local stop;
	// 	if (end > start){ stop = end;}
	// 	else{ stop = LMBASE + materialize_kv_cache_offset + materialize_kv_cache_size; }

	// 	// Iterate and update start until find an unmatch
	// 	while (start < stop){
	// 		if (start[0] != -1){
	// 			if (start[0] != returned_key){
	// 				break;
	// 			}
	// 			if (is_claimed==0){ 
	// 				send_dram_write(dest, start, inter_kvpair_size, ret_cont_word); 
	// 				dest = dest + inter_kvpair_size * 8;
	// 			}
	// 			else {
	// 				unsigned long ev_word = dest;
	// 				send_event(ev_word, start, inter_kvpair_size, ret_cont_word); 
	// 			}
	// 			matched_count = matched_count + 1;
	// 			for (int i=0; i<inter_kvpair_size; i=i+1) { start[i] = -1; }
	// 		}
	// 		start = start + inter_kvpair_size * 8;
	// 	}

	// 	// If start hits either end or maximum limit
	// 	// If hit maximum limit, reset start to minimum limit and keep iterating start
	// 	if (start == stop && stop != end) {
	// 		start = LMBASE + materialize_kv_cache_offset;
	// 		while (start < end){
	// 			if (start[0] != -1){
	// 				if (start[0] != returned_key){
	// 					break;
	// 				}
	// 				if (is_claimed==0){ 
	// 					send_dram_write(dest, start, inter_kvpair_size, ret_cont_word); 
	// 					dest = dest + inter_kvpair_size * 8;
	// 				}
	// 				else {
	// 					unsigned long ev_word = dest;
	// 					send_event(ev_word, start, inter_kvpair_size, ret_cont_word); 
	// 				}
	// 				matched_count = matched_count + 1;
	// 				for (int i=0; i<inter_kvpair_size; i=i+1) { start[i] = -1; }
	// 			}
	// 			start = start + inter_kvpair_size * 8;
	// 		}
	// 	}

	// 	// At this point, situation includes
	// 	// 1. Start hits an unmatch, needs to continue iterating, then start != end
	// 	// 2. Start == end and the first entry is an unmatch, then matched_count == 0
	// 	// 3. Start hits end, stop iterating

	// 	// If in situation 1 and 2, iterating end and update end
	// 	if (start != end || matched_count == 0){
	// 		ptr = start;
	// 		unsigned long new_end = start;

	// 		// If start >= end, set stop at max limit
	// 		// Otherwise, set stop at end
	// 		if (end > start){ stop = end;}
	// 		else{ stop = LMBASE + materialize_kv_cache_offset + materialize_kv_cache_size; }

	// 		// Iterate till stop
	// 		while (ptr < stop) {
	// 			if (ptr[0] != -1){
	// 				if (ptr[0] == returned_key){
	// 					if (is_claimed==0){ 
	// 						send_dram_write(dest, ptr, inter_kvpair_size, ret_cont_word); 
	// 						dest = dest + inter_kvpair_size * 8;
	// 					}
	// 					else {
	// 						unsigned long ev_word = dest;
	// 						send_event(ev_word, ptr, inter_kvpair_size, ret_cont_word); 
	// 					}
	// 					matched_count = matched_count + 1;
	// 				}
	// 				else{ new_end = ptr + inter_kvpair_size * 8; }
	// 			}
	// 			ptr = ptr + inter_kvpair_size * 8;
	// 		}

	// 		// If stop != end, meaning stop == max limit and start >= end
	// 		// Reset ptr to beginning of cache and iterate till end
	// 		if (stop != end) {
	// 			ptr = LMBASE + materialize_kv_cache_offset;
	// 			while (ptr < end) {
	// 				if (ptr[0] != -1){
	// 					if (ptr[0] == returned_key){
	// 						if (is_claimed==0){ 
	// 							send_dram_write(dest, ptr, inter_kvpair_size, ret_cont_word); 
	// 							dest = dest + inter_kvpair_size * 8;
	// 						}
	// 						else {
	// 							unsigned long ev_word = dest;
	// 							send_event(ev_word, ptr, inter_kvpair_size, ret_cont_word); 
	// 						}
	// 						matched_count = matched_count + 1;
	// 					}
	// 					else{ new_end = ptr + inter_kvpair_size * 8; }
	// 				}
	// 				ptr = ptr + inter_kvpair_size * 8;
	// 			}
	// 		}
	// 		end = new_end;
	// 	}


	// 	ptr = LMBASE + materializing_metadata_offset;
	// 	ptr[0] = start;
	// 	ptr[1] = end;
	// 	if (start == end){ ptr[2] = 1; }
	// 	else{ ptr[2] = 0; }

	// 	if (is_claimed == 1){
	// 		// If claimed, increment unresolved_kv_count by matched_count
	// 		ptr = LMBASE + unresolved_kv_count_offset;
	// 		ptr[0] = ptr[0] + matched_count;
	// 	}
	// 	else{
	// 		// If not claimed, set kv rec number as matched_count
	// 		entry_ptr[2] = matched_count;
	// 	}
		
	// 	yield_terminate;

	// }



	event ud_fetched_kv_ptr_for_cache(unsigned long kv_arr_addr, unsigned long entry_addr){
		unsigned long returned_key, is_claimed, ret_cont_word, base_ptr;
		long* local ptr;
		long* local entry_ptr;

		// Get start spd address of this ud
		base_ptr = LMBASE - ((NETID & 0x3F) << 16);
		
		// Locate intermediate_cache entry
		ptr = base_ptr + intermediate_ptr_offset;
		if (1){
			// unsigned long tmp = (entry_addr - ptr[0]) / 8;
			unsigned long tmp = ptr[0];
			tmp = (entry_addr - tmp) / 8;
			asm {
				"print 'Lane %u received kv_ptr for %ld-key, operands %ld, %ld' X0 %[tmp] X8 X9"
			} : [tmp] "r" (tmp);
			// unsigned long tmp1 = (tmp % intermediate_cache_count) * intermediate_cache_entry_size * 8;
			// tmp = (tmp / intermediate_cache_count) << 16;
			// entry_ptr = base_ptr + tmp + intermediate_cache_offset + tmp1;
			unsigned long tmp1 = tmp % intermediate_cache_count;
			tmp1 = tmp1 * intermediate_cache_entry_size;
			tmp1 = tmp1 * 8;
			tmp = tmp / intermediate_cache_count;
			tmp = tmp << 16;
			entry_ptr = base_ptr + tmp;
			entry_ptr = entry_ptr + tmp1;
			entry_ptr = entry_ptr + intermediate_cache_offset;
		}

		// Read key
		returned_key = entry_ptr[0] >> 1;

		// Read num and dest
		long num;
		if (1) {
			long cswp_ret, tmp = -1, tmp1 = 0;
			ptr = entry_ptr + 8;
			asm {
				"cswp %[ptr] %[cswp_ret] %[tmp] %[kv_arr_addr]"
			} : [ptr] "r" (ptr), [cswp_ret] "r" (cswp_ret), [tmp] "r" (tmp), [kv_arr_addr] "r" (kv_arr_addr);
			if (cswp_ret == tmp) {
				
				// Set num first
				ptr = entry_ptr + 16;
				asm {
					"reset_num: movlr 0(%[ptr]) %[num] 0 8
					movlr -8(%[ptr]) %[tmp] 0 8
					bne %[tmp] X8 key_got_claimed
					cswp %[ptr] %[cswp_ret] %[num] %[tmp1]
					bne %[cswp_ret] %[num] reset_num
					movir %[is_claimed] 0
					addi X2 %[ret_cont_word] 0
					evlb %[ret_cont_word] receiver_materialize_kv_ret
					jmp set_new_thread_imm

					key_got_claimed: movlr -16(%[ptr]) %[tmp] 0 8
					andi %[tmp] %[tmp] 1
					bnei %[tmp] 1 key_got_claimed
					movlr 0(%[ptr]) %[num] 0 8
					movir %[is_claimed] 1
					addi X2 %[ret_cont_word] 0
					evlb %[ret_cont_word] receiver_update_unresolved_kv_count

					set_new_thread_imm: evi %[ret_cont_word] %[ret_cont_word] 255 4
					"
				} : [ptr] "r" (ptr), [cswp_ret] "r" (cswp_ret), [num] "r" (num), [tmp] "r" (tmp), 
					[tmp1] "r" (tmp1), [is_claimed] "r" (is_claimed), [ret_cont_word] "r" (ret_cont_word);

				ret_cont_word = evw_update_event(CEVNT, receiver_materialize_kv_ret);
				is_claimed = 0;
			}
			else {
				ret_cont_word = evw_update_event(CEVNT, receiver_update_unresolved_kv_count);
				is_claimed = 1;
			}
		}
		ret_cont_word = evw_update_thread(ret_cont_word, NEWTH);



		// // Resume returned key
		// returned_key = returned_key >> 1;
		asm {
			"print 'Lane %u received kv_ptr for key %ld with bin address %lu(0x%lx), entry address %lu' X0 %[key] X8 X8 %[entry_ptr]"
		} : [key] "r" (returned_key), [entry_ptr] "r" (entry_ptr);

		// Read materialize_kv_cache metadata
		// Locate start of materialize_kv_cache
		ptr = base_ptr + materializing_metadata_offset;
		unsigned long start = ptr[0];
		unsigned long next_change_stop = ((start / materialize_kv_cache_count) + 1) * materialize_kv_cache_count;
		unsigned long start_written_flag = 0;
		unsigned long end;
		if (1) {
			// long tmp = ((start / materialize_kv_cache_count) % 64) << 16;
			// long tmp1 = (start % materialize_kv_cache_count) * inter_kvpair_size * 8;
			// tmp = base_ptr + tmp + materialize_kv_cache_offset;
			// ptr = tmp + tmp1;
			unsigned long tmp = start / materialize_kv_cache_count;
			tmp = tmp % 64;
			tmp = tmp << 16;
			tmp = tmp + materialize_kv_cache_offset;
			tmp = tmp + base_ptr;
			unsigned long tmp1 = start % materialize_kv_cache_count;
			tmp1 = tmp1 * inter_kvpair_size;
			tmp1 = tmp1 * 8;
			end = ptr[1];
			ptr = tmp + tmp1;
		}

		if (is_claimed == 0) {
			// Move entry_ptr to the materialized count word, for cswp
			entry_ptr = entry_ptr + 16; 
			// If not claimed, need to account for the first entry found
			unsigned long first_entry_sent = 0;

			// Iterate and update start until find an unmatch
			while (start < end  && num < 0){
				// First check if entry empty
				if (ptr[0] != -1) {
					unsigned long tmp = ptr[0];
					// If not matched for the first time, write new start to spd
					if (ptr[0] != returned_key){
						asm {
							"print 'Not matching: entry %ld reads %ld at %lu' %[start] %[tmp] %[ptr]"
						} : [ptr] "r" (ptr), [start] "r" (start), [tmp] "r" (tmp);
						if (start_written_flag == 0){
							start_written_flag = base_ptr + materializing_metadata_offset;
							long cswp_ret, tmp1;
							asm {
								"update_materializing_start_not_matched: movlr 0(%[ptr]) %[tmp] 0 8
								bge %[tmp] %[tmp1] after_update_materializing_start_not_matched
								cswp %[ptr] %[cswp_ret] %[tmp] %[tmp1]
								bne %[cswp_ret] %[tmp] update_materializing_start_not_matched
								after_update_materializing_start_not_matched: movir %[ptr] 1"
							} : [ptr] "r" (start_written_flag), [cswp_ret] "r" (cswp_ret), [tmp] "r" (tmp), [tmp1] "r" (start);
						}
					}
					else {
						asm {
							"print 'Matched: entry %ld reads %ld at %lu' %[start] %[tmp] %[ptr]"
						} : [ptr] "r" (ptr), [start] "r" (start), [tmp] "r" (tmp);

						num = num + 1;

						// If matched, first check if key just got claimed
						// is_claimed = entry_ptr[-2] & 1;
						is_claimed = (entry_ptr[-1] != kv_arr_addr);
						if (is_claimed) {
							// If just got claimed, wait till claimed dest evword is written
							entry_ptr = entry_ptr - 16;
							ret_cont_word = evw_update_event(CEVNT, receiver_update_unresolved_kv_count);
							ret_cont_word = evw_update_thread(ret_cont_word, NEWTH);
							tmp = entry_ptr[1];
							while (tmp == kv_arr_addr) {
								tmp = entry_ptr[1];
							}
							break;
						}

						// If not claimed
						// Update materialized count atomically to find an empty entry
						long* dest;
						if (1) {
							long cswp_ret, tmp1;
							asm {
								"update_materialized_count: movlr 0(%[entry_ptr]) %[tmp] 0 8
								addi %[tmp] %[tmp1] 1
								cswp %[entry_ptr] %[cswp_ret] %[tmp] %[tmp1]
								bne %[cswp_ret] %[tmp] update_materialized_count
								subi %[tmp1] %[tmp1] 1
								muli %[cswp_ret] %[dest] inter_kvpair_size
								sli %[dest] %[dest] 3
								add %[dest] %[kv_arr_addr] %[dest]
								print 'receive_ptr materialize key %ld to Dram %lu(0x%lx) as the %ld-th kv' %[returned_key] %[dest] %[dest] %[tmp1]"
							} : [entry_ptr] "r" (entry_ptr), [cswp_ret] "r" (cswp_ret), [tmp] "r" (tmp), [tmp1] "r" (tmp1), [dest] "r" (dest), [kv_arr_addr] "r" (kv_arr_addr), [returned_key] "r" (returned_key);
						}

						// Materialize the kv
						// long* dest = cswp_ret * inter_kvpair_size * 8 + kv_arr_addr;
						send_dram_write(dest, ptr, inter_kvpair_size, ret_cont_word);

						// Erase this entry
						for (tmp=0; tmp<inter_kvpair_size; tmp=tmp+1) { 
							ptr[tmp] = -1; 
						}
					}
				}

				// Step forward one entry
				start = start + 1;
				// If going across lanes, update ptr
				if (start == next_change_stop) {
					ptr = base_ptr + (((start / materialize_kv_cache_count) % 64) << 16) + materialize_kv_cache_offset;
					next_change_stop = next_change_stop + materialize_kv_cache_count;
				}
				else {
					// If going inside lane, increment ptr
					ptr = ptr + inter_kvpair_size * 8;
				}
			}
		}

		// Iteration finished / key is claimed before iteration
		// If iteration is interuppted, it means the key is just got claimed
		if (start < end && num < 0) {
			unsigned long dest = entry_ptr[1];
			asm {
				"print 'Claimed dest event word for claimed key %ld: %lu' %[returned_key] %[dest]"
			} : [returned_key] "r" (returned_key), [dest] "r" (dest);
			// // If claimed, need to account for number of total cached kvs
			// unsigned long matched_count = 0;

			// Iterate and update start until find an unmatch
			while (start < end && num < 0){
				// First check if entry empty
				if (ptr[0] != -1) {
					unsigned long tmp = ptr[0];
					// If not matched for the first time, write new start to spd
					if (tmp != returned_key){
						asm {
							"print 'Not matching: entry %ld reads %ld at %lu' %[start] %[tmp] %[ptr]"
						} : [ptr] "r" (ptr), [start] "r" (start), [tmp] "r" (tmp);
						if (start_written_flag == 0){
							start_written_flag = base_ptr + materializing_metadata_offset;
							long cswp_ret, tmp1;
							asm {
								"update_materializing_start_not_matched_claimed: movlr 0(%[ptr]) %[tmp] 0 8
								bge %[tmp] %[tmp1] after_update_materializing_start_claimed
								cswp %[ptr] %[cswp_ret] %[tmp] %[tmp1]
								bne %[cswp_ret] %[tmp] update_materializing_start_not_matched_claimed
								after_update_materializing_start_claimed: movir %[ptr] 1"
							} : [ptr] "r" (start_written_flag), [cswp_ret] "r" (cswp_ret), [tmp] "r" (tmp), [tmp1] "r" (start);
						}
					}
					else{
						asm {
							"print 'Matched: entry %ld reads %ld at %lu' %[start] %[tmp] %[ptr]"
						} : [ptr] "r" (ptr), [start] "r" (start), [tmp] "r" (tmp);
						// If mached, send it to the claimed destination
						num = num + 1;
						asm {
							"send_wcont %[dest] %[ret] %[ptr] {self.inter_kvpair_size}"
						} : [dest] "r" (dest), [ret] "r" (ret_cont_word), [ptr] "r" (ptr);

						// // Increment matched_count
						// matched_count = matched_count + 1;

						// Erase this entry
						for (tmp=0; tmp<inter_kvpair_size; tmp=tmp+1) { 
							ptr[tmp] = -1; 
						}
					}
				}

				// Step forward one entry
				start = start + 1;
				// If going across lanes, update ptr
				if (start == next_change_stop) {
					ptr = base_ptr + (((start / materialize_kv_cache_count) % 64) << 16) + materialize_kv_cache_offset;
					next_change_stop = next_change_stop + materialize_kv_cache_count;
				}
				else {
					// If going inside lane, increment ptr
					ptr = ptr + inter_kvpair_size * 8;
				}
			}

			// // Increment unresolved_kv_count by matched_count
			// if (1) {
			// 	ptr = base_ptr + unresolved_kv_count_offset;
			// 	long cswp_ret, tmp, tmp1;
			// 	asm {
			// 		"update_unresolved_count: movlr 0(%[ptr]) %[tmp] 0 8
			// 		add %[tmp] %[matched_count] %[tmp1]
			// 		cswp %[ptr] %[cswp_ret] %[tmp] %[tmp1]
			// 		bne %[cswp_ret] %[tmp] update_unresolved_count
			// 		print 'Lane %u receive_kv_ptr increment unresolved_count from %d to %d' X0 %[tmp] %[tmp1]"
			// 	} : [ptr] "r" (ptr), [cswp_ret] "r" (cswp_ret), [tmp] "r" (tmp), [tmp1] "r" (tmp1), [matched_count] "r" (matched_count);
			// }
		}

		// Write new start to spd if haven't
		if (start_written_flag == 0) {
			ptr = base_ptr + materializing_metadata_offset;
			long cswp_ret, tmp;
			asm {
				"update_materializing_start: movlr 0(%[ptr]) %[tmp] 0 8
				bge %[tmp] %[start] after_update_materializing_start
				cswp %[ptr] %[cswp_ret] %[tmp] %[start]
				bne %[cswp_ret] %[tmp] update_materializing_start
				after_update_materializing_start: movir %[start_written_flag] 1"
			} : [ptr] "r" (ptr), [cswp_ret] "r" (cswp_ret), [tmp] "r" (tmp), [start] "r" (start), [start_written_flag] "r" (start_written_flag);
		}

		yield_terminate;
	}


	event receiver_materialize_kv_ret(unsigned long dram_addr){
		yield_terminate;
	}

	event receiver_update_unresolved_kv_count(long tmp){
		yield_terminate;
	}


}