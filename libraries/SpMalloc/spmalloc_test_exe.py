from EFA_v2 import EFA, State, Transition

def efaProgram_spmalloc_test_exe(efa):

    ## init_null_state with ID 0
    init_null_state_0 = State()
    efa.add_state(init_null_state_0)
    efa.add_initId(init_null_state_0.state_id)

    ## lm_allocator__spmalloc with ID 0
    lm_allocator__spmalloc_0 = init_null_state_0.writeTransition("eventCarry", init_null_state_0, init_null_state_0, 0)
    lm_allocator__spmalloc_0.writeAction("mov_reg2reg X1 UDPR_4")
    lm_allocator__spmalloc_0.writeAction("addi X7 UDPR_15 0")
    lm_allocator__spmalloc_0.writeAction("movir UDPR_13 65536")
    lm_allocator__spmalloc_0.writeAction("SpMalloc_bxusb_init: add X7 UDPR_13 UDPR_2")
    lm_allocator__spmalloc_0.writeAction("addi UDPR_15 UDPR_1 1600")
    lm_allocator__spmalloc_0.writeAction("move 0(UDPR_1) UDPR_14 0 8")
    lm_allocator__spmalloc_0.writeAction("add UDPR_14 UDPR_15 UDPR_1")
    lm_allocator__spmalloc_0.writeAction("move 0(UDPR_1) UDPR_13 0 8")
    lm_allocator__spmalloc_0.writeAction("bnei UDPR_13 0 SpMalloc_bxusb_allocate_block")
    lm_allocator__spmalloc_0.writeAction("sub UDPR_2 UDPR_1 UDPR_14")
    lm_allocator__spmalloc_0.writeAction("lshift UDPR_14 UDPR_14 1")
    lm_allocator__spmalloc_0.writeAction("move UDPR_14 0(UDPR_1) 0 8")
    lm_allocator__spmalloc_0.writeAction("SpMalloc_bxusb_allocate_block: addi X8 UDPR_0 0")
    lm_allocator__spmalloc_0.writeAction("beqi UDPR_0 0 SpMalloc_bxusb_no_block_available")
    lm_allocator__spmalloc_0.writeAction("addi UDPR_0 UDPR_0 1")
    lm_allocator__spmalloc_0.writeAction("lshift UDPR_0 UDPR_0 3")
    lm_allocator__spmalloc_0.writeAction("mov_reg2reg UDPR_1 UDPR_3")
    lm_allocator__spmalloc_0.writeAction("SpMalloc_bxusb_find_free_block: move 0(UDPR_3) UDPR_13 0 8")
    lm_allocator__spmalloc_0.writeAction("rshift UDPR_13 UDPR_14 1")
    lm_allocator__spmalloc_0.writeAction("andi UDPR_13 UDPR_12 1")
    lm_allocator__spmalloc_0.writeAction("blt UDPR_14 UDPR_0 SpMalloc_bxusb_continue_find_block_loop")
    lm_allocator__spmalloc_0.writeAction("beqi UDPR_12 0 SpMalloc_bxusb_found_free_block")
    lm_allocator__spmalloc_0.writeAction("SpMalloc_bxusb_continue_find_block_loop: add UDPR_14 UDPR_3 UDPR_11")
    lm_allocator__spmalloc_0.writeAction("bge UDPR_11 UDPR_2 SpMalloc_bxusb_no_block_available")
    lm_allocator__spmalloc_0.writeAction("beqi UDPR_12 1 SpMalloc_bxusb_do_not_coalesce")
    lm_allocator__spmalloc_0.writeAction("move 0(UDPR_11) UDPR_10 0 8")
    lm_allocator__spmalloc_0.writeAction("andi UDPR_10 UDPR_12 1")
    lm_allocator__spmalloc_0.writeAction("beqi UDPR_12 1 SpMalloc_bxusb_do_not_coalesce")
    lm_allocator__spmalloc_0.writeAction("rshift UDPR_10 UDPR_10 1")
    lm_allocator__spmalloc_0.writeAction("add UDPR_10 UDPR_14 UDPR_14")
    lm_allocator__spmalloc_0.writeAction("lshift UDPR_14 UDPR_14 1")
    lm_allocator__spmalloc_0.writeAction("move UDPR_14 0(UDPR_3) 0 8")
    lm_allocator__spmalloc_0.writeAction("jmp SpMalloc_bxusb_find_free_block")
    lm_allocator__spmalloc_0.writeAction("SpMalloc_bxusb_do_not_coalesce: mov_reg2reg UDPR_11 UDPR_3")
    lm_allocator__spmalloc_0.writeAction("jmp SpMalloc_bxusb_find_free_block")
    lm_allocator__spmalloc_0.writeAction("SpMalloc_bxusb_found_free_block: sub UDPR_14 UDPR_0 UDPR_11")
    lm_allocator__spmalloc_0.writeAction("blti UDPR_11 16 SpMalloc_bxusb_post_allocation_header_assignment")
    lm_allocator__spmalloc_0.writeAction("mov_reg2reg UDPR_0 UDPR_14")
    lm_allocator__spmalloc_0.writeAction("lshift UDPR_11 UDPR_11 1")
    lm_allocator__spmalloc_0.writeAction("add UDPR_3 UDPR_14 UDPR_12")
    lm_allocator__spmalloc_0.writeAction("move UDPR_11 0(UDPR_12) 0 8")
    lm_allocator__spmalloc_0.writeAction("SpMalloc_bxusb_post_allocation_header_assignment: lshift_add_imm UDPR_14 UDPR_14 1 1")
    lm_allocator__spmalloc_0.writeAction("move UDPR_14 0(UDPR_3) 0 8")
    lm_allocator__spmalloc_0.writeAction("addi UDPR_3 UDPR_3 8")
    lm_allocator__spmalloc_0.writeAction("jmp SpMalloc_bxusb_write_results")
    lm_allocator__spmalloc_0.writeAction("SpMalloc_bxusb_no_block_available: mov_imm2reg UDPR_3 0")
    lm_allocator__spmalloc_0.writeAction("SpMalloc_bxusb_write_results: mov_imm2reg UDPR_14 0")
    lm_allocator__spmalloc_0.writeAction("beqi UDPR_3 0 SpMalloc_bxusb_reply")
    lm_allocator__spmalloc_0.writeAction("mov_imm2reg UDPR_14 1")
    lm_allocator__spmalloc_0.writeAction("SpMalloc_bxusb_reply: sendr_wcont UDPR_4 UDPR_4 UDPR_3 UDPR_14 UDPR_14")
    lm_allocator__spmalloc_0.writeAction("yield_terminate")

    ## lm_allocator__spfree with ID 1
    lm_allocator__spfree_1 = init_null_state_0.writeTransition("eventCarry", init_null_state_0, init_null_state_0, 1)
    lm_allocator__spfree_1.writeAction("mov_reg2reg X1 UDPR_2")
    lm_allocator__spfree_1.writeAction("addi X8 UDPR_4 0")
    lm_allocator__spfree_1.writeAction("subi UDPR_4 UDPR_4 8")
    lm_allocator__spfree_1.writeAction("move 0(UDPR_4) UDPR_3 0 8")
    lm_allocator__spfree_1.writeAction("movir UDPR_1 65535")
    lm_allocator__spfree_1.writeAction("sli UDPR_1 UDPR_1 16")
    lm_allocator__spfree_1.writeAction("ori UDPR_1 UDPR_1 65534")
    lm_allocator__spfree_1.writeAction("and UDPR_3 UDPR_1 UDPR_3")
    lm_allocator__spfree_1.writeAction("move UDPR_3 0(UDPR_4) 0 8")
    lm_allocator__spfree_1.writeAction("mov_imm2reg UDPR_1 1")
    lm_allocator__spfree_1.writeAction("sendr_wcont UDPR_2 UDPR_2 UDPR_1 UDPR_1 UDPR_1")
    lm_allocator__spfree_1.writeAction("yield_terminate")

    ## start_event with ID 2
    start_event_2 = init_null_state_0.writeTransition("eventCarry", init_null_state_0, init_null_state_0, 2)
    start_event_2.writeAction("movir X16 0")
    start_event_2.writeAction("addi X7 X17 0")
    start_event_2.writeAction("move X16 0(X17) 0 8")
    start_event_2.writeAction("addi X8 X16 0")
    start_event_2.writeAction("evii X17 0 255 5")
    start_event_2.writeAction("sendr_wret X17 3 X16 X18 X19 X20")
    start_event_2.writeAction("yield")

    ## write_crap with ID 3
    write_crap_3 = init_null_state_0.writeTransition("eventCarry", init_null_state_0, init_null_state_0, 3)
    write_crap_3.writeAction("beqiu X9 1 testSpMallocEFA_abqun_success_malloc")
    write_crap_3.writeAction("yieldt")
    write_crap_3.writeAction("testSpMallocEFA_abqun_success_malloc: addi X8 X17 0")
    write_crap_3.writeAction("print 'SP MALLOC succeeded %lu %lu' X8 X9 ")
    write_crap_3.writeAction("movir X19 999")
    write_crap_3.writeAction("move X19 0(X17) 0 8")
    write_crap_3.writeAction("add X16 X17 X17")
    write_crap_3.writeAction("move X19 -8(X17) 0 8")
    write_crap_3.writeAction("evii X17 1 255 5")
    write_crap_3.writeAction("sendr_wret X17 4 X8 X16 X17 X18")
    write_crap_3.writeAction("yield")

    ## terminate_event with ID 4
    terminate_event_4 = init_null_state_0.writeTransition("eventCarry", init_null_state_0, init_null_state_0, 4)
    terminate_event_4.writeAction("movir X16 100")
    terminate_event_4.writeAction("print 'SP FREE done will quit' ")
    terminate_event_4.writeAction("addi X7 X17 0")
    terminate_event_4.writeAction("move X16 0(X17) 0 8")
    terminate_event_4.writeAction("yieldt")



def main():
    efa = EFA([])
    efa.code_level = 'machine'
    efaProgram_spmalloc_test_exe(efa)
    return efa