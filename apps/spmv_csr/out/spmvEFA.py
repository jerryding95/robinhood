from linker.EFAProgram import efaProgram

## Global constants

@efaProgram
def EFA_spmv(efa):
  efa.code_level = 'machine'
  state0 = efa.State("udweave_init") #Only one state code 
  efa.add_initId(state0.state_id)
  ## Static declarations
  ## Scoped Variable "counter" uses Register X16, scope (0)
  ## Param "mat_height" uses Register X8, scope (0->3)
  ## Param "offset_addr" uses Register X9, scope (0->3)
  ## Param "matval_addr" uses Register X10, scope (0->3)
  ## Param "matcol_addr" uses Register X11, scope (0->3)
  ## Param "vec_addr" uses Register X12, scope (0->3)
  ## Param "res_vec_addr" uses Register X13, scope (0->3)
  ## Param "part_array_addr" uses Register X14, scope (0->3)
  ## Param "num_workers" uses Register X15, scope (0->3)
  ## Scoped Variable "sp_ptr" uses Register X17, scope (0->3)
  ## Scoped Variable "send_ptr" uses Register X18, scope (0->3)
  ## Scoped Variable "nwid" uses Register X19, scope (0->3)
  ## Scoped Variable "evword" uses Register X20, scope (0->3)
  ## Scoped Variable "cont_word" uses Register X21, scope (0->3)
  ## Scoped Variable "i" uses Register X22, scope (0->3)
  ## Scoped Variable "tmp" uses Register X23, scope (0->3)
  ## Scoped Variable "evword" uses Register X17, scope (0->11)
  ## Scoped Variable "tmp" uses Register X18, scope (0->11)
  ## Scoped Variable "cont_word" uses Register X19, scope (0->11)
  ## Scoped Variable "sp_ptr" uses Register X20, scope (0->11)
  ## Scoped Variable "send_ptr" uses Register X21, scope (0->11)
  ## Scoped Variable "sp_ptr" uses Register X17, scope (0->17)
  ## Param "mat_height" uses Register X8, scope (0->20)
  ## Param "offset_addr" uses Register X9, scope (0->20)
  ## Param "matval_addr" uses Register X10, scope (0->20)
  ## Param "matcol_addr" uses Register X11, scope (0->20)
  ## Param "vec_addr" uses Register X12, scope (0->20)
  ## Param "res_vec_addr" uses Register X13, scope (0->20)
  ## Scoped Variable "sp_ptr" uses Register X16, scope (0->20)
  ## Scoped Variable "counter" uses Register X16, scope (0)
  ## Scoped Variable "complete_count" uses Register X17, scope (0)
  ## Scoped Variable "nnz" uses Register X18, scope (0)
  ## Scoped Variable "row_idx" uses Register X19, scope (0)
  ## Scoped Variable "cont_word" uses Register X20, scope (0)
  ## Scoped Variable "accum" uses Register X21, scope (0)
  ## Scoped Variable "curr_col_addr" uses Register X22, scope (0)
  ## Scoped Variable "curr_val_addr" uses Register X23, scope (0)
  ## Param "start_offset" uses Register X8, scope (0->22)
  ## Param "end_offset" uses Register X9, scope (0->22)
  ## Param "addr" uses Register X10, scope (0->22)
  ## Scoped Variable "sp_ptr" uses Register X24, scope (0->22)
  ## Scoped Variable "res_addr" uses Register X25, scope (0->22)
  ## Scoped Variable "evword" uses Register X26, scope (0->22)
  ## Scoped Variable "tmp" uses Register X27, scope (0->22)
  ## Scoped Variable "sp_ptr" uses Register X24, scope (0->28)
  ## Scoped Variable "batch_size" uses Register X25, scope (0->28)
  ## Scoped Variable "i" uses Register X26, scope (0->28)
  ## Scoped Variable "evword" uses Register X27, scope (0->28)
  ## Scoped Variable "cont" uses Register X28, scope (0->28)
  ## Param "partial_val" uses Register X8, scope (0->37)
  ## Scoped Variable "sp_ptr" uses Register X24, scope (0->37)
  ## Scoped Variable "evword" uses Register X25, scope (0->37)
  ## Scoped Variable "tmp" uses Register X26, scope (0->37)
  ## Scoped Variable "res_addr" uses Register X24, scope (0->48)
  ## Scoped Variable "sp_ptr" uses Register X25, scope (0->48)
  ## Scoped Variable "tmp" uses Register X26, scope (0->48)
  ## Scoped Variable "evword" uses Register X27, scope (0->48)
  ## Scoped Variable "cont" uses Register X16, scope (0)
  ## Scoped Variable "col_addr" uses Register X17, scope (0)
  ## Scoped Variable "v0" uses Register X18, scope (0)
  ## Scoped Variable "v1" uses Register X19, scope (0)
  ## Scoped Variable "v2" uses Register X20, scope (0)
  ## Scoped Variable "v3" uses Register X21, scope (0)
  ## Scoped Variable "v4" uses Register X22, scope (0)
  ## Scoped Variable "v5" uses Register X23, scope (0)
  ## Scoped Variable "v6" uses Register X24, scope (0)
  ## Scoped Variable "v7" uses Register X25, scope (0)
  ## Scoped Variable "accum" uses Register X26, scope (0)
  ## Param "caddr" uses Register X8, scope (0->50)
  ## Param "val_addr" uses Register X9, scope (0->50)
  ## Scoped Variable "evword" uses Register X27, scope (0->50)
  ## Param "op0" uses Register X8, scope (0->53)
  ## Param "op1" uses Register X9, scope (0->53)
  ## Param "op2" uses Register X10, scope (0->53)
  ## Param "op3" uses Register X11, scope (0->53)
  ## Param "op4" uses Register X12, scope (0->53)
  ## Param "op5" uses Register X13, scope (0->53)
  ## Param "op6" uses Register X14, scope (0->53)
  ## Param "op7" uses Register X15, scope (0->53)
  ## Param "op8" uses Register X3, scope (0->53)
  ## Scoped Variable "evword" uses Register X27, scope (0->53)
  ## Param "op0" uses Register X8, scope (0->55)
  ## Param "op1" uses Register X9, scope (0->55)
  ## Param "op2" uses Register X10, scope (0->55)
  ## Param "op3" uses Register X11, scope (0->55)
  ## Param "op4" uses Register X12, scope (0->55)
  ## Param "op5" uses Register X13, scope (0->55)
  ## Param "op6" uses Register X14, scope (0->55)
  ## Param "op7" uses Register X15, scope (0->55)
  ## Param "op8" uses Register X3, scope (0->55)
  ## Scoped Variable "evword" uses Register X27, scope (0->55)
  ## Scoped Variable "vec_base" uses Register X28, scope (0->55)
  ## Scoped Variable "vec_addr" uses Register X29, scope (0->55)
  ## Scoped Variable "sp_ptr" uses Register X30, scope (0->55)
  ## Param "val0" uses Register X8, scope (0->57)
  ## Param "val1" uses Register X8, scope (0->61)
  ## Param "val2" uses Register X8, scope (0->64)
  ## Param "val3" uses Register X8, scope (0->67)
  ## Param "val4" uses Register X8, scope (0->70)
  ## Param "val5" uses Register X8, scope (0->74)
  ## Param "val6" uses Register X8, scope (0->77)
  ## Param "val7" uses Register X8, scope (0->80)
  ## Scoped Variable "cont" uses Register X16, scope (0)
  ## Scoped Variable "counter" uses Register X17, scope (0)
  ## Scoped Variable "col_addr" uses Register X18, scope (0)
  ## Scoped Variable "v0" uses Register X19, scope (0)
  ## Scoped Variable "v1" uses Register X20, scope (0)
  ## Scoped Variable "v2" uses Register X21, scope (0)
  ## Scoped Variable "v3" uses Register X22, scope (0)
  ## Scoped Variable "v4" uses Register X23, scope (0)
  ## Scoped Variable "v5" uses Register X24, scope (0)
  ## Scoped Variable "v6" uses Register X25, scope (0)
  ## Scoped Variable "accum" uses Register X26, scope (0)
  ## Param "caddr" uses Register X8, scope (0->85)
  ## Param "val_addr" uses Register X9, scope (0->85)
  ## Param "c" uses Register X10, scope (0->85)
  ## Scoped Variable "evword" uses Register X27, scope (0->85)
  ## Param "op0" uses Register X8, scope (0->87)
  ## Param "op1" uses Register X9, scope (0->87)
  ## Param "op2" uses Register X10, scope (0->87)
  ## Param "op3" uses Register X11, scope (0->87)
  ## Param "op4" uses Register X12, scope (0->87)
  ## Param "op5" uses Register X13, scope (0->87)
  ## Param "op6" uses Register X14, scope (0->87)
  ## Param "op7" uses Register X15, scope (0->87)
  ## Param "op8" uses Register X3, scope (0->87)
  ## Scoped Variable "evword" uses Register X27, scope (0->87)
  ## Param "op0" uses Register X8, scope (0->88)
  ## Param "op1" uses Register X9, scope (0->88)
  ## Param "op2" uses Register X10, scope (0->88)
  ## Param "op3" uses Register X11, scope (0->88)
  ## Param "op4" uses Register X12, scope (0->88)
  ## Param "op5" uses Register X13, scope (0->88)
  ## Param "op6" uses Register X14, scope (0->88)
  ## Param "op7" uses Register X15, scope (0->88)
  ## Param "op8" uses Register X3, scope (0->88)
  ## Scoped Variable "evword" uses Register X27, scope (0->88)
  ## Scoped Variable "vec_base" uses Register X28, scope (0->88)
  ## Scoped Variable "vec_addr" uses Register X29, scope (0->88)
  ## Scoped Variable "sp_ptr" uses Register X30, scope (0->88)
  ## Param "val0" uses Register X8, scope (0->101)
  ## Param "val1" uses Register X8, scope (0->104)
  ## Param "val2" uses Register X8, scope (0->107)
  ## Param "val3" uses Register X8, scope (0->110)
  ## Param "val4" uses Register X8, scope (0->113)
  ## Param "val5" uses Register X8, scope (0->116)
  ## Param "val6" uses Register X8, scope (0->119)
  ## This program performs matrix-matrix multiplication. It makes the assumption that the scratchpad space is
  ## sufficient for 8 columns of the right-hand-side matrix. It targets one UD.
  ## Scratchpad Space
  ## 0  -  8 offset_addr
  ## 8  - 16 mat_height
  ## 16 - 24 matval_addr
  ## 24 - 32 matcol_addr
  ## 32 - 40 vec_addr
  ## 40 - 48 res_vec_addr
  ## 48 - 56 part_array
  ## 56 - 64 num_workers
  
  ######################################################
  ###### Writing code for thread matvecmul_master ######
  ######################################################
  # Writing code for event matvecmul_master::mv_init
  tranmatvecmul_master__mv_init = efa.writeEvent('matvecmul_master::mv_init')
  tranmatvecmul_master__mv_init.writeAction(f"entry: addi X7 X17 0") 
  tranmatvecmul_master__mv_init.writeAction(f"perflog 1 0 '[NWID %d] SPMV Start' {'X0'}") 
  tranmatvecmul_master__mv_init.writeAction(f"bcpyoli X8 X17 8") 
  tranmatvecmul_master__mv_init.writeAction(f"movir X20 0") 
  tranmatvecmul_master__mv_init.writeAction(f"evlb X20 lane_manager::cache_metadata") 
  tranmatvecmul_master__mv_init.writeAction(f"evi X20 X20 255 4") 
  tranmatvecmul_master__mv_init.writeAction(f"ev X20 X20 X0 X0 8") 
  tranmatvecmul_master__mv_init.writeAction(f"evi X2 X21 matvecmul_master::cache_metadata_return 1") 
  tranmatvecmul_master__mv_init.writeAction(f"bnei X15 1 __if_mv_init_2_post") 
  tranmatvecmul_master__mv_init.writeAction(f"__if_mv_init_0_true: addi X7 X18 64") 
  tranmatvecmul_master__mv_init.writeAction(f"movlr 48(X17) X23 0 8") 
  tranmatvecmul_master__mv_init.writeAction(f"movrl X23 0(X18) 0 8") 
  ## partition array address
  tranmatvecmul_master__mv_init.writeAction(f"movir X23 32") 
  tranmatvecmul_master__mv_init.writeAction(f"movrl X23 8(X18) 0 8") 
  tranmatvecmul_master__mv_init.writeAction(f"movlr 56(X17) X23 0 8") 
  tranmatvecmul_master__mv_init.writeAction(f"movrl X23 16(X18) 0 8") 
  ## number of workers
  tranmatvecmul_master__mv_init.writeAction(f"movrl X17 24(X18) 0 8") 
  tranmatvecmul_master__mv_init.writeAction(f"movir X20 0") 
  tranmatvecmul_master__mv_init.writeAction(f"evlb X20 spmv__map_shuffle_reduce") 
  tranmatvecmul_master__mv_init.writeAction(f"evi X20 X20 255 4") 
  tranmatvecmul_master__mv_init.writeAction(f"ev X20 X20 X0 X0 8") 
  tranmatvecmul_master__mv_init.writeAction(f"evi X2 X21 matvecmul_master::spmv_term 1") 
  tranmatvecmul_master__mv_init.writeAction(f"send_wcont X20 X21 X18 4") 
  tranmatvecmul_master__mv_init.writeAction(f"yield") 
  tranmatvecmul_master__mv_init.writeAction(f"__if_mv_init_2_post: addi X0 X19 0") 
  tranmatvecmul_master__mv_init.writeAction(f"movir X22 1") 
  tranmatvecmul_master__mv_init.writeAction(f"__for_mv_init_6_condition: ble X15 X22 __for_mv_init_8_post") 
  tranmatvecmul_master__mv_init.writeAction(f"__for_mv_init_7_body: addi X19 X19 1") 
  tranmatvecmul_master__mv_init.writeAction(f"ev X20 X20 X19 X19 8") 
  tranmatvecmul_master__mv_init.writeAction(f"send_wcont X20 X21 X17 6") 
  tranmatvecmul_master__mv_init.writeAction(f"addi X22 X22 1") 
  tranmatvecmul_master__mv_init.writeAction(f"jmp __for_mv_init_6_condition") 
  tranmatvecmul_master__mv_init.writeAction(f"__for_mv_init_8_post: subi X15 X16 1") 
  tranmatvecmul_master__mv_init.writeAction(f"yield") 
  
  # Writing code for event matvecmul_master::cache_metadata_return
  tranmatvecmul_master__cache_metadata_return = efa.writeEvent('matvecmul_master::cache_metadata_return')
  tranmatvecmul_master__cache_metadata_return.writeAction(f"entry: addi X7 X20 0") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"addi X7 X21 64") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"subi X16 X16 1") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"bnei X16 0 __if_cache_metadata_return_5_post") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"__if_cache_metadata_return_3_true: movlr 48(X20) X18 0 8") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"movrl X18 0(X21) 0 8") 
  ## partition array address
  tranmatvecmul_master__cache_metadata_return.writeAction(f"movir X18 32") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"movrl X18 8(X21) 0 8") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"movlr 56(X20) X18 0 8") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"movrl X18 16(X21) 0 8") 
  ## number of workers
  tranmatvecmul_master__cache_metadata_return.writeAction(f"movrl X20 24(X21) 0 8") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"movir X17 0") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"evlb X17 spmv__map_shuffle_reduce") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"evi X17 X17 255 4") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"ev X17 X17 X0 X0 8") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"evi X2 X19 matvecmul_master::spmv_term 1") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"send_wcont X17 X19 X21 4") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"perflog 1 0 '[NWID %d] Launch KVMSR' {'X0'}") 
  tranmatvecmul_master__cache_metadata_return.writeAction(f"__if_cache_metadata_return_5_post: yield") 
  
  # Writing code for event matvecmul_master::spmv_term
  tranmatvecmul_master__spmv_term = efa.writeEvent('matvecmul_master::spmv_term')
  tranmatvecmul_master__spmv_term.writeAction(f"entry: movir X18 65528") 
  tranmatvecmul_master__spmv_term.writeAction(f"add X7 X18 X17") 
  tranmatvecmul_master__spmv_term.writeAction(f"perflog 1 0 '[NWID %d] KVMSR Return' {'X0'}") 
  tranmatvecmul_master__spmv_term.writeAction(f"movir X19 1") 
  tranmatvecmul_master__spmv_term.writeAction(f"movrl X19 0(X17) 0 8") 
  tranmatvecmul_master__spmv_term.writeAction(f"yield_terminate") 
  
  ## 64  - 72  number of non-zeros
  ## 72  - 80  value_addr_base
  ## 80  - 88  col_addr_base
  ## 88  - 96  cache_offset
  ## 88  - 96  row_idx
  
  ##################################################
  ###### Writing code for thread lane_manager ######
  ##################################################
  # Writing code for event lane_manager::cache_metadata
  tranlane_manager__cache_metadata = efa.writeEvent('lane_manager::cache_metadata')
  tranlane_manager__cache_metadata.writeAction(f"entry: addi X7 X16 0") 
  tranlane_manager__cache_metadata.writeAction(f"bcpyoli X8 X16 6") 
  tranlane_manager__cache_metadata.writeAction(f"sendr_wcont X1 X1 X1 X1") 
  tranlane_manager__cache_metadata.writeAction(f"yield_terminate") 
  
  
  ##########################################
  ###### Writing code for thread spmv ######
  ##########################################
  # Writing code for event spmv::kv_map
  transpmv__kv_map = efa.writeEvent('spmv::kv_map')
  transpmv__kv_map.writeAction(f"entry: addi X7 X24 0") 
  transpmv__kv_map.writeAction(f"movlr 0(X24) X27 0 8") 
  ## base address of offset array
  transpmv__kv_map.writeAction(f"sub X10 X27 X27") 
  transpmv__kv_map.writeAction(f"sari X27 X19 4") 
  ## offset / (16 bytes/pair)
  transpmv__kv_map.writeAction(f"sub X9 X8 X27") 
  transpmv__kv_map.writeAction(f"sari X27 X27 3") 
  transpmv__kv_map.writeAction(f"addi X27 X18 0") 
  ## Get the number of non-zeros
  transpmv__kv_map.writeAction(f"bnei X27 0 __if_kv_map_8_post") 
  transpmv__kv_map.writeAction(f"__if_kv_map_6_true: movlr 40(X24) X25 0 8") 
  transpmv__kv_map.writeAction(f"sli X19 X27 3") 
  transpmv__kv_map.writeAction(f"add X25 X27 X25") 
  transpmv__kv_map.writeAction(f"movir X21 0") 
  transpmv__kv_map.writeAction(f"evi X2 X26 spmv__kv_map_return 1") 
  transpmv__kv_map.writeAction(f"sendr_dmlm X25 X26 X21") 
  transpmv__kv_map.writeAction(f"yield") 
  ## The row is empty, return to master
  transpmv__kv_map.writeAction(f"__if_kv_map_8_post: movlr 16(X24) X23 0 8") 
  transpmv__kv_map.writeAction(f"add X23 X8 X23") 
  ## Address to start fetching matrix values
  transpmv__kv_map.writeAction(f"movlr 24(X24) X22 0 8") 
  transpmv__kv_map.writeAction(f"add X22 X8 X22") 
  ##  Address to start fetching column indices
  transpmv__kv_map.writeAction(f"addi X1 X20 0") 
  transpmv__kv_map.writeAction(f"movir X17 0") 
  transpmv__kv_map.writeAction(f"movir X21 0") 
  transpmv__kv_map.writeAction(f"evi X2 X26 spmv::launch_strip 1") 
  transpmv__kv_map.writeAction(f"sendr_wcont X26 X26 X26 X26") 
  ## Start caching data
  transpmv__kv_map.writeAction(f"yield") 
  
  # Writing code for event spmv::launch_strip
  transpmv__launch_strip = efa.writeEvent('spmv::launch_strip')
  transpmv__launch_strip.writeAction(f"entry: addi X7 X24 0") 
  transpmv__launch_strip.writeAction(f"sub X18 X17 X25") 
  transpmv__launch_strip.writeAction(f"movir X29 32") 
  transpmv__launch_strip.writeAction(f"ble X25 X29 __if_launch_strip_2_post") 
  transpmv__launch_strip.writeAction(f"__if_launch_strip_0_true: movir X25 32") 
  transpmv__launch_strip.writeAction(f"__if_launch_strip_2_post: movir X27 0") 
  transpmv__launch_strip.writeAction(f"evlb X27 strip_worker::launch_strip") 
  transpmv__launch_strip.writeAction(f"evi X27 X27 255 4") 
  transpmv__launch_strip.writeAction(f"ev X27 X27 X0 X0 8") 
  transpmv__launch_strip.writeAction(f"evi X2 X28 spmv::strip_worker_return 1") 
  transpmv__launch_strip.writeAction(f"addi X25 X26 0") 
  transpmv__launch_strip.writeAction(f"__for_launch_strip_3_condition: blti X26 8 __for_launch_strip_5_post") 
  transpmv__launch_strip.writeAction(f"__for_launch_strip_4_body: sendr_wcont X27 X28 X22 X23") 
  transpmv__launch_strip.writeAction(f"addi X23 X23 64") 
  transpmv__launch_strip.writeAction(f"addi X22 X22 64") 
  transpmv__launch_strip.writeAction(f"subi X26 X26 8") 
  transpmv__launch_strip.writeAction(f"jmp __for_launch_strip_3_condition") 
  transpmv__launch_strip.writeAction(f"__for_launch_strip_5_post: blei X26 0 __if_launch_strip_8_post") 
  transpmv__launch_strip.writeAction(f"__if_launch_strip_6_true: movir X27 0") 
  transpmv__launch_strip.writeAction(f"evlb X27 partial_strip_worker::launch_strip") 
  transpmv__launch_strip.writeAction(f"evi X27 X27 255 4") 
  transpmv__launch_strip.writeAction(f"ev X27 X27 X0 X0 8") 
  transpmv__launch_strip.writeAction(f"sendr3_wcont X27 X28 X22 X23 X26") 
  transpmv__launch_strip.writeAction(f"__if_launch_strip_8_post: addi X25 X16 7") 
  transpmv__launch_strip.writeAction(f"sari X16 X16 3") 
  ## Cache the matrix values
  transpmv__launch_strip.writeAction(f"add X17 X25 X17") 
  transpmv__launch_strip.writeAction(f"yield") 
  
  # Writing code for event spmv::strip_worker_return
  transpmv__strip_worker_return = efa.writeEvent('spmv::strip_worker_return')
  transpmv__strip_worker_return.writeAction(f"entry: addi X7 X24 0") 
  transpmv__strip_worker_return.writeAction(f"subi X16 X16 1") 
  transpmv__strip_worker_return.writeAction(f"fadd.64 X21 X8 X21") 
  transpmv__strip_worker_return.writeAction(f"bgt X18 X17 __if_strip_worker_return_8_post") 
  transpmv__strip_worker_return.writeAction(f"__if_strip_worker_return_6_true: bnei X16 0 __if_strip_worker_return_11_post") 
  transpmv__strip_worker_return.writeAction(f"__if_strip_worker_return_9_true: evi X2 X25 spmv::stream_complete 1") 
  transpmv__strip_worker_return.writeAction(f"sendr_wcont X25 X25 X25 X25") 
  transpmv__strip_worker_return.writeAction(f"yield") 
  ## All the elements have been processed
  transpmv__strip_worker_return.writeAction(f"__if_strip_worker_return_11_post: yield") 
  transpmv__strip_worker_return.writeAction(f"__if_strip_worker_return_8_post: sub X18 X17 X26") 
  transpmv__strip_worker_return.writeAction(f"blti X26 8 __if_strip_worker_return_13_false") 
  transpmv__strip_worker_return.writeAction(f"__if_strip_worker_return_12_true: movir X25 0") 
  transpmv__strip_worker_return.writeAction(f"evlb X25 strip_worker::launch_strip") 
  transpmv__strip_worker_return.writeAction(f"evi X25 X25 255 4") 
  transpmv__strip_worker_return.writeAction(f"ev X25 X25 X0 X0 8") 
  transpmv__strip_worker_return.writeAction(f"sendr_wcont X25 X2 X22 X23") 
  transpmv__strip_worker_return.writeAction(f"addi X23 X23 64") 
  transpmv__strip_worker_return.writeAction(f"addi X22 X22 64") 
  transpmv__strip_worker_return.writeAction(f"jmp __if_strip_worker_return_14_post") 
  transpmv__strip_worker_return.writeAction(f"__if_strip_worker_return_13_false: movir X25 0") 
  transpmv__strip_worker_return.writeAction(f"evlb X25 partial_strip_worker::launch_strip") 
  transpmv__strip_worker_return.writeAction(f"evi X25 X25 255 4") 
  transpmv__strip_worker_return.writeAction(f"ev X25 X25 X0 X0 8") 
  transpmv__strip_worker_return.writeAction(f"sendr3_wcont X25 X2 X22 X23 X26") 
  transpmv__strip_worker_return.writeAction(f"addi X23 X23 64") 
  transpmv__strip_worker_return.writeAction(f"addi X22 X22 64") 
  transpmv__strip_worker_return.writeAction(f"__if_strip_worker_return_14_post: addi X16 X16 1") 
  transpmv__strip_worker_return.writeAction(f"addi X17 X17 8") 
  ## Launch new thread if necessary
  ## Launch more computation using existing cache data
  transpmv__strip_worker_return.writeAction(f"yield") 
  
  # Writing code for event spmv::stream_complete
  transpmv__stream_complete = efa.writeEvent('spmv::stream_complete')
  transpmv__stream_complete.writeAction(f"entry: addi X7 X25 0") 
  transpmv__stream_complete.writeAction(f"movlr 40(X25) X24 0 8") 
  transpmv__stream_complete.writeAction(f"sli X19 X26 3") 
  transpmv__stream_complete.writeAction(f"add X24 X26 X24") 
  transpmv__stream_complete.writeAction(f"evi X2 X27 spmv__kv_map_return 1") 
  transpmv__stream_complete.writeAction(f"sendr_dmlm X24 X27 X21") 
  ## Writing the row data back
  transpmv__stream_complete.writeAction(f"yield") 
  
  
  ##################################################
  ###### Writing code for thread strip_worker ######
  ##################################################
  # Writing code for event strip_worker::launch_strip
  transtrip_worker__launch_strip = efa.writeEvent('strip_worker::launch_strip')
  transtrip_worker__launch_strip.writeAction(f"entry: evi X2 X27 strip_worker::matval_return 1") 
  transtrip_worker__launch_strip.writeAction(f"send_dmlm_ld X9 X27 8") 
  transtrip_worker__launch_strip.writeAction(f"addi X1 X16 0") 
  transtrip_worker__launch_strip.writeAction(f"addi X8 X17 0") 
  transtrip_worker__launch_strip.writeAction(f"movir X26 0") 
  transtrip_worker__launch_strip.writeAction(f"yield") 
  
  # Writing code for event strip_worker::matval_return
  transtrip_worker__matval_return = efa.writeEvent('strip_worker::matval_return')
  transtrip_worker__matval_return.writeAction(f"entry: evi X2 X27 strip_worker::matcol_return 1") 
  transtrip_worker__matval_return.writeAction(f"send_dmlm_ld X17 X27 8") 
  transtrip_worker__matval_return.writeAction(f"addi X8 X18 0") 
  transtrip_worker__matval_return.writeAction(f"addi X9 X19 0") 
  transtrip_worker__matval_return.writeAction(f"addi X10 X20 0") 
  transtrip_worker__matval_return.writeAction(f"addi X11 X21 0") 
  transtrip_worker__matval_return.writeAction(f"addi X12 X22 0") 
  transtrip_worker__matval_return.writeAction(f"addi X13 X23 0") 
  transtrip_worker__matval_return.writeAction(f"addi X14 X24 0") 
  transtrip_worker__matval_return.writeAction(f"addi X15 X25 0") 
  transtrip_worker__matval_return.writeAction(f"yield") 
  
  # Writing code for event strip_worker::matcol_return
  transtrip_worker__matcol_return = efa.writeEvent('strip_worker::matcol_return')
  transtrip_worker__matcol_return.writeAction(f"entry: addi X7 X30 0") 
  transtrip_worker__matcol_return.writeAction(f"movlr 32(X30) X28 0 8") 
  ## Vector's base address
  transtrip_worker__matcol_return.writeAction(f"sli X8 X29 3") 
  transtrip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  transtrip_worker__matcol_return.writeAction(f"evi X2 X27 strip_worker::fetch_ele0 1") 
  transtrip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  transtrip_worker__matcol_return.writeAction(f"sli X9 X29 3") 
  transtrip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  transtrip_worker__matcol_return.writeAction(f"evi X2 X27 strip_worker::fetch_ele1 1") 
  transtrip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  transtrip_worker__matcol_return.writeAction(f"sli X10 X29 3") 
  transtrip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  transtrip_worker__matcol_return.writeAction(f"evi X2 X27 strip_worker::fetch_ele2 1") 
  transtrip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  transtrip_worker__matcol_return.writeAction(f"sli X11 X29 3") 
  transtrip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  transtrip_worker__matcol_return.writeAction(f"evi X2 X27 strip_worker::fetch_ele3 1") 
  transtrip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  transtrip_worker__matcol_return.writeAction(f"sli X12 X29 3") 
  transtrip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  transtrip_worker__matcol_return.writeAction(f"evi X2 X27 strip_worker::fetch_ele4 1") 
  transtrip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  transtrip_worker__matcol_return.writeAction(f"sli X13 X29 3") 
  transtrip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  transtrip_worker__matcol_return.writeAction(f"evi X2 X27 strip_worker::fetch_ele5 1") 
  transtrip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  transtrip_worker__matcol_return.writeAction(f"sli X14 X29 3") 
  transtrip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  transtrip_worker__matcol_return.writeAction(f"evi X2 X27 strip_worker::fetch_ele6 1") 
  transtrip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  transtrip_worker__matcol_return.writeAction(f"sli X15 X29 3") 
  transtrip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  transtrip_worker__matcol_return.writeAction(f"evi X2 X27 strip_worker::fetch_ele7 1") 
  transtrip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  transtrip_worker__matcol_return.writeAction(f"movir X17 8") 
  transtrip_worker__matcol_return.writeAction(f"yield") 
  
  # Writing code for event strip_worker::fetch_ele0
  transtrip_worker__fetch_ele0 = efa.writeEvent('strip_worker::fetch_ele0')
  transtrip_worker__fetch_ele0.writeAction(f"entry: fmadd.64 X18 X8 X26") 
  transtrip_worker__fetch_ele0.writeAction(f"subi X17 X17 1") 
  transtrip_worker__fetch_ele0.writeAction(f"bnei X17 0 __if_fetch_ele0_5_post") 
  transtrip_worker__fetch_ele0.writeAction(f"__if_fetch_ele0_3_true: sendr_wcont X16 X16 X26 X26") 
  transtrip_worker__fetch_ele0.writeAction(f"yield_terminate") 
  transtrip_worker__fetch_ele0.writeAction(f"__if_fetch_ele0_5_post: yield") 
  
  # Writing code for event strip_worker::fetch_ele1
  transtrip_worker__fetch_ele1 = efa.writeEvent('strip_worker::fetch_ele1')
  transtrip_worker__fetch_ele1.writeAction(f"entry: fmadd.64 X19 X8 X26") 
  transtrip_worker__fetch_ele1.writeAction(f"subi X17 X17 1") 
  transtrip_worker__fetch_ele1.writeAction(f"bnei X17 0 __if_fetch_ele1_2_post") 
  transtrip_worker__fetch_ele1.writeAction(f"__if_fetch_ele1_0_true: sendr_wcont X16 X16 X26 X26") 
  transtrip_worker__fetch_ele1.writeAction(f"yield_terminate") 
  transtrip_worker__fetch_ele1.writeAction(f"__if_fetch_ele1_2_post: yield") 
  
  # Writing code for event strip_worker::fetch_ele2
  transtrip_worker__fetch_ele2 = efa.writeEvent('strip_worker::fetch_ele2')
  transtrip_worker__fetch_ele2.writeAction(f"entry: fmadd.64 X20 X8 X26") 
  transtrip_worker__fetch_ele2.writeAction(f"subi X17 X17 1") 
  transtrip_worker__fetch_ele2.writeAction(f"bnei X17 0 __if_fetch_ele2_2_post") 
  transtrip_worker__fetch_ele2.writeAction(f"__if_fetch_ele2_0_true: sendr_wcont X16 X16 X26 X26") 
  transtrip_worker__fetch_ele2.writeAction(f"yield_terminate") 
  transtrip_worker__fetch_ele2.writeAction(f"__if_fetch_ele2_2_post: yield") 
  
  # Writing code for event strip_worker::fetch_ele3
  transtrip_worker__fetch_ele3 = efa.writeEvent('strip_worker::fetch_ele3')
  transtrip_worker__fetch_ele3.writeAction(f"entry: fmadd.64 X21 X8 X26") 
  transtrip_worker__fetch_ele3.writeAction(f"subi X17 X17 1") 
  transtrip_worker__fetch_ele3.writeAction(f"bnei X17 0 __if_fetch_ele3_2_post") 
  transtrip_worker__fetch_ele3.writeAction(f"__if_fetch_ele3_0_true: sendr_wcont X16 X16 X26 X26") 
  transtrip_worker__fetch_ele3.writeAction(f"yield_terminate") 
  transtrip_worker__fetch_ele3.writeAction(f"__if_fetch_ele3_2_post: yield") 
  
  # Writing code for event strip_worker::fetch_ele4
  transtrip_worker__fetch_ele4 = efa.writeEvent('strip_worker::fetch_ele4')
  transtrip_worker__fetch_ele4.writeAction(f"entry: fmadd.64 X22 X8 X26") 
  transtrip_worker__fetch_ele4.writeAction(f"subi X17 X17 1") 
  transtrip_worker__fetch_ele4.writeAction(f"bnei X17 0 __if_fetch_ele4_5_post") 
  transtrip_worker__fetch_ele4.writeAction(f"__if_fetch_ele4_3_true: sendr_wcont X16 X16 X26 X26") 
  transtrip_worker__fetch_ele4.writeAction(f"yield_terminate") 
  transtrip_worker__fetch_ele4.writeAction(f"__if_fetch_ele4_5_post: yield") 
  
  # Writing code for event strip_worker::fetch_ele5
  transtrip_worker__fetch_ele5 = efa.writeEvent('strip_worker::fetch_ele5')
  transtrip_worker__fetch_ele5.writeAction(f"entry: fmadd.64 X23 X8 X26") 
  transtrip_worker__fetch_ele5.writeAction(f"subi X17 X17 1") 
  transtrip_worker__fetch_ele5.writeAction(f"bnei X17 0 __if_fetch_ele5_2_post") 
  transtrip_worker__fetch_ele5.writeAction(f"__if_fetch_ele5_0_true: sendr_wcont X16 X16 X26 X26") 
  transtrip_worker__fetch_ele5.writeAction(f"yield_terminate") 
  transtrip_worker__fetch_ele5.writeAction(f"__if_fetch_ele5_2_post: yield") 
  
  # Writing code for event strip_worker::fetch_ele6
  transtrip_worker__fetch_ele6 = efa.writeEvent('strip_worker::fetch_ele6')
  transtrip_worker__fetch_ele6.writeAction(f"entry: fmadd.64 X24 X8 X26") 
  transtrip_worker__fetch_ele6.writeAction(f"subi X17 X17 1") 
  transtrip_worker__fetch_ele6.writeAction(f"bnei X17 0 __if_fetch_ele6_2_post") 
  transtrip_worker__fetch_ele6.writeAction(f"__if_fetch_ele6_0_true: sendr_wcont X16 X16 X26 X26") 
  transtrip_worker__fetch_ele6.writeAction(f"yield_terminate") 
  transtrip_worker__fetch_ele6.writeAction(f"__if_fetch_ele6_2_post: yield") 
  
  # Writing code for event strip_worker::fetch_ele7
  transtrip_worker__fetch_ele7 = efa.writeEvent('strip_worker::fetch_ele7')
  transtrip_worker__fetch_ele7.writeAction(f"entry: fmadd.64 X25 X8 X26") 
  transtrip_worker__fetch_ele7.writeAction(f"subi X17 X17 1") 
  transtrip_worker__fetch_ele7.writeAction(f"bnei X17 0 __if_fetch_ele7_5_post") 
  transtrip_worker__fetch_ele7.writeAction(f"__if_fetch_ele7_3_true: sendr_wcont X16 X16 X26 X26") 
  transtrip_worker__fetch_ele7.writeAction(f"yield_terminate") 
  transtrip_worker__fetch_ele7.writeAction(f"__if_fetch_ele7_5_post: yield") 
  
  
  ##########################################################
  ###### Writing code for thread partial_strip_worker ######
  ##########################################################
  # Writing code for event partial_strip_worker::launch_strip
  tranpartial_strip_worker__launch_strip = efa.writeEvent('partial_strip_worker::launch_strip')
  tranpartial_strip_worker__launch_strip.writeAction(f"entry: evi X2 X27 partial_strip_worker::matval_return 1") 
  tranpartial_strip_worker__launch_strip.writeAction(f"send_dmlm_ld X9 X27 8") 
  tranpartial_strip_worker__launch_strip.writeAction(f"addi X1 X16 0") 
  tranpartial_strip_worker__launch_strip.writeAction(f"addi X8 X18 0") 
  tranpartial_strip_worker__launch_strip.writeAction(f"movir X26 0") 
  tranpartial_strip_worker__launch_strip.writeAction(f"addi X10 X17 0") 
  tranpartial_strip_worker__launch_strip.writeAction(f"yield") 
  
  # Writing code for event partial_strip_worker::matval_return
  tranpartial_strip_worker__matval_return = efa.writeEvent('partial_strip_worker::matval_return')
  tranpartial_strip_worker__matval_return.writeAction(f"entry: evi X2 X27 partial_strip_worker::matcol_return 1") 
  tranpartial_strip_worker__matval_return.writeAction(f"send_dmlm_ld X18 X27 8") 
  tranpartial_strip_worker__matval_return.writeAction(f"addi X8 X19 0") 
  tranpartial_strip_worker__matval_return.writeAction(f"addi X9 X20 0") 
  tranpartial_strip_worker__matval_return.writeAction(f"addi X10 X21 0") 
  tranpartial_strip_worker__matval_return.writeAction(f"addi X11 X22 0") 
  tranpartial_strip_worker__matval_return.writeAction(f"addi X12 X23 0") 
  tranpartial_strip_worker__matval_return.writeAction(f"addi X13 X24 0") 
  tranpartial_strip_worker__matval_return.writeAction(f"addi X14 X25 0") 
  tranpartial_strip_worker__matval_return.writeAction(f"yield") 
  
  # Writing code for event partial_strip_worker::matcol_return
  tranpartial_strip_worker__matcol_return = efa.writeEvent('partial_strip_worker::matcol_return')
  tranpartial_strip_worker__matcol_return.writeAction(f"entry: addi X7 X30 0") 
  tranpartial_strip_worker__matcol_return.writeAction(f"movlr 32(X30) X28 0 8") 
  ## Vector's base address
  tranpartial_strip_worker__matcol_return.writeAction(f"sli X8 X29 3") 
  tranpartial_strip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  tranpartial_strip_worker__matcol_return.writeAction(f"evi X2 X27 partial_strip_worker::fetch_ele0 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"bnei X17 1 __if_matcol_return_2_post") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_0_true: yield") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_2_post: sli X9 X29 3") 
  tranpartial_strip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  tranpartial_strip_worker__matcol_return.writeAction(f"evi X2 X27 partial_strip_worker::fetch_ele1 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"bnei X17 2 __if_matcol_return_5_post") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_3_true: yield") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_5_post: sli X10 X29 3") 
  tranpartial_strip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  tranpartial_strip_worker__matcol_return.writeAction(f"evi X2 X27 partial_strip_worker::fetch_ele2 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"bnei X17 3 __if_matcol_return_8_post") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_6_true: yield") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_8_post: sli X11 X29 3") 
  tranpartial_strip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  tranpartial_strip_worker__matcol_return.writeAction(f"evi X2 X27 partial_strip_worker::fetch_ele3 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"bnei X17 4 __if_matcol_return_11_post") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_9_true: yield") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_11_post: sli X12 X29 3") 
  tranpartial_strip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  tranpartial_strip_worker__matcol_return.writeAction(f"evi X2 X27 partial_strip_worker::fetch_ele4 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"bnei X17 5 __if_matcol_return_14_post") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_12_true: yield") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_14_post: sli X13 X29 3") 
  tranpartial_strip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  tranpartial_strip_worker__matcol_return.writeAction(f"evi X2 X27 partial_strip_worker::fetch_ele5 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"bnei X17 6 __if_matcol_return_17_post") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_15_true: yield") 
  tranpartial_strip_worker__matcol_return.writeAction(f"__if_matcol_return_17_post: sli X14 X29 3") 
  tranpartial_strip_worker__matcol_return.writeAction(f"add X29 X28 X29") 
  tranpartial_strip_worker__matcol_return.writeAction(f"evi X2 X27 partial_strip_worker::fetch_ele6 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"send_dmlm_ld X29 X27 1") 
  tranpartial_strip_worker__matcol_return.writeAction(f"yield") 
  
  # Writing code for event partial_strip_worker::fetch_ele0
  tranpartial_strip_worker__fetch_ele0 = efa.writeEvent('partial_strip_worker::fetch_ele0')
  tranpartial_strip_worker__fetch_ele0.writeAction(f"entry: fmadd.64 X19 X8 X26") 
  tranpartial_strip_worker__fetch_ele0.writeAction(f"subi X17 X17 1") 
  tranpartial_strip_worker__fetch_ele0.writeAction(f"bnei X17 0 __if_fetch_ele0_2_post") 
  tranpartial_strip_worker__fetch_ele0.writeAction(f"__if_fetch_ele0_0_true: sendr_wcont X16 X16 X26 X26") 
  tranpartial_strip_worker__fetch_ele0.writeAction(f"yield_terminate") 
  tranpartial_strip_worker__fetch_ele0.writeAction(f"__if_fetch_ele0_2_post: yield") 
  
  # Writing code for event partial_strip_worker::fetch_ele1
  tranpartial_strip_worker__fetch_ele1 = efa.writeEvent('partial_strip_worker::fetch_ele1')
  tranpartial_strip_worker__fetch_ele1.writeAction(f"entry: fmadd.64 X20 X8 X26") 
  tranpartial_strip_worker__fetch_ele1.writeAction(f"subi X17 X17 1") 
  tranpartial_strip_worker__fetch_ele1.writeAction(f"bnei X17 0 __if_fetch_ele1_2_post") 
  tranpartial_strip_worker__fetch_ele1.writeAction(f"__if_fetch_ele1_0_true: sendr_wcont X16 X16 X26 X26") 
  tranpartial_strip_worker__fetch_ele1.writeAction(f"yield_terminate") 
  tranpartial_strip_worker__fetch_ele1.writeAction(f"__if_fetch_ele1_2_post: yield") 
  
  # Writing code for event partial_strip_worker::fetch_ele2
  tranpartial_strip_worker__fetch_ele2 = efa.writeEvent('partial_strip_worker::fetch_ele2')
  tranpartial_strip_worker__fetch_ele2.writeAction(f"entry: fmadd.64 X21 X8 X26") 
  tranpartial_strip_worker__fetch_ele2.writeAction(f"subi X17 X17 1") 
  tranpartial_strip_worker__fetch_ele2.writeAction(f"bnei X17 0 __if_fetch_ele2_2_post") 
  tranpartial_strip_worker__fetch_ele2.writeAction(f"__if_fetch_ele2_0_true: sendr_wcont X16 X16 X26 X26") 
  tranpartial_strip_worker__fetch_ele2.writeAction(f"yield_terminate") 
  tranpartial_strip_worker__fetch_ele2.writeAction(f"__if_fetch_ele2_2_post: yield") 
  
  # Writing code for event partial_strip_worker::fetch_ele3
  tranpartial_strip_worker__fetch_ele3 = efa.writeEvent('partial_strip_worker::fetch_ele3')
  tranpartial_strip_worker__fetch_ele3.writeAction(f"entry: fmadd.64 X22 X8 X26") 
  tranpartial_strip_worker__fetch_ele3.writeAction(f"subi X17 X17 1") 
  tranpartial_strip_worker__fetch_ele3.writeAction(f"bnei X17 0 __if_fetch_ele3_2_post") 
  tranpartial_strip_worker__fetch_ele3.writeAction(f"__if_fetch_ele3_0_true: sendr_wcont X16 X16 X26 X26") 
  tranpartial_strip_worker__fetch_ele3.writeAction(f"yield_terminate") 
  tranpartial_strip_worker__fetch_ele3.writeAction(f"__if_fetch_ele3_2_post: yield") 
  
  # Writing code for event partial_strip_worker::fetch_ele4
  tranpartial_strip_worker__fetch_ele4 = efa.writeEvent('partial_strip_worker::fetch_ele4')
  tranpartial_strip_worker__fetch_ele4.writeAction(f"entry: fmadd.64 X23 X8 X26") 
  tranpartial_strip_worker__fetch_ele4.writeAction(f"subi X17 X17 1") 
  tranpartial_strip_worker__fetch_ele4.writeAction(f"bnei X17 0 __if_fetch_ele4_2_post") 
  tranpartial_strip_worker__fetch_ele4.writeAction(f"__if_fetch_ele4_0_true: sendr_wcont X16 X16 X26 X26") 
  tranpartial_strip_worker__fetch_ele4.writeAction(f"yield_terminate") 
  tranpartial_strip_worker__fetch_ele4.writeAction(f"__if_fetch_ele4_2_post: yield") 
  
  # Writing code for event partial_strip_worker::fetch_ele5
  tranpartial_strip_worker__fetch_ele5 = efa.writeEvent('partial_strip_worker::fetch_ele5')
  tranpartial_strip_worker__fetch_ele5.writeAction(f"entry: fmadd.64 X24 X8 X26") 
  tranpartial_strip_worker__fetch_ele5.writeAction(f"subi X17 X17 1") 
  tranpartial_strip_worker__fetch_ele5.writeAction(f"bnei X17 0 __if_fetch_ele5_2_post") 
  tranpartial_strip_worker__fetch_ele5.writeAction(f"__if_fetch_ele5_0_true: sendr_wcont X16 X16 X26 X26") 
  tranpartial_strip_worker__fetch_ele5.writeAction(f"yield_terminate") 
  tranpartial_strip_worker__fetch_ele5.writeAction(f"__if_fetch_ele5_2_post: yield") 
  
  # Writing code for event partial_strip_worker::fetch_ele6
  tranpartial_strip_worker__fetch_ele6 = efa.writeEvent('partial_strip_worker::fetch_ele6')
  tranpartial_strip_worker__fetch_ele6.writeAction(f"entry: fmadd.64 X25 X8 X26") 
  tranpartial_strip_worker__fetch_ele6.writeAction(f"subi X17 X17 1") 
  tranpartial_strip_worker__fetch_ele6.writeAction(f"bnei X17 0 __if_fetch_ele6_2_post") 
  tranpartial_strip_worker__fetch_ele6.writeAction(f"__if_fetch_ele6_0_true: sendr_wcont X16 X16 X26 X26") 
  tranpartial_strip_worker__fetch_ele6.writeAction(f"yield_terminate") 
  tranpartial_strip_worker__fetch_ele6.writeAction(f"__if_fetch_ele6_2_post: yield") 
  
