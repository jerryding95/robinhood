/* AUTOGENERATED FILE - DO NOT MODIFY */
#pragma once
#include <cstdint>
#include <string>
#include "encodings.hh"

namespace basim {

struct ArchState; // forward declaration
class Cycles; // forward declaration

/* send Instruction */
Cycles exeInstSend(ArchState& ast, EncInst inst);
std::string disasmInstSend(EncInst inst);
EncInst constrInstSend(RegId Xe, RegId Xc, RegId Xptr, uint64_t lenw, uint64_t mode);

/* sendb Instruction */
Cycles exeInstSendb(ArchState& ast, EncInst inst);
std::string disasmInstSendb(EncInst inst);
EncInst constrInstSendb(RegId Xe, RegId Xc, RegId Xptr, uint64_t lenw, uint64_t mode);

/* sendm Instruction */
Cycles exeInstSendm(ArchState& ast, EncInst inst);
std::string disasmInstSendm(EncInst inst);
EncInst constrInstSendm(RegId Xd, RegId Xc, RegId Xptr, uint64_t lenw, uint64_t mode);

/* sendmb Instruction */
Cycles exeInstSendmb(ArchState& ast, EncInst inst);
std::string disasmInstSendmb(EncInst inst);
EncInst constrInstSendmb(RegId Xd, RegId Xc, RegId Xptr, uint64_t lenw, uint64_t mode);

/* sendr Instruction */
Cycles exeInstSendr(ArchState& ast, EncInst inst);
std::string disasmInstSendr(EncInst inst);
EncInst constrInstSendr(RegId Xe, RegId Xc, RegId X1, RegId X2);

/* sendr3 Instruction */
Cycles exeInstSendr3(ArchState& ast, EncInst inst);
std::string disasmInstSendr3(EncInst inst);
EncInst constrInstSendr3(RegId Xe, RegId Xc, RegId X1, RegId X2, RegId X3);

/* sendmr Instruction */
Cycles exeInstSendmr(ArchState& ast, EncInst inst);
std::string disasmInstSendmr(EncInst inst);
EncInst constrInstSendmr(RegId Xd, RegId Xc, RegId X1);

/* sendmr2 Instruction */
Cycles exeInstSendmr2(ArchState& ast, EncInst inst);
std::string disasmInstSendmr2(EncInst inst);
EncInst constrInstSendmr2(RegId Xd, RegId Xc, RegId X1, RegId X2);

/* sendops Instruction */
Cycles exeInstSendops(ArchState& ast, EncInst inst);
std::string disasmInstSendops(EncInst inst);
EncInst constrInstSendops(RegId Xe, RegId Xc, RegId Xop, uint64_t lenw, uint64_t mode);

/* sendmops Instruction */
Cycles exeInstSendmops(ArchState& ast, EncInst inst);
std::string disasmInstSendmops(EncInst inst);
EncInst constrInstSendmops(RegId Xe, RegId Xd, RegId Xc, RegId Xop, uint64_t lenw, uint64_t mode);

/* instrans Instruction */
Cycles exeInstInstrans(ArchState& ast, EncInst inst);
std::string disasmInstInstrans(EncInst inst);
EncInst constrInstInstrans(RegId X1, RegId X4, RegId X2, RegId X3, uint64_t perm, uint64_t mode);

}; // namespace basim
/* AUTOGENERATED FILE - DO NOT MODIFY */
