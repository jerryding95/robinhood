/* AUTOGENERATED FILE - DO NOT MODIFY */
#pragma once
#include <cstdint>
#include <string>
#include "encodings.hh"

namespace basim {

struct ArchState; // forward declaration
class Cycles; // forward declaration

/* movil2 Instruction */
Cycles exeInstMovil2(ArchState& ast, EncInst inst);
std::string disasmInstMovil2(EncInst inst);
EncInst constrInstMovil2(RegId Xs, uint64_t imm);

/* movil1 Instruction */
Cycles exeInstMovil1(ArchState& ast, EncInst inst);
std::string disasmInstMovil1(EncInst inst);
EncInst constrInstMovil1(RegId Xs, uint64_t imm);

/* movbil Instruction */
Cycles exeInstMovbil(ArchState& ast, EncInst inst);
std::string disasmInstMovbil(EncInst inst);
EncInst constrInstMovbil(RegId Xs, uint64_t lenb, uint64_t bits);

/* movblr Instruction */
Cycles exeInstMovblr(ArchState& ast, EncInst inst);
std::string disasmInstMovblr(EncInst inst);
EncInst constrInstMovblr(RegId Xs, RegId Xd, uint64_t lenb);

/* bcpyll Instruction */
Cycles exeInstBcpyll(ArchState& ast, EncInst inst);
std::string disasmInstBcpyll(EncInst inst);
EncInst constrInstBcpyll(RegId Xs, RegId Xt, RegId Xd);

/* bcpylli Instruction */
Cycles exeInstBcpylli(ArchState& ast, EncInst inst);
std::string disasmInstBcpylli(EncInst inst);
EncInst constrInstBcpylli(RegId Xs, RegId Xd, uint64_t len);

/* movsbr Instruction */
Cycles exeInstMovsbr(ArchState& ast, EncInst inst);
std::string disasmInstMovsbr(EncInst inst);
EncInst constrInstMovsbr(RegId Xd);

/* movrr Instruction */
Cycles exeInstMovrr(ArchState& ast, EncInst inst);
std::string disasmInstMovrr(EncInst inst);
EncInst constrInstMovrr(RegId Xs, RegId Xd);

/* movir Instruction */
Cycles exeInstMovir(ArchState& ast, EncInst inst);
std::string disasmInstMovir(EncInst inst);
EncInst constrInstMovir(RegId Xd, int64_t imm);

/* movipr Instruction */
Cycles exeInstMovipr(ArchState& ast, EncInst inst);
std::string disasmInstMovipr(EncInst inst);
EncInst constrInstMovipr(RegId Xd);

/* movlsb Instruction */
Cycles exeInstMovlsb(ArchState& ast, EncInst inst);
std::string disasmInstMovlsb(EncInst inst);
EncInst constrInstMovlsb(RegId Xs);

/* movlr Instruction */
Cycles exeInstMovlr(ArchState& ast, EncInst inst);
std::string disasmInstMovlr(EncInst inst);
EncInst constrInstMovlr(int64_t imm, RegId Xs, RegId Xd, uint64_t inc, uint64_t lenb);

/* movrl Instruction */
Cycles exeInstMovrl(ArchState& ast, EncInst inst);
std::string disasmInstMovrl(EncInst inst);
EncInst constrInstMovrl(RegId Xs, int64_t imm, RegId Xd, uint64_t inc, uint64_t lenb);

/* movwlr Instruction */
Cycles exeInstMovwlr(ArchState& ast, EncInst inst);
std::string disasmInstMovwlr(EncInst inst);
EncInst constrInstMovwlr(RegId Xb, RegId Xs, uint64_t inc, uint64_t scale, RegId Xd);

/* movwrl Instruction */
Cycles exeInstMovwrl(ArchState& ast, EncInst inst);
std::string disasmInstMovwrl(EncInst inst);
EncInst constrInstMovwrl(RegId Xs, RegId Xb, RegId Xd, uint64_t inc, uint64_t scale);

/* bcpyoli Instruction */
Cycles exeInstBcpyoli(ArchState& ast, EncInst inst);
std::string disasmInstBcpyoli(EncInst inst);
EncInst constrInstBcpyoli(RegId Xop, RegId Xd, uint64_t lenw);

/* bcpyol Instruction */
Cycles exeInstBcpyol(ArchState& ast, EncInst inst);
std::string disasmInstBcpyol(EncInst inst);
EncInst constrInstBcpyol(RegId Xop, RegId Xd, RegId Xlenw);

}; // namespace basim
/* AUTOGENERATED FILE - DO NOT MODIFY */
