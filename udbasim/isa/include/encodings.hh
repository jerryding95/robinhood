/* AUTOGENERATED FILE - DO NOT MODIFY */
#pragma once
#include <cstdint>

namespace basim {

/* Register Encodings Enum */
enum class RegId : uint8_t {
  X0 = 0,
  X1 = 1,
  X2 = 2,
  X3 = 3,
  X4 = 4,
  X5 = 5,
  X6 = 6,
  X7 = 7,
  X8 = 8,
  X9 = 9,
  X10 = 10,
  X11 = 11,
  X12 = 12,
  X13 = 13,
  X14 = 14,
  X15 = 15,
  X16 = 16,
  X17 = 17,
  X18 = 18,
  X19 = 19,
  X20 = 20,
  X21 = 21,
  X22 = 22,
  X23 = 23,
  X24 = 24,
  X25 = 25,
  X26 = 26,
  X27 = 27,
  X28 = 28,
  X29 = 29,
  X30 = 30,
  X31 = 31,
  NWID = 0,
  CONT = 1,
  EQT = 2,
  FSCR = 4,
  STATE_PROPERTY = 6,
  LMBASE = 7,
  OB_0 = 8,
  OB_1 = 9,
  OB_2 = 10,
  OB_3 = 11,
  OB_4 = 12,
  OB_5 = 13,
  OB_6 = 14,
  OB_7 = 15,
  UDPR_0 = 16,
  UDPR_1 = 17,
  UDPR_2 = 18,
  UDPR_3 = 19,
  UDPR_4 = 20,
  UDPR_5 = 21,
  UDPR_6 = 22,
  UDPR_7 = 23,
  UDPR_8 = 24,
  UDPR_9 = 25,
  UDPR_10 = 26,
  UDPR_11 = 27,
  UDPR_12 = 28,
  UDPR_13 = 29,
  UDPR_14 = 30,
  UDPR_15 = 31,
};

inline const char *REG_NAMES[] = {
  "X0",
  "X1",
  "X2",
  "X3",
  "X4",
  "X5",
  "X6",
  "X7",
  "X8",
  "X9",
  "X10",
  "X11",
  "X12",
  "X13",
  "X14",
  "X15",
  "X16",
  "X17",
  "X18",
  "X19",
  "X20",
  "X21",
  "X22",
  "X23",
  "X24",
  "X25",
  "X26",
  "X27",
  "X28",
  "X29",
  "X30",
  "X31",
};

/* State Properties Enum */
enum class StateProperty : uint8_t {
  EVENT = 0,
  DEFAULT = 1,
  COMMON = 2,
  MAJORITY = 3,
  FLAG = 4,
  PERSIST = 5,
  FLAG_MAJORITY = 6,
  FLAG_DEFAULT = 7,
  REFILL = 8,
  EPSILON = 9,
  NUL = 10,
  BASIC = 11,
};

inline const char *STATE_PROPERTY_NAMES[] = {
  "EVENT",
  "DEFAULT",
  "COMMON",
  "MAJORITY",
  "FLAG",
  "PERSIST",
  "FLAG_MAJORITY",
  "FLAG_DEFAULT",
  "REFILL",
  "EPSILON",
  "NUL",
  "BASIC",
};

/* Transition Types Enum */
enum class TransitionType : uint8_t {
  EVENTCARRY = 0,
  EVENT = 1,
  REFILL = 2,
  MAJORITYCARRY = 3,
  DEFAULTCARRY = 4,
  FLAGCARRY = 5,
  COMMONCARRY = 6,
  EPSILONCARRY_WITH_ACTION = 7,
  FLAGMAJORITYCARRY = 8,
  FLAGDEFAULTCARRY = 9,
  BASIC_WITH_ACTION = 10,
  REFILL_WITH_ACTION = 11,
  FLAGCARRY_WITH_ACTION = 12,
  COMMONCARRY_WITH_ACTION = 13,
  BASIC = 14,
  EPSILONCARRY = 15,
};

inline const char *TRANSITION_TYPE_NAMES[] = {
  "eventCarry",
  "event",
  "refillCarry",
  "majorityCarry",
  "defaultCarry",
  "flagCarry",
  "commonCarry",
  "epsilonCarry_with_action",
  "flagmajorityCarry",
  "flagdefaultCarry",
  "basic_with_action",
  "refillCarry_with_action",
  "flagCarry_with_action",
  "commonCarry_with_action",
  "basic",
  "epsilonCarry",
};

/* Opcodes Enum */
enum class Opcode : uint8_t {
  // I-Type
  ADDI = 0x9,
  SUBI = 0xa,
  MULI = 0xb,
  DIVI = 0xc,
  MODI = 0x7c,
  CLTI = 0x3,
  CGTI = 0x4,
  CEQI = 0x5,
  ANDI = 0x6,
  ORI = 0x7,
  XORI = 0x7b,
  MOVIL2 = 0xe,
  MOVIL1 = 0xf,
  YIELD = 0x1,
  YIELDT = 0x2,
  LASTACT = 0x7d,
  SLI = 0x50,
  SRI = 0x51,
  SLORI = 0x52,
  SRORI = 0x53,
  SLANDI = 0x54,
  SRANDI = 0x55,
  SARI = 0x56,
  HASHSB32 = 0x57,
  HASHSB64 = 0x58,
  HASHL64 = 0x59,
  HASH = 0x5a,
  HASHL = 0x5b,
  BCPYLLI = 0x5c,
  MOVSBR = 0x5d,
  MOVIPR = 0x5e,
  MOVLSB = 0x5f,
  SIW = 0x79,
  REFILL = 0x7a,
  SSPROP = 0x78,
  // LI-Type
  EVLB = 0x42,
  MOVIR = 0x8,
  // P-Type
  PRINT = 0x7f,
  PERFLOG = 0x7f,
  // S-Type
  SLADDII = 0x22,
  SLSUBII = 0x23,
  SRADDII = 0x28,
  SRSUBII = 0x2f,
  SLORII = 0x25,
  SRORII = 0x26,
  SLANDII = 0x27,
  SRANDII = 0x29,
  MOVBIL = 0x2a,
  MOVBLR = 0x2b,
  FSTATE = 0x2c,
  CSWPI = 0x2d,
  MOVLR = 0x20,
  MOVRL = 0x21,
  SWIZ = 0x2e,
  BCPYOLI = 0x24,
  // R-Type
  ADD = 0x33,
  SUB = 0x33,
  MUL = 0x33,
  DIV = 0x33,
  MOD = 0x33,
  AND = 0x34,
  OR = 0x34,
  XOR = 0x34,
  CLT = 0x35,
  CGT = 0x35,
  CEQ = 0x35,
  CSTR = 0x35,
  SR = 0x36,
  SL = 0x36,
  SAR = 0x36,
  BCPYLL = 0x37,
  MOVRR = 0x38,
  MOVWLR = 0x31,
  MOVWRL = 0x32,
  BCPYOL = 0x30,
  FMADD_64 = 0x60,
  FADD_64 = 0x60,
  FSUB_64 = 0x60,
  FMUL_64 = 0x60,
  FDIV_64 = 0x60,
  FSQRT_64 = 0x60,
  FEXP_64 = 0x60,
  FMADD_32 = 0x60,
  FADD_32 = 0x60,
  FSUB_32 = 0x60,
  FMUL_32 = 0x60,
  FDIV_32 = 0x60,
  FSQRT_32 = 0x60,
  FEXP_32 = 0x60,
  FMADD_B16 = 0x60,
  FADD_B16 = 0x60,
  FSUB_B16 = 0x60,
  FMUL_B16 = 0x60,
  FDIV_B16 = 0x60,
  FSQRT_B16 = 0x60,
  FEXP_B16 = 0x60,
  FCNVT_64_I64 = 0x61,
  FCNVT_32_I32 = 0x61,
  FCNVT_I64_64 = 0x61,
  FCNVT_I32_32 = 0x61,
  FCNVT_64_32 = 0x61,
  FCNVT_64_B16 = 0x61,
  FCNVT_32_64 = 0x61,
  FCNVT_32_B16 = 0x61,
  FCNVT_B16_64 = 0x61,
  FCNVT_B16_32 = 0x61,
  VMADD_32 = 0x62,
  VADD_32 = 0x62,
  VSUB_32 = 0x62,
  VMUL_32 = 0x62,
  VDIV_32 = 0x62,
  VSQRT_32 = 0x62,
  VEXP_32 = 0x62,
  VMADD_B16 = 0x62,
  VADD_B16 = 0x62,
  VSUB_B16 = 0x62,
  VMUL_B16 = 0x62,
  VDIV_B16 = 0x62,
  VSQRT_B16 = 0x62,
  VEXP_B16 = 0x62,
  VMADD_I32 = 0x62,
  VADD_I32 = 0x62,
  VSUB_I32 = 0x62,
  VMUL_I32 = 0x62,
  VDIV_I32 = 0x62,
  VSQRT_I32 = 0x62,
  VEXP_I32 = 0x62,
  VGT_32 = 0x63,
  VGT_B16 = 0x63,
  VGT_I32 = 0x63,
  // B-Type
  BNE = 0x44,
  BEQ = 0x44,
  BGT = 0x44,
  BLE = 0x44,
  BNEU = 0x48,
  BEQU = 0x48,
  BGTU = 0x48,
  BLEU = 0x48,
  BNEI = 0x43,
  BEQI = 0x43,
  BGTI = 0x43,
  BLEI = 0x43,
  BLTI = 0x43,
  BGEI = 0x43,
  BNEIU = 0x45,
  BEQIU = 0x45,
  BGTIU = 0x45,
  BLEIU = 0x45,
  BLTIU = 0x45,
  BGEIU = 0x45,
  // J-Type
  JMP = 0x46,
  // M1-Type
  SEND = 0x10,
  SENDB = 0x15,
  // M2-Type
  SENDM = 0x11,
  SENDMB = 0x12,
  INSTRANS = 0x1a,
  // M3-Type
  SENDR = 0x13,
  SENDR3 = 0x17,
  SENDMR = 0x14,
  SENDMR2 = 0x19,
  // M4-Type
  SENDOPS = 0x16,
  SENDMOPS = 0x18,
  // E-Type
  EVI = 0x40,
  EVII = 0x41,
  // R4-Type
  EV = 0x70,
  CSWP = 0x71,
  // VF-Type
  VFILL_32 = 0x64,
  VFILL_I32 = 0x64,
  VFILL_B16 = 0x64,
};

/* Utils */
typedef uint32_t EncInst;

inline constexpr uint64_t extrUnsignedImm(EncInst inst, uint8_t shift, uint8_t nbits) { return static_cast<uint64_t>((inst >> shift) & ((EncInst(1) << nbits) - 1)); }
inline constexpr int64_t extrSignedImm(EncInst inst, uint8_t shift, uint8_t nbits) { return static_cast<int64_t>(int32_t(inst) << (32 - shift - nbits) >> (32 - nbits)); }
inline constexpr RegId extrReg5(EncInst inst, uint8_t shift) { return static_cast<RegId>(extrUnsignedImm(inst, shift, 5)); }
inline constexpr RegId extrReg4(EncInst inst, uint8_t shift) { return static_cast<RegId>(extrUnsignedImm(inst, shift, 4) + 16); }

inline constexpr void embdUnsignedImm(EncInst& inst, uint8_t shift, uint32_t mask, uint64_t imm) { inst = ((static_cast<EncInst>(imm) & static_cast<EncInst>(mask)) << shift) | (inst & ~(static_cast<EncInst>(mask) << shift)); }
inline constexpr void embdSignedImm(EncInst& inst, uint8_t shift, uint32_t mask, int64_t imm) { inst = ((static_cast<EncInst>(imm) & static_cast<EncInst>(mask)) << shift) | (inst & ~(static_cast<EncInst>(mask) << shift)); }
inline constexpr void embdReg5(EncInst& inst, uint8_t shift, RegId reg) { embdUnsignedImm(inst, shift, 0x1F, static_cast<uint64_t>(reg)); }
inline constexpr void embdReg4(EncInst& inst, uint8_t shift, RegId reg) { embdUnsignedImm(inst, shift, 0xF, static_cast<uint64_t>(reg) - 16); }

/* Instruction Opcode Bitfield */
const uint8_t BF_INST_OPCODE_SHIFT = 0;
const uint8_t BF_INST_OPCODE_NBITS = 7;
const uint32_t BF_INST_OPCODE_MASK = 0x7f;
const bool BF_INST_OPCODE_SIGNED = false;
inline constexpr Opcode extrInstOpcode(EncInst inst) { return static_cast<Opcode>(extrUnsignedImm(inst, BF_INST_OPCODE_SHIFT, BF_INST_OPCODE_NBITS)); }
inline constexpr void embdInstOpcode(EncInst& inst, Opcode opc) { embdUnsignedImm(inst, BF_INST_OPCODE_SHIFT, BF_INST_OPCODE_MASK, static_cast<uint64_t>(opc)); }

/* Transition Type Bitfield */
const uint8_t BF_TRNAS_TYPE_SHIFT = 8;
const uint8_t BF_TRNAS_TYPE_NBITS = 4;
const uint32_t BF_TRNAS_TYPE_MASK = 0xf;
const bool BF_TRNAS_TYPE_SIGNED = false;
inline constexpr TransitionType extrTransType(EncInst inst) { return static_cast<TransitionType>(extrUnsignedImm(inst, BF_TRNAS_TYPE_SHIFT, BF_TRNAS_TYPE_NBITS)); }
inline constexpr void embdTransType(EncInst& inst, TransitionType type) { embdUnsignedImm(inst, BF_TRNAS_TYPE_SHIFT, BF_TRNAS_TYPE_MASK, static_cast<uint64_t>(type)); }

/* I-Type Bitfields */
const uint8_t BF_ITYPE_XS_SHIFT = 7;
const uint8_t BF_ITYPE_XS_NBITS = 5;
const uint32_t BF_ITYPE_XS_MASK = 0x1f;
const bool BF_ITYPE_XS_SIGNED = false;
inline constexpr RegId extrInstItypeXs(EncInst inst) { return extrReg5(inst, BF_ITYPE_XS_SHIFT); }
inline constexpr void embdInstItypeXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_ITYPE_XS_SHIFT, reg); }

const uint8_t BF_ITYPE_XD_SHIFT = 12;
const uint8_t BF_ITYPE_XD_NBITS = 4;
const uint32_t BF_ITYPE_XD_MASK = 0xf;
const bool BF_ITYPE_XD_SIGNED = false;
inline constexpr RegId extrInstItypeXd(EncInst inst) { return extrReg4(inst, BF_ITYPE_XD_SHIFT); }
inline constexpr void embdInstItypeXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_ITYPE_XD_SHIFT, reg); }

const uint8_t BF_ITYPE_IMM16_SHIFT = 16;
const uint8_t BF_ITYPE_IMM16_NBITS = 16;
const uint32_t BF_ITYPE_IMM16_MASK = 0xffff;
const bool BF_ITYPE_IMM16_SIGNED = false;
inline constexpr uint64_t extrInstItypeImm16(EncInst inst) { return extrUnsignedImm(inst, BF_ITYPE_IMM16_SHIFT, BF_ITYPE_IMM16_NBITS); }
inline constexpr void embdInstItypeImm16(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_ITYPE_IMM16_SHIFT, BF_ITYPE_IMM16_MASK, imm); }

const uint8_t BF_ADDI_XS_SHIFT = 7;
const uint8_t BF_ADDI_XS_NBITS = 5;
const uint32_t BF_ADDI_XS_MASK = 0x1f;
const bool BF_ADDI_XS_SIGNED = false;
inline constexpr RegId extrInstAddiXs(EncInst inst) { return extrReg5(inst, BF_ADDI_XS_SHIFT); }
inline constexpr void embdInstAddiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_ADDI_XS_SHIFT, reg); }

const uint8_t BF_ADDI_XD_SHIFT = 12;
const uint8_t BF_ADDI_XD_NBITS = 4;
const uint32_t BF_ADDI_XD_MASK = 0xf;
const bool BF_ADDI_XD_SIGNED = false;
inline constexpr RegId extrInstAddiXd(EncInst inst) { return extrReg4(inst, BF_ADDI_XD_SHIFT); }
inline constexpr void embdInstAddiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_ADDI_XD_SHIFT, reg); }

const uint8_t BF_ADDI_IMM_SHIFT = 16;
const uint8_t BF_ADDI_IMM_NBITS = 16;
const uint32_t BF_ADDI_IMM_MASK = 0xffff;
const bool BF_ADDI_IMM_SIGNED = true;
inline constexpr int64_t extrInstAddiImm(EncInst inst) { return extrSignedImm(inst, BF_ADDI_IMM_SHIFT, BF_ADDI_IMM_NBITS); }
inline constexpr void embdInstAddiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_ADDI_IMM_SHIFT, BF_ADDI_IMM_MASK, imm); }

const uint8_t BF_SUBI_XS_SHIFT = 7;
const uint8_t BF_SUBI_XS_NBITS = 5;
const uint32_t BF_SUBI_XS_MASK = 0x1f;
const bool BF_SUBI_XS_SIGNED = false;
inline constexpr RegId extrInstSubiXs(EncInst inst) { return extrReg5(inst, BF_SUBI_XS_SHIFT); }
inline constexpr void embdInstSubiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SUBI_XS_SHIFT, reg); }

const uint8_t BF_SUBI_XD_SHIFT = 12;
const uint8_t BF_SUBI_XD_NBITS = 4;
const uint32_t BF_SUBI_XD_MASK = 0xf;
const bool BF_SUBI_XD_SIGNED = false;
inline constexpr RegId extrInstSubiXd(EncInst inst) { return extrReg4(inst, BF_SUBI_XD_SHIFT); }
inline constexpr void embdInstSubiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SUBI_XD_SHIFT, reg); }

const uint8_t BF_SUBI_IMM_SHIFT = 16;
const uint8_t BF_SUBI_IMM_NBITS = 16;
const uint32_t BF_SUBI_IMM_MASK = 0xffff;
const bool BF_SUBI_IMM_SIGNED = true;
inline constexpr int64_t extrInstSubiImm(EncInst inst) { return extrSignedImm(inst, BF_SUBI_IMM_SHIFT, BF_SUBI_IMM_NBITS); }
inline constexpr void embdInstSubiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_SUBI_IMM_SHIFT, BF_SUBI_IMM_MASK, imm); }

const uint8_t BF_MULI_XS_SHIFT = 7;
const uint8_t BF_MULI_XS_NBITS = 5;
const uint32_t BF_MULI_XS_MASK = 0x1f;
const bool BF_MULI_XS_SIGNED = false;
inline constexpr RegId extrInstMuliXs(EncInst inst) { return extrReg5(inst, BF_MULI_XS_SHIFT); }
inline constexpr void embdInstMuliXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MULI_XS_SHIFT, reg); }

const uint8_t BF_MULI_XD_SHIFT = 12;
const uint8_t BF_MULI_XD_NBITS = 4;
const uint32_t BF_MULI_XD_MASK = 0xf;
const bool BF_MULI_XD_SIGNED = false;
inline constexpr RegId extrInstMuliXd(EncInst inst) { return extrReg4(inst, BF_MULI_XD_SHIFT); }
inline constexpr void embdInstMuliXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_MULI_XD_SHIFT, reg); }

const uint8_t BF_MULI_IMM_SHIFT = 16;
const uint8_t BF_MULI_IMM_NBITS = 16;
const uint32_t BF_MULI_IMM_MASK = 0xffff;
const bool BF_MULI_IMM_SIGNED = true;
inline constexpr int64_t extrInstMuliImm(EncInst inst) { return extrSignedImm(inst, BF_MULI_IMM_SHIFT, BF_MULI_IMM_NBITS); }
inline constexpr void embdInstMuliImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_MULI_IMM_SHIFT, BF_MULI_IMM_MASK, imm); }

const uint8_t BF_DIVI_XS_SHIFT = 7;
const uint8_t BF_DIVI_XS_NBITS = 5;
const uint32_t BF_DIVI_XS_MASK = 0x1f;
const bool BF_DIVI_XS_SIGNED = false;
inline constexpr RegId extrInstDiviXs(EncInst inst) { return extrReg5(inst, BF_DIVI_XS_SHIFT); }
inline constexpr void embdInstDiviXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_DIVI_XS_SHIFT, reg); }

const uint8_t BF_DIVI_XD_SHIFT = 12;
const uint8_t BF_DIVI_XD_NBITS = 4;
const uint32_t BF_DIVI_XD_MASK = 0xf;
const bool BF_DIVI_XD_SIGNED = false;
inline constexpr RegId extrInstDiviXd(EncInst inst) { return extrReg4(inst, BF_DIVI_XD_SHIFT); }
inline constexpr void embdInstDiviXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_DIVI_XD_SHIFT, reg); }

const uint8_t BF_DIVI_IMM_SHIFT = 16;
const uint8_t BF_DIVI_IMM_NBITS = 16;
const uint32_t BF_DIVI_IMM_MASK = 0xffff;
const bool BF_DIVI_IMM_SIGNED = true;
inline constexpr int64_t extrInstDiviImm(EncInst inst) { return extrSignedImm(inst, BF_DIVI_IMM_SHIFT, BF_DIVI_IMM_NBITS); }
inline constexpr void embdInstDiviImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_DIVI_IMM_SHIFT, BF_DIVI_IMM_MASK, imm); }

const uint8_t BF_MODI_XS_SHIFT = 7;
const uint8_t BF_MODI_XS_NBITS = 5;
const uint32_t BF_MODI_XS_MASK = 0x1f;
const bool BF_MODI_XS_SIGNED = false;
inline constexpr RegId extrInstModiXs(EncInst inst) { return extrReg5(inst, BF_MODI_XS_SHIFT); }
inline constexpr void embdInstModiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MODI_XS_SHIFT, reg); }

const uint8_t BF_MODI_XD_SHIFT = 12;
const uint8_t BF_MODI_XD_NBITS = 4;
const uint32_t BF_MODI_XD_MASK = 0xf;
const bool BF_MODI_XD_SIGNED = false;
inline constexpr RegId extrInstModiXd(EncInst inst) { return extrReg4(inst, BF_MODI_XD_SHIFT); }
inline constexpr void embdInstModiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_MODI_XD_SHIFT, reg); }

const uint8_t BF_MODI_IMM_SHIFT = 16;
const uint8_t BF_MODI_IMM_NBITS = 16;
const uint32_t BF_MODI_IMM_MASK = 0xffff;
const bool BF_MODI_IMM_SIGNED = true;
inline constexpr int64_t extrInstModiImm(EncInst inst) { return extrSignedImm(inst, BF_MODI_IMM_SHIFT, BF_MODI_IMM_NBITS); }
inline constexpr void embdInstModiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_MODI_IMM_SHIFT, BF_MODI_IMM_MASK, imm); }

const uint8_t BF_CLTI_XS_SHIFT = 7;
const uint8_t BF_CLTI_XS_NBITS = 5;
const uint32_t BF_CLTI_XS_MASK = 0x1f;
const bool BF_CLTI_XS_SIGNED = false;
inline constexpr RegId extrInstCltiXs(EncInst inst) { return extrReg5(inst, BF_CLTI_XS_SHIFT); }
inline constexpr void embdInstCltiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_CLTI_XS_SHIFT, reg); }

const uint8_t BF_CLTI_XD_SHIFT = 12;
const uint8_t BF_CLTI_XD_NBITS = 4;
const uint32_t BF_CLTI_XD_MASK = 0xf;
const bool BF_CLTI_XD_SIGNED = false;
inline constexpr RegId extrInstCltiXd(EncInst inst) { return extrReg4(inst, BF_CLTI_XD_SHIFT); }
inline constexpr void embdInstCltiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_CLTI_XD_SHIFT, reg); }

const uint8_t BF_CLTI_IMM_SHIFT = 16;
const uint8_t BF_CLTI_IMM_NBITS = 16;
const uint32_t BF_CLTI_IMM_MASK = 0xffff;
const bool BF_CLTI_IMM_SIGNED = true;
inline constexpr int64_t extrInstCltiImm(EncInst inst) { return extrSignedImm(inst, BF_CLTI_IMM_SHIFT, BF_CLTI_IMM_NBITS); }
inline constexpr void embdInstCltiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_CLTI_IMM_SHIFT, BF_CLTI_IMM_MASK, imm); }

const uint8_t BF_CGTI_XS_SHIFT = 7;
const uint8_t BF_CGTI_XS_NBITS = 5;
const uint32_t BF_CGTI_XS_MASK = 0x1f;
const bool BF_CGTI_XS_SIGNED = false;
inline constexpr RegId extrInstCgtiXs(EncInst inst) { return extrReg5(inst, BF_CGTI_XS_SHIFT); }
inline constexpr void embdInstCgtiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_CGTI_XS_SHIFT, reg); }

const uint8_t BF_CGTI_XD_SHIFT = 12;
const uint8_t BF_CGTI_XD_NBITS = 4;
const uint32_t BF_CGTI_XD_MASK = 0xf;
const bool BF_CGTI_XD_SIGNED = false;
inline constexpr RegId extrInstCgtiXd(EncInst inst) { return extrReg4(inst, BF_CGTI_XD_SHIFT); }
inline constexpr void embdInstCgtiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_CGTI_XD_SHIFT, reg); }

const uint8_t BF_CGTI_IMM_SHIFT = 16;
const uint8_t BF_CGTI_IMM_NBITS = 16;
const uint32_t BF_CGTI_IMM_MASK = 0xffff;
const bool BF_CGTI_IMM_SIGNED = true;
inline constexpr int64_t extrInstCgtiImm(EncInst inst) { return extrSignedImm(inst, BF_CGTI_IMM_SHIFT, BF_CGTI_IMM_NBITS); }
inline constexpr void embdInstCgtiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_CGTI_IMM_SHIFT, BF_CGTI_IMM_MASK, imm); }

const uint8_t BF_CEQI_XS_SHIFT = 7;
const uint8_t BF_CEQI_XS_NBITS = 5;
const uint32_t BF_CEQI_XS_MASK = 0x1f;
const bool BF_CEQI_XS_SIGNED = false;
inline constexpr RegId extrInstCeqiXs(EncInst inst) { return extrReg5(inst, BF_CEQI_XS_SHIFT); }
inline constexpr void embdInstCeqiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_CEQI_XS_SHIFT, reg); }

const uint8_t BF_CEQI_XD_SHIFT = 12;
const uint8_t BF_CEQI_XD_NBITS = 4;
const uint32_t BF_CEQI_XD_MASK = 0xf;
const bool BF_CEQI_XD_SIGNED = false;
inline constexpr RegId extrInstCeqiXd(EncInst inst) { return extrReg4(inst, BF_CEQI_XD_SHIFT); }
inline constexpr void embdInstCeqiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_CEQI_XD_SHIFT, reg); }

const uint8_t BF_CEQI_IMM_SHIFT = 16;
const uint8_t BF_CEQI_IMM_NBITS = 16;
const uint32_t BF_CEQI_IMM_MASK = 0xffff;
const bool BF_CEQI_IMM_SIGNED = true;
inline constexpr int64_t extrInstCeqiImm(EncInst inst) { return extrSignedImm(inst, BF_CEQI_IMM_SHIFT, BF_CEQI_IMM_NBITS); }
inline constexpr void embdInstCeqiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_CEQI_IMM_SHIFT, BF_CEQI_IMM_MASK, imm); }

const uint8_t BF_ANDI_XS_SHIFT = 7;
const uint8_t BF_ANDI_XS_NBITS = 5;
const uint32_t BF_ANDI_XS_MASK = 0x1f;
const bool BF_ANDI_XS_SIGNED = false;
inline constexpr RegId extrInstAndiXs(EncInst inst) { return extrReg5(inst, BF_ANDI_XS_SHIFT); }
inline constexpr void embdInstAndiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_ANDI_XS_SHIFT, reg); }

const uint8_t BF_ANDI_XD_SHIFT = 12;
const uint8_t BF_ANDI_XD_NBITS = 4;
const uint32_t BF_ANDI_XD_MASK = 0xf;
const bool BF_ANDI_XD_SIGNED = false;
inline constexpr RegId extrInstAndiXd(EncInst inst) { return extrReg4(inst, BF_ANDI_XD_SHIFT); }
inline constexpr void embdInstAndiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_ANDI_XD_SHIFT, reg); }

const uint8_t BF_ANDI_IMM_SHIFT = 16;
const uint8_t BF_ANDI_IMM_NBITS = 16;
const uint32_t BF_ANDI_IMM_MASK = 0xffff;
const bool BF_ANDI_IMM_SIGNED = false;
inline constexpr uint64_t extrInstAndiImm(EncInst inst) { return extrUnsignedImm(inst, BF_ANDI_IMM_SHIFT, BF_ANDI_IMM_NBITS); }
inline constexpr void embdInstAndiImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_ANDI_IMM_SHIFT, BF_ANDI_IMM_MASK, imm); }

const uint8_t BF_ORI_XS_SHIFT = 7;
const uint8_t BF_ORI_XS_NBITS = 5;
const uint32_t BF_ORI_XS_MASK = 0x1f;
const bool BF_ORI_XS_SIGNED = false;
inline constexpr RegId extrInstOriXs(EncInst inst) { return extrReg5(inst, BF_ORI_XS_SHIFT); }
inline constexpr void embdInstOriXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_ORI_XS_SHIFT, reg); }

const uint8_t BF_ORI_XD_SHIFT = 12;
const uint8_t BF_ORI_XD_NBITS = 4;
const uint32_t BF_ORI_XD_MASK = 0xf;
const bool BF_ORI_XD_SIGNED = false;
inline constexpr RegId extrInstOriXd(EncInst inst) { return extrReg4(inst, BF_ORI_XD_SHIFT); }
inline constexpr void embdInstOriXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_ORI_XD_SHIFT, reg); }

const uint8_t BF_ORI_IMM_SHIFT = 16;
const uint8_t BF_ORI_IMM_NBITS = 16;
const uint32_t BF_ORI_IMM_MASK = 0xffff;
const bool BF_ORI_IMM_SIGNED = false;
inline constexpr uint64_t extrInstOriImm(EncInst inst) { return extrUnsignedImm(inst, BF_ORI_IMM_SHIFT, BF_ORI_IMM_NBITS); }
inline constexpr void embdInstOriImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_ORI_IMM_SHIFT, BF_ORI_IMM_MASK, imm); }

const uint8_t BF_XORI_XS_SHIFT = 7;
const uint8_t BF_XORI_XS_NBITS = 5;
const uint32_t BF_XORI_XS_MASK = 0x1f;
const bool BF_XORI_XS_SIGNED = false;
inline constexpr RegId extrInstXoriXs(EncInst inst) { return extrReg5(inst, BF_XORI_XS_SHIFT); }
inline constexpr void embdInstXoriXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_XORI_XS_SHIFT, reg); }

const uint8_t BF_XORI_XD_SHIFT = 12;
const uint8_t BF_XORI_XD_NBITS = 4;
const uint32_t BF_XORI_XD_MASK = 0xf;
const bool BF_XORI_XD_SIGNED = false;
inline constexpr RegId extrInstXoriXd(EncInst inst) { return extrReg4(inst, BF_XORI_XD_SHIFT); }
inline constexpr void embdInstXoriXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_XORI_XD_SHIFT, reg); }

const uint8_t BF_XORI_IMM_SHIFT = 16;
const uint8_t BF_XORI_IMM_NBITS = 16;
const uint32_t BF_XORI_IMM_MASK = 0xffff;
const bool BF_XORI_IMM_SIGNED = false;
inline constexpr uint64_t extrInstXoriImm(EncInst inst) { return extrUnsignedImm(inst, BF_XORI_IMM_SHIFT, BF_XORI_IMM_NBITS); }
inline constexpr void embdInstXoriImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_XORI_IMM_SHIFT, BF_XORI_IMM_MASK, imm); }

const uint8_t BF_MOVIL2_XS_SHIFT = 7;
const uint8_t BF_MOVIL2_XS_NBITS = 5;
const uint32_t BF_MOVIL2_XS_MASK = 0x1f;
const bool BF_MOVIL2_XS_SIGNED = false;
inline constexpr RegId extrInstMovil2Xs(EncInst inst) { return extrReg5(inst, BF_MOVIL2_XS_SHIFT); }
inline constexpr void embdInstMovil2Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVIL2_XS_SHIFT, reg); }

const uint8_t BF_MOVIL2_IMM_SHIFT = 16;
const uint8_t BF_MOVIL2_IMM_NBITS = 16;
const uint32_t BF_MOVIL2_IMM_MASK = 0xffff;
const bool BF_MOVIL2_IMM_SIGNED = false;
inline constexpr uint64_t extrInstMovil2Imm(EncInst inst) { return extrUnsignedImm(inst, BF_MOVIL2_IMM_SHIFT, BF_MOVIL2_IMM_NBITS); }
inline constexpr void embdInstMovil2Imm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVIL2_IMM_SHIFT, BF_MOVIL2_IMM_MASK, imm); }

const uint8_t BF_MOVIL1_XS_SHIFT = 7;
const uint8_t BF_MOVIL1_XS_NBITS = 5;
const uint32_t BF_MOVIL1_XS_MASK = 0x1f;
const bool BF_MOVIL1_XS_SIGNED = false;
inline constexpr RegId extrInstMovil1Xs(EncInst inst) { return extrReg5(inst, BF_MOVIL1_XS_SHIFT); }
inline constexpr void embdInstMovil1Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVIL1_XS_SHIFT, reg); }

const uint8_t BF_MOVIL1_IMM_SHIFT = 16;
const uint8_t BF_MOVIL1_IMM_NBITS = 8;
const uint32_t BF_MOVIL1_IMM_MASK = 0xff;
const bool BF_MOVIL1_IMM_SIGNED = false;
inline constexpr uint64_t extrInstMovil1Imm(EncInst inst) { return extrUnsignedImm(inst, BF_MOVIL1_IMM_SHIFT, BF_MOVIL1_IMM_NBITS); }
inline constexpr void embdInstMovil1Imm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVIL1_IMM_SHIFT, BF_MOVIL1_IMM_MASK, imm); }

const uint8_t BF_SLI_XS_SHIFT = 7;
const uint8_t BF_SLI_XS_NBITS = 5;
const uint32_t BF_SLI_XS_MASK = 0x1f;
const bool BF_SLI_XS_SIGNED = false;
inline constexpr RegId extrInstSliXs(EncInst inst) { return extrReg5(inst, BF_SLI_XS_SHIFT); }
inline constexpr void embdInstSliXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SLI_XS_SHIFT, reg); }

const uint8_t BF_SLI_XD_SHIFT = 12;
const uint8_t BF_SLI_XD_NBITS = 4;
const uint32_t BF_SLI_XD_MASK = 0xf;
const bool BF_SLI_XD_SIGNED = false;
inline constexpr RegId extrInstSliXd(EncInst inst) { return extrReg4(inst, BF_SLI_XD_SHIFT); }
inline constexpr void embdInstSliXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SLI_XD_SHIFT, reg); }

const uint8_t BF_SLI_SHIFT_SHIFT = 16;
const uint8_t BF_SLI_SHIFT_NBITS = 6;
const uint32_t BF_SLI_SHIFT_MASK = 0x3f;
const bool BF_SLI_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSliShift(EncInst inst) { return extrUnsignedImm(inst, BF_SLI_SHIFT_SHIFT, BF_SLI_SHIFT_NBITS); }
inline constexpr void embdInstSliShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SLI_SHIFT_SHIFT, BF_SLI_SHIFT_MASK, imm); }

const uint8_t BF_SRI_XS_SHIFT = 7;
const uint8_t BF_SRI_XS_NBITS = 5;
const uint32_t BF_SRI_XS_MASK = 0x1f;
const bool BF_SRI_XS_SIGNED = false;
inline constexpr RegId extrInstSriXs(EncInst inst) { return extrReg5(inst, BF_SRI_XS_SHIFT); }
inline constexpr void embdInstSriXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SRI_XS_SHIFT, reg); }

const uint8_t BF_SRI_XD_SHIFT = 12;
const uint8_t BF_SRI_XD_NBITS = 4;
const uint32_t BF_SRI_XD_MASK = 0xf;
const bool BF_SRI_XD_SIGNED = false;
inline constexpr RegId extrInstSriXd(EncInst inst) { return extrReg4(inst, BF_SRI_XD_SHIFT); }
inline constexpr void embdInstSriXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SRI_XD_SHIFT, reg); }

const uint8_t BF_SRI_SHIFT_SHIFT = 16;
const uint8_t BF_SRI_SHIFT_NBITS = 6;
const uint32_t BF_SRI_SHIFT_MASK = 0x3f;
const bool BF_SRI_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSriShift(EncInst inst) { return extrUnsignedImm(inst, BF_SRI_SHIFT_SHIFT, BF_SRI_SHIFT_NBITS); }
inline constexpr void embdInstSriShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SRI_SHIFT_SHIFT, BF_SRI_SHIFT_MASK, imm); }

const uint8_t BF_SLORI_XS_SHIFT = 7;
const uint8_t BF_SLORI_XS_NBITS = 5;
const uint32_t BF_SLORI_XS_MASK = 0x1f;
const bool BF_SLORI_XS_SIGNED = false;
inline constexpr RegId extrInstSloriXs(EncInst inst) { return extrReg5(inst, BF_SLORI_XS_SHIFT); }
inline constexpr void embdInstSloriXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SLORI_XS_SHIFT, reg); }

const uint8_t BF_SLORI_XD_SHIFT = 12;
const uint8_t BF_SLORI_XD_NBITS = 4;
const uint32_t BF_SLORI_XD_MASK = 0xf;
const bool BF_SLORI_XD_SIGNED = false;
inline constexpr RegId extrInstSloriXd(EncInst inst) { return extrReg4(inst, BF_SLORI_XD_SHIFT); }
inline constexpr void embdInstSloriXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SLORI_XD_SHIFT, reg); }

const uint8_t BF_SLORI_SHIFT_SHIFT = 16;
const uint8_t BF_SLORI_SHIFT_NBITS = 6;
const uint32_t BF_SLORI_SHIFT_MASK = 0x3f;
const bool BF_SLORI_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSloriShift(EncInst inst) { return extrUnsignedImm(inst, BF_SLORI_SHIFT_SHIFT, BF_SLORI_SHIFT_NBITS); }
inline constexpr void embdInstSloriShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SLORI_SHIFT_SHIFT, BF_SLORI_SHIFT_MASK, imm); }

const uint8_t BF_SRORI_XS_SHIFT = 7;
const uint8_t BF_SRORI_XS_NBITS = 5;
const uint32_t BF_SRORI_XS_MASK = 0x1f;
const bool BF_SRORI_XS_SIGNED = false;
inline constexpr RegId extrInstSroriXs(EncInst inst) { return extrReg5(inst, BF_SRORI_XS_SHIFT); }
inline constexpr void embdInstSroriXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SRORI_XS_SHIFT, reg); }

const uint8_t BF_SRORI_XD_SHIFT = 12;
const uint8_t BF_SRORI_XD_NBITS = 4;
const uint32_t BF_SRORI_XD_MASK = 0xf;
const bool BF_SRORI_XD_SIGNED = false;
inline constexpr RegId extrInstSroriXd(EncInst inst) { return extrReg4(inst, BF_SRORI_XD_SHIFT); }
inline constexpr void embdInstSroriXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SRORI_XD_SHIFT, reg); }

const uint8_t BF_SRORI_SHIFT_SHIFT = 16;
const uint8_t BF_SRORI_SHIFT_NBITS = 6;
const uint32_t BF_SRORI_SHIFT_MASK = 0x3f;
const bool BF_SRORI_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSroriShift(EncInst inst) { return extrUnsignedImm(inst, BF_SRORI_SHIFT_SHIFT, BF_SRORI_SHIFT_NBITS); }
inline constexpr void embdInstSroriShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SRORI_SHIFT_SHIFT, BF_SRORI_SHIFT_MASK, imm); }

const uint8_t BF_SLANDI_XS_SHIFT = 7;
const uint8_t BF_SLANDI_XS_NBITS = 5;
const uint32_t BF_SLANDI_XS_MASK = 0x1f;
const bool BF_SLANDI_XS_SIGNED = false;
inline constexpr RegId extrInstSlandiXs(EncInst inst) { return extrReg5(inst, BF_SLANDI_XS_SHIFT); }
inline constexpr void embdInstSlandiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SLANDI_XS_SHIFT, reg); }

const uint8_t BF_SLANDI_XD_SHIFT = 12;
const uint8_t BF_SLANDI_XD_NBITS = 4;
const uint32_t BF_SLANDI_XD_MASK = 0xf;
const bool BF_SLANDI_XD_SIGNED = false;
inline constexpr RegId extrInstSlandiXd(EncInst inst) { return extrReg4(inst, BF_SLANDI_XD_SHIFT); }
inline constexpr void embdInstSlandiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SLANDI_XD_SHIFT, reg); }

const uint8_t BF_SLANDI_SHIFT_SHIFT = 16;
const uint8_t BF_SLANDI_SHIFT_NBITS = 6;
const uint32_t BF_SLANDI_SHIFT_MASK = 0x3f;
const bool BF_SLANDI_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSlandiShift(EncInst inst) { return extrUnsignedImm(inst, BF_SLANDI_SHIFT_SHIFT, BF_SLANDI_SHIFT_NBITS); }
inline constexpr void embdInstSlandiShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SLANDI_SHIFT_SHIFT, BF_SLANDI_SHIFT_MASK, imm); }

const uint8_t BF_SRANDI_XS_SHIFT = 7;
const uint8_t BF_SRANDI_XS_NBITS = 5;
const uint32_t BF_SRANDI_XS_MASK = 0x1f;
const bool BF_SRANDI_XS_SIGNED = false;
inline constexpr RegId extrInstSrandiXs(EncInst inst) { return extrReg5(inst, BF_SRANDI_XS_SHIFT); }
inline constexpr void embdInstSrandiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SRANDI_XS_SHIFT, reg); }

const uint8_t BF_SRANDI_XD_SHIFT = 12;
const uint8_t BF_SRANDI_XD_NBITS = 4;
const uint32_t BF_SRANDI_XD_MASK = 0xf;
const bool BF_SRANDI_XD_SIGNED = false;
inline constexpr RegId extrInstSrandiXd(EncInst inst) { return extrReg4(inst, BF_SRANDI_XD_SHIFT); }
inline constexpr void embdInstSrandiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SRANDI_XD_SHIFT, reg); }

const uint8_t BF_SRANDI_SHIFT_SHIFT = 16;
const uint8_t BF_SRANDI_SHIFT_NBITS = 6;
const uint32_t BF_SRANDI_SHIFT_MASK = 0x3f;
const bool BF_SRANDI_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSrandiShift(EncInst inst) { return extrUnsignedImm(inst, BF_SRANDI_SHIFT_SHIFT, BF_SRANDI_SHIFT_NBITS); }
inline constexpr void embdInstSrandiShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SRANDI_SHIFT_SHIFT, BF_SRANDI_SHIFT_MASK, imm); }

const uint8_t BF_SARI_XS_SHIFT = 7;
const uint8_t BF_SARI_XS_NBITS = 5;
const uint32_t BF_SARI_XS_MASK = 0x1f;
const bool BF_SARI_XS_SIGNED = false;
inline constexpr RegId extrInstSariXs(EncInst inst) { return extrReg5(inst, BF_SARI_XS_SHIFT); }
inline constexpr void embdInstSariXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SARI_XS_SHIFT, reg); }

const uint8_t BF_SARI_XD_SHIFT = 12;
const uint8_t BF_SARI_XD_NBITS = 4;
const uint32_t BF_SARI_XD_MASK = 0xf;
const bool BF_SARI_XD_SIGNED = false;
inline constexpr RegId extrInstSariXd(EncInst inst) { return extrReg4(inst, BF_SARI_XD_SHIFT); }
inline constexpr void embdInstSariXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SARI_XD_SHIFT, reg); }

const uint8_t BF_SARI_SHIFT_SHIFT = 16;
const uint8_t BF_SARI_SHIFT_NBITS = 6;
const uint32_t BF_SARI_SHIFT_MASK = 0x3f;
const bool BF_SARI_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSariShift(EncInst inst) { return extrUnsignedImm(inst, BF_SARI_SHIFT_SHIFT, BF_SARI_SHIFT_NBITS); }
inline constexpr void embdInstSariShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SARI_SHIFT_SHIFT, BF_SARI_SHIFT_MASK, imm); }

const uint8_t BF_HASHSB32_XD_SHIFT = 12;
const uint8_t BF_HASHSB32_XD_NBITS = 4;
const uint32_t BF_HASHSB32_XD_MASK = 0xf;
const bool BF_HASHSB32_XD_SIGNED = false;
inline constexpr RegId extrInstHashsb32Xd(EncInst inst) { return extrReg4(inst, BF_HASHSB32_XD_SHIFT); }
inline constexpr void embdInstHashsb32Xd(EncInst& inst, RegId reg) { embdReg4(inst, BF_HASHSB32_XD_SHIFT, reg); }

const uint8_t BF_HASHSB32_HTBASE_SHIFT = 16;
const uint8_t BF_HASHSB32_HTBASE_NBITS = 16;
const uint32_t BF_HASHSB32_HTBASE_MASK = 0xffff;
const bool BF_HASHSB32_HTBASE_SIGNED = false;
inline constexpr uint64_t extrInstHashsb32Htbase(EncInst inst) { return extrUnsignedImm(inst, BF_HASHSB32_HTBASE_SHIFT, BF_HASHSB32_HTBASE_NBITS); }
inline constexpr void embdInstHashsb32Htbase(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_HASHSB32_HTBASE_SHIFT, BF_HASHSB32_HTBASE_MASK, imm); }

const uint8_t BF_HASHSB64_XS_SHIFT = 7;
const uint8_t BF_HASHSB64_XS_NBITS = 5;
const uint32_t BF_HASHSB64_XS_MASK = 0x1f;
const bool BF_HASHSB64_XS_SIGNED = false;
inline constexpr RegId extrInstHashsb64Xs(EncInst inst) { return extrReg5(inst, BF_HASHSB64_XS_SHIFT); }
inline constexpr void embdInstHashsb64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_HASHSB64_XS_SHIFT, reg); }

const uint8_t BF_HASHSB64_XD_SHIFT = 12;
const uint8_t BF_HASHSB64_XD_NBITS = 4;
const uint32_t BF_HASHSB64_XD_MASK = 0xf;
const bool BF_HASHSB64_XD_SIGNED = false;
inline constexpr RegId extrInstHashsb64Xd(EncInst inst) { return extrReg4(inst, BF_HASHSB64_XD_SHIFT); }
inline constexpr void embdInstHashsb64Xd(EncInst& inst, RegId reg) { embdReg4(inst, BF_HASHSB64_XD_SHIFT, reg); }

const uint8_t BF_HASHL64_XS_SHIFT = 7;
const uint8_t BF_HASHL64_XS_NBITS = 5;
const uint32_t BF_HASHL64_XS_MASK = 0x1f;
const bool BF_HASHL64_XS_SIGNED = false;
inline constexpr RegId extrInstHashl64Xs(EncInst inst) { return extrReg5(inst, BF_HASHL64_XS_SHIFT); }
inline constexpr void embdInstHashl64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_HASHL64_XS_SHIFT, reg); }

const uint8_t BF_HASHL64_XD_SHIFT = 12;
const uint8_t BF_HASHL64_XD_NBITS = 4;
const uint32_t BF_HASHL64_XD_MASK = 0xf;
const bool BF_HASHL64_XD_SIGNED = false;
inline constexpr RegId extrInstHashl64Xd(EncInst inst) { return extrReg4(inst, BF_HASHL64_XD_SHIFT); }
inline constexpr void embdInstHashl64Xd(EncInst& inst, RegId reg) { embdReg4(inst, BF_HASHL64_XD_SHIFT, reg); }

const uint8_t BF_HASH_XE_SHIFT = 7;
const uint8_t BF_HASH_XE_NBITS = 5;
const uint32_t BF_HASH_XE_MASK = 0x1f;
const bool BF_HASH_XE_SIGNED = false;
inline constexpr RegId extrInstHashXe(EncInst inst) { return extrReg5(inst, BF_HASH_XE_SHIFT); }
inline constexpr void embdInstHashXe(EncInst& inst, RegId reg) { embdReg5(inst, BF_HASH_XE_SHIFT, reg); }

const uint8_t BF_HASH_XD_SHIFT = 12;
const uint8_t BF_HASH_XD_NBITS = 4;
const uint32_t BF_HASH_XD_MASK = 0xf;
const bool BF_HASH_XD_SIGNED = false;
inline constexpr RegId extrInstHashXd(EncInst inst) { return extrReg4(inst, BF_HASH_XD_SHIFT); }
inline constexpr void embdInstHashXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_HASH_XD_SHIFT, reg); }

const uint8_t BF_HASHL_XE_SHIFT = 7;
const uint8_t BF_HASHL_XE_NBITS = 5;
const uint32_t BF_HASHL_XE_MASK = 0x1f;
const bool BF_HASHL_XE_SIGNED = false;
inline constexpr RegId extrInstHashlXe(EncInst inst) { return extrReg5(inst, BF_HASHL_XE_SHIFT); }
inline constexpr void embdInstHashlXe(EncInst& inst, RegId reg) { embdReg5(inst, BF_HASHL_XE_SHIFT, reg); }

const uint8_t BF_HASHL_XD_SHIFT = 12;
const uint8_t BF_HASHL_XD_NBITS = 4;
const uint32_t BF_HASHL_XD_MASK = 0xf;
const bool BF_HASHL_XD_SIGNED = false;
inline constexpr RegId extrInstHashlXd(EncInst inst) { return extrReg4(inst, BF_HASHL_XD_SHIFT); }
inline constexpr void embdInstHashlXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_HASHL_XD_SHIFT, reg); }

const uint8_t BF_HASHL_LENW_SHIFT = 16;
const uint8_t BF_HASHL_LENW_NBITS = 3;
const uint32_t BF_HASHL_LENW_MASK = 0x7;
const bool BF_HASHL_LENW_SIGNED = false;
inline constexpr uint64_t extrInstHashlLenw(EncInst inst) { return extrUnsignedImm(inst, BF_HASHL_LENW_SHIFT, BF_HASHL_LENW_NBITS); }
inline constexpr void embdInstHashlLenw(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_HASHL_LENW_SHIFT, BF_HASHL_LENW_MASK, imm); }

const uint8_t BF_BCPYLLI_XS_SHIFT = 7;
const uint8_t BF_BCPYLLI_XS_NBITS = 5;
const uint32_t BF_BCPYLLI_XS_MASK = 0x1f;
const bool BF_BCPYLLI_XS_SIGNED = false;
inline constexpr RegId extrInstBcpylliXs(EncInst inst) { return extrReg5(inst, BF_BCPYLLI_XS_SHIFT); }
inline constexpr void embdInstBcpylliXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_BCPYLLI_XS_SHIFT, reg); }

const uint8_t BF_BCPYLLI_XD_SHIFT = 12;
const uint8_t BF_BCPYLLI_XD_NBITS = 4;
const uint32_t BF_BCPYLLI_XD_MASK = 0xf;
const bool BF_BCPYLLI_XD_SIGNED = false;
inline constexpr RegId extrInstBcpylliXd(EncInst inst) { return extrReg4(inst, BF_BCPYLLI_XD_SHIFT); }
inline constexpr void embdInstBcpylliXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_BCPYLLI_XD_SHIFT, reg); }

const uint8_t BF_BCPYLLI_LEN_SHIFT = 16;
const uint8_t BF_BCPYLLI_LEN_NBITS = 16;
const uint32_t BF_BCPYLLI_LEN_MASK = 0xffff;
const bool BF_BCPYLLI_LEN_SIGNED = false;
inline constexpr uint64_t extrInstBcpylliLen(EncInst inst) { return extrUnsignedImm(inst, BF_BCPYLLI_LEN_SHIFT, BF_BCPYLLI_LEN_NBITS); }
inline constexpr void embdInstBcpylliLen(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BCPYLLI_LEN_SHIFT, BF_BCPYLLI_LEN_MASK, imm); }

const uint8_t BF_MOVSBR_XD_SHIFT = 12;
const uint8_t BF_MOVSBR_XD_NBITS = 4;
const uint32_t BF_MOVSBR_XD_MASK = 0xf;
const bool BF_MOVSBR_XD_SIGNED = false;
inline constexpr RegId extrInstMovsbrXd(EncInst inst) { return extrReg4(inst, BF_MOVSBR_XD_SHIFT); }
inline constexpr void embdInstMovsbrXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_MOVSBR_XD_SHIFT, reg); }

const uint8_t BF_MOVIPR_XD_SHIFT = 12;
const uint8_t BF_MOVIPR_XD_NBITS = 4;
const uint32_t BF_MOVIPR_XD_MASK = 0xf;
const bool BF_MOVIPR_XD_SIGNED = false;
inline constexpr RegId extrInstMoviprXd(EncInst inst) { return extrReg4(inst, BF_MOVIPR_XD_SHIFT); }
inline constexpr void embdInstMoviprXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_MOVIPR_XD_SHIFT, reg); }

const uint8_t BF_MOVLSB_XS_SHIFT = 7;
const uint8_t BF_MOVLSB_XS_NBITS = 5;
const uint32_t BF_MOVLSB_XS_MASK = 0x1f;
const bool BF_MOVLSB_XS_SIGNED = false;
inline constexpr RegId extrInstMovlsbXs(EncInst inst) { return extrReg5(inst, BF_MOVLSB_XS_SHIFT); }
inline constexpr void embdInstMovlsbXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVLSB_XS_SHIFT, reg); }

const uint8_t BF_SIW_WIDTH_SHIFT = 16;
const uint8_t BF_SIW_WIDTH_NBITS = 4;
const uint32_t BF_SIW_WIDTH_MASK = 0xf;
const bool BF_SIW_WIDTH_SIGNED = false;
inline constexpr uint64_t extrInstSiwWidth(EncInst inst) { return extrUnsignedImm(inst, BF_SIW_WIDTH_SHIFT, BF_SIW_WIDTH_NBITS); }
inline constexpr void embdInstSiwWidth(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SIW_WIDTH_SHIFT, BF_SIW_WIDTH_MASK, imm); }

const uint8_t BF_REFILL_IMM_SHIFT = 16;
const uint8_t BF_REFILL_IMM_NBITS = 16;
const uint32_t BF_REFILL_IMM_MASK = 0xffff;
const bool BF_REFILL_IMM_SIGNED = false;
inline constexpr uint64_t extrInstRefillImm(EncInst inst) { return extrUnsignedImm(inst, BF_REFILL_IMM_SHIFT, BF_REFILL_IMM_NBITS); }
inline constexpr void embdInstRefillImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_REFILL_IMM_SHIFT, BF_REFILL_IMM_MASK, imm); }

const uint8_t BF_SSPROP_TYPE_SHIFT = 16;
const uint8_t BF_SSPROP_TYPE_NBITS = 4;
const uint32_t BF_SSPROP_TYPE_MASK = 0xf;
const bool BF_SSPROP_TYPE_SIGNED = false;
inline constexpr uint64_t extrInstSspropType(EncInst inst) { return extrUnsignedImm(inst, BF_SSPROP_TYPE_SHIFT, BF_SSPROP_TYPE_NBITS); }
inline constexpr void embdInstSspropType(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SSPROP_TYPE_SHIFT, BF_SSPROP_TYPE_MASK, imm); }

const uint8_t BF_SSPROP_VALUE_SHIFT = 20;
const uint8_t BF_SSPROP_VALUE_NBITS = 12;
const uint32_t BF_SSPROP_VALUE_MASK = 0xfff;
const bool BF_SSPROP_VALUE_SIGNED = false;
inline constexpr uint64_t extrInstSspropValue(EncInst inst) { return extrUnsignedImm(inst, BF_SSPROP_VALUE_SHIFT, BF_SSPROP_VALUE_NBITS); }
inline constexpr void embdInstSspropValue(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SSPROP_VALUE_SHIFT, BF_SSPROP_VALUE_MASK, imm); }

/* LI-Type Bitfields */
const uint8_t BF_LITYPE_XD_SHIFT = 7;
const uint8_t BF_LITYPE_XD_NBITS = 4;
const uint32_t BF_LITYPE_XD_MASK = 0xf;
const bool BF_LITYPE_XD_SIGNED = false;
inline constexpr RegId extrInstLitypeXd(EncInst inst) { return extrReg4(inst, BF_LITYPE_XD_SHIFT); }
inline constexpr void embdInstLitypeXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_LITYPE_XD_SHIFT, reg); }

const uint8_t BF_LITYPE_IMM_SHIFT = 11;
const uint8_t BF_LITYPE_IMM_NBITS = 21;
const uint32_t BF_LITYPE_IMM_MASK = 0x1fffff;
const bool BF_LITYPE_IMM_SIGNED = false;
inline constexpr uint64_t extrInstLitypeImm(EncInst inst) { return extrUnsignedImm(inst, BF_LITYPE_IMM_SHIFT, BF_LITYPE_IMM_NBITS); }
inline constexpr void embdInstLitypeImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_LITYPE_IMM_SHIFT, BF_LITYPE_IMM_MASK, imm); }

const uint8_t BF_MOVIR_XD_SHIFT = 7;
const uint8_t BF_MOVIR_XD_NBITS = 4;
const uint32_t BF_MOVIR_XD_MASK = 0xf;
const bool BF_MOVIR_XD_SIGNED = false;
inline constexpr RegId extrInstMovirXd(EncInst inst) { return extrReg4(inst, BF_MOVIR_XD_SHIFT); }
inline constexpr void embdInstMovirXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_MOVIR_XD_SHIFT, reg); }

const uint8_t BF_MOVIR_IMM_SHIFT = 11;
const uint8_t BF_MOVIR_IMM_NBITS = 21;
const uint32_t BF_MOVIR_IMM_MASK = 0x1fffff;
const bool BF_MOVIR_IMM_SIGNED = true;
inline constexpr int64_t extrInstMovirImm(EncInst inst) { return extrSignedImm(inst, BF_MOVIR_IMM_SHIFT, BF_MOVIR_IMM_NBITS); }
inline constexpr void embdInstMovirImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_MOVIR_IMM_SHIFT, BF_MOVIR_IMM_MASK, imm); }

const uint8_t BF_EVLB_XD_SHIFT = 7;
const uint8_t BF_EVLB_XD_NBITS = 4;
const uint32_t BF_EVLB_XD_MASK = 0xf;
const bool BF_EVLB_XD_SIGNED = false;
inline constexpr RegId extrInstEvlbXd(EncInst inst) { return extrReg4(inst, BF_EVLB_XD_SHIFT); }
inline constexpr void embdInstEvlbXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_EVLB_XD_SHIFT, reg); }

const uint8_t BF_EVLB_LABEL_SHIFT = 11;
const uint8_t BF_EVLB_LABEL_NBITS = 21;
const uint32_t BF_EVLB_LABEL_MASK = 0x1fffff;
const bool BF_EVLB_LABEL_SIGNED = false;
inline constexpr uint64_t extrInstEvlbLabel(EncInst inst) { return extrUnsignedImm(inst, BF_EVLB_LABEL_SHIFT, BF_EVLB_LABEL_NBITS); }
inline constexpr void embdInstEvlbLabel(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_EVLB_LABEL_SHIFT, BF_EVLB_LABEL_MASK, imm); }

/* P-Type Bitfields */
const uint8_t BF_PTYPE_FUNC_SHIFT = 26;
const uint8_t BF_PTYPE_FUNC_NBITS = 3;
const uint32_t BF_PTYPE_FUNC_MASK = 0x7;
const bool BF_PTYPE_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstPtypeFunc(EncInst inst) { return extrUnsignedImm(inst, BF_PTYPE_FUNC_SHIFT, BF_PTYPE_FUNC_NBITS); }
inline constexpr void embdInstPtypeFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_PTYPE_FUNC_SHIFT, BF_PTYPE_FUNC_MASK, imm); }

const uint8_t BF_PRINT_OFFSET_SHIFT = 7;
const uint8_t BF_PRINT_OFFSET_NBITS = 19;
const uint32_t BF_PRINT_OFFSET_MASK = 0x7ffff;
const bool BF_PRINT_OFFSET_SIGNED = false;
inline constexpr uint64_t extrInstPrintOffset(EncInst inst) { return extrUnsignedImm(inst, BF_PRINT_OFFSET_SHIFT, BF_PRINT_OFFSET_NBITS); }
inline constexpr void embdInstPrintOffset(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_PRINT_OFFSET_SHIFT, BF_PRINT_OFFSET_MASK, imm); }

const uint8_t BF_PRINT_FUNC_SHIFT = 26;
const uint8_t BF_PRINT_FUNC_NBITS = 3;
const uint32_t BF_PRINT_FUNC_MASK = 0x7;
const bool BF_PRINT_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstPrintFunc(EncInst inst) { return extrUnsignedImm(inst, BF_PRINT_FUNC_SHIFT, BF_PRINT_FUNC_NBITS); }
inline constexpr void embdInstPrintFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_PRINT_FUNC_SHIFT, BF_PRINT_FUNC_MASK, imm); }

const uint8_t BF_PERFLOG_OFFSET_SHIFT = 7;
const uint8_t BF_PERFLOG_OFFSET_NBITS = 19;
const uint32_t BF_PERFLOG_OFFSET_MASK = 0x7ffff;
const bool BF_PERFLOG_OFFSET_SIGNED = false;
inline constexpr uint64_t extrInstPerflogOffset(EncInst inst) { return extrUnsignedImm(inst, BF_PERFLOG_OFFSET_SHIFT, BF_PERFLOG_OFFSET_NBITS); }
inline constexpr void embdInstPerflogOffset(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_PERFLOG_OFFSET_SHIFT, BF_PERFLOG_OFFSET_MASK, imm); }

const uint8_t BF_PERFLOG_FUNC_SHIFT = 26;
const uint8_t BF_PERFLOG_FUNC_NBITS = 3;
const uint32_t BF_PERFLOG_FUNC_MASK = 0x7;
const bool BF_PERFLOG_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstPerflogFunc(EncInst inst) { return extrUnsignedImm(inst, BF_PERFLOG_FUNC_SHIFT, BF_PERFLOG_FUNC_NBITS); }
inline constexpr void embdInstPerflogFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_PERFLOG_FUNC_SHIFT, BF_PERFLOG_FUNC_MASK, imm); }

/* S-Type Bitfields */
const uint8_t BF_STYPE_XS_SHIFT = 7;
const uint8_t BF_STYPE_XS_NBITS = 5;
const uint32_t BF_STYPE_XS_MASK = 0x1f;
const bool BF_STYPE_XS_SIGNED = false;
inline constexpr RegId extrInstStypeXs(EncInst inst) { return extrReg5(inst, BF_STYPE_XS_SHIFT); }
inline constexpr void embdInstStypeXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_STYPE_XS_SHIFT, reg); }

const uint8_t BF_STYPE_XD_SHIFT = 12;
const uint8_t BF_STYPE_XD_NBITS = 4;
const uint32_t BF_STYPE_XD_MASK = 0xf;
const bool BF_STYPE_XD_SIGNED = false;
inline constexpr RegId extrInstStypeXd(EncInst inst) { return extrReg4(inst, BF_STYPE_XD_SHIFT); }
inline constexpr void embdInstStypeXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_STYPE_XD_SHIFT, reg); }

const uint8_t BF_STYPE_IMM4_SHIFT = 16;
const uint8_t BF_STYPE_IMM4_NBITS = 4;
const uint32_t BF_STYPE_IMM4_MASK = 0xf;
const bool BF_STYPE_IMM4_SIGNED = false;
inline constexpr uint64_t extrInstStypeImm4(EncInst inst) { return extrUnsignedImm(inst, BF_STYPE_IMM4_SHIFT, BF_STYPE_IMM4_NBITS); }
inline constexpr void embdInstStypeImm4(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_STYPE_IMM4_SHIFT, BF_STYPE_IMM4_MASK, imm); }

const uint8_t BF_STYPE_IMM12_SHIFT = 20;
const uint8_t BF_STYPE_IMM12_NBITS = 12;
const uint32_t BF_STYPE_IMM12_MASK = 0xfff;
const bool BF_STYPE_IMM12_SIGNED = false;
inline constexpr uint64_t extrInstStypeImm12(EncInst inst) { return extrUnsignedImm(inst, BF_STYPE_IMM12_SHIFT, BF_STYPE_IMM12_NBITS); }
inline constexpr void embdInstStypeImm12(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_STYPE_IMM12_SHIFT, BF_STYPE_IMM12_MASK, imm); }

const uint8_t BF_SLADDII_XS_SHIFT = 7;
const uint8_t BF_SLADDII_XS_NBITS = 5;
const uint32_t BF_SLADDII_XS_MASK = 0x1f;
const bool BF_SLADDII_XS_SIGNED = false;
inline constexpr RegId extrInstSladdiiXs(EncInst inst) { return extrReg5(inst, BF_SLADDII_XS_SHIFT); }
inline constexpr void embdInstSladdiiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SLADDII_XS_SHIFT, reg); }

const uint8_t BF_SLADDII_XD_SHIFT = 12;
const uint8_t BF_SLADDII_XD_NBITS = 4;
const uint32_t BF_SLADDII_XD_MASK = 0xf;
const bool BF_SLADDII_XD_SIGNED = false;
inline constexpr RegId extrInstSladdiiXd(EncInst inst) { return extrReg4(inst, BF_SLADDII_XD_SHIFT); }
inline constexpr void embdInstSladdiiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SLADDII_XD_SHIFT, reg); }

const uint8_t BF_SLADDII_SHIFT_SHIFT = 16;
const uint8_t BF_SLADDII_SHIFT_NBITS = 4;
const uint32_t BF_SLADDII_SHIFT_MASK = 0xf;
const bool BF_SLADDII_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSladdiiShift(EncInst inst) { return extrUnsignedImm(inst, BF_SLADDII_SHIFT_SHIFT, BF_SLADDII_SHIFT_NBITS); }
inline constexpr void embdInstSladdiiShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SLADDII_SHIFT_SHIFT, BF_SLADDII_SHIFT_MASK, imm); }

const uint8_t BF_SLADDII_IMM_SHIFT = 20;
const uint8_t BF_SLADDII_IMM_NBITS = 12;
const uint32_t BF_SLADDII_IMM_MASK = 0xfff;
const bool BF_SLADDII_IMM_SIGNED = false;
inline constexpr uint64_t extrInstSladdiiImm(EncInst inst) { return extrUnsignedImm(inst, BF_SLADDII_IMM_SHIFT, BF_SLADDII_IMM_NBITS); }
inline constexpr void embdInstSladdiiImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SLADDII_IMM_SHIFT, BF_SLADDII_IMM_MASK, imm); }

const uint8_t BF_SLSUBII_XS_SHIFT = 7;
const uint8_t BF_SLSUBII_XS_NBITS = 5;
const uint32_t BF_SLSUBII_XS_MASK = 0x1f;
const bool BF_SLSUBII_XS_SIGNED = false;
inline constexpr RegId extrInstSlsubiiXs(EncInst inst) { return extrReg5(inst, BF_SLSUBII_XS_SHIFT); }
inline constexpr void embdInstSlsubiiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SLSUBII_XS_SHIFT, reg); }

const uint8_t BF_SLSUBII_XD_SHIFT = 12;
const uint8_t BF_SLSUBII_XD_NBITS = 4;
const uint32_t BF_SLSUBII_XD_MASK = 0xf;
const bool BF_SLSUBII_XD_SIGNED = false;
inline constexpr RegId extrInstSlsubiiXd(EncInst inst) { return extrReg4(inst, BF_SLSUBII_XD_SHIFT); }
inline constexpr void embdInstSlsubiiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SLSUBII_XD_SHIFT, reg); }

const uint8_t BF_SLSUBII_SHIFT_SHIFT = 16;
const uint8_t BF_SLSUBII_SHIFT_NBITS = 4;
const uint32_t BF_SLSUBII_SHIFT_MASK = 0xf;
const bool BF_SLSUBII_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSlsubiiShift(EncInst inst) { return extrUnsignedImm(inst, BF_SLSUBII_SHIFT_SHIFT, BF_SLSUBII_SHIFT_NBITS); }
inline constexpr void embdInstSlsubiiShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SLSUBII_SHIFT_SHIFT, BF_SLSUBII_SHIFT_MASK, imm); }

const uint8_t BF_SLSUBII_IMM_SHIFT = 20;
const uint8_t BF_SLSUBII_IMM_NBITS = 12;
const uint32_t BF_SLSUBII_IMM_MASK = 0xfff;
const bool BF_SLSUBII_IMM_SIGNED = false;
inline constexpr uint64_t extrInstSlsubiiImm(EncInst inst) { return extrUnsignedImm(inst, BF_SLSUBII_IMM_SHIFT, BF_SLSUBII_IMM_NBITS); }
inline constexpr void embdInstSlsubiiImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SLSUBII_IMM_SHIFT, BF_SLSUBII_IMM_MASK, imm); }

const uint8_t BF_SRADDII_XS_SHIFT = 7;
const uint8_t BF_SRADDII_XS_NBITS = 5;
const uint32_t BF_SRADDII_XS_MASK = 0x1f;
const bool BF_SRADDII_XS_SIGNED = false;
inline constexpr RegId extrInstSraddiiXs(EncInst inst) { return extrReg5(inst, BF_SRADDII_XS_SHIFT); }
inline constexpr void embdInstSraddiiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SRADDII_XS_SHIFT, reg); }

const uint8_t BF_SRADDII_XD_SHIFT = 12;
const uint8_t BF_SRADDII_XD_NBITS = 4;
const uint32_t BF_SRADDII_XD_MASK = 0xf;
const bool BF_SRADDII_XD_SIGNED = false;
inline constexpr RegId extrInstSraddiiXd(EncInst inst) { return extrReg4(inst, BF_SRADDII_XD_SHIFT); }
inline constexpr void embdInstSraddiiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SRADDII_XD_SHIFT, reg); }

const uint8_t BF_SRADDII_SHIFT_SHIFT = 16;
const uint8_t BF_SRADDII_SHIFT_NBITS = 4;
const uint32_t BF_SRADDII_SHIFT_MASK = 0xf;
const bool BF_SRADDII_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSraddiiShift(EncInst inst) { return extrUnsignedImm(inst, BF_SRADDII_SHIFT_SHIFT, BF_SRADDII_SHIFT_NBITS); }
inline constexpr void embdInstSraddiiShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SRADDII_SHIFT_SHIFT, BF_SRADDII_SHIFT_MASK, imm); }

const uint8_t BF_SRADDII_IMM_SHIFT = 20;
const uint8_t BF_SRADDII_IMM_NBITS = 12;
const uint32_t BF_SRADDII_IMM_MASK = 0xfff;
const bool BF_SRADDII_IMM_SIGNED = false;
inline constexpr uint64_t extrInstSraddiiImm(EncInst inst) { return extrUnsignedImm(inst, BF_SRADDII_IMM_SHIFT, BF_SRADDII_IMM_NBITS); }
inline constexpr void embdInstSraddiiImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SRADDII_IMM_SHIFT, BF_SRADDII_IMM_MASK, imm); }

const uint8_t BF_SRSUBII_XS_SHIFT = 7;
const uint8_t BF_SRSUBII_XS_NBITS = 5;
const uint32_t BF_SRSUBII_XS_MASK = 0x1f;
const bool BF_SRSUBII_XS_SIGNED = false;
inline constexpr RegId extrInstSrsubiiXs(EncInst inst) { return extrReg5(inst, BF_SRSUBII_XS_SHIFT); }
inline constexpr void embdInstSrsubiiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SRSUBII_XS_SHIFT, reg); }

const uint8_t BF_SRSUBII_XD_SHIFT = 12;
const uint8_t BF_SRSUBII_XD_NBITS = 4;
const uint32_t BF_SRSUBII_XD_MASK = 0xf;
const bool BF_SRSUBII_XD_SIGNED = false;
inline constexpr RegId extrInstSrsubiiXd(EncInst inst) { return extrReg4(inst, BF_SRSUBII_XD_SHIFT); }
inline constexpr void embdInstSrsubiiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SRSUBII_XD_SHIFT, reg); }

const uint8_t BF_SRSUBII_SHIFT_SHIFT = 16;
const uint8_t BF_SRSUBII_SHIFT_NBITS = 4;
const uint32_t BF_SRSUBII_SHIFT_MASK = 0xf;
const bool BF_SRSUBII_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSrsubiiShift(EncInst inst) { return extrUnsignedImm(inst, BF_SRSUBII_SHIFT_SHIFT, BF_SRSUBII_SHIFT_NBITS); }
inline constexpr void embdInstSrsubiiShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SRSUBII_SHIFT_SHIFT, BF_SRSUBII_SHIFT_MASK, imm); }

const uint8_t BF_SRSUBII_IMM_SHIFT = 20;
const uint8_t BF_SRSUBII_IMM_NBITS = 12;
const uint32_t BF_SRSUBII_IMM_MASK = 0xfff;
const bool BF_SRSUBII_IMM_SIGNED = false;
inline constexpr uint64_t extrInstSrsubiiImm(EncInst inst) { return extrUnsignedImm(inst, BF_SRSUBII_IMM_SHIFT, BF_SRSUBII_IMM_NBITS); }
inline constexpr void embdInstSrsubiiImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SRSUBII_IMM_SHIFT, BF_SRSUBII_IMM_MASK, imm); }

const uint8_t BF_SLORII_XS_SHIFT = 7;
const uint8_t BF_SLORII_XS_NBITS = 5;
const uint32_t BF_SLORII_XS_MASK = 0x1f;
const bool BF_SLORII_XS_SIGNED = false;
inline constexpr RegId extrInstSloriiXs(EncInst inst) { return extrReg5(inst, BF_SLORII_XS_SHIFT); }
inline constexpr void embdInstSloriiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SLORII_XS_SHIFT, reg); }

const uint8_t BF_SLORII_XD_SHIFT = 12;
const uint8_t BF_SLORII_XD_NBITS = 4;
const uint32_t BF_SLORII_XD_MASK = 0xf;
const bool BF_SLORII_XD_SIGNED = false;
inline constexpr RegId extrInstSloriiXd(EncInst inst) { return extrReg4(inst, BF_SLORII_XD_SHIFT); }
inline constexpr void embdInstSloriiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SLORII_XD_SHIFT, reg); }

const uint8_t BF_SLORII_SHIFT_SHIFT = 16;
const uint8_t BF_SLORII_SHIFT_NBITS = 4;
const uint32_t BF_SLORII_SHIFT_MASK = 0xf;
const bool BF_SLORII_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSloriiShift(EncInst inst) { return extrUnsignedImm(inst, BF_SLORII_SHIFT_SHIFT, BF_SLORII_SHIFT_NBITS); }
inline constexpr void embdInstSloriiShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SLORII_SHIFT_SHIFT, BF_SLORII_SHIFT_MASK, imm); }

const uint8_t BF_SLORII_IMM_SHIFT = 20;
const uint8_t BF_SLORII_IMM_NBITS = 12;
const uint32_t BF_SLORII_IMM_MASK = 0xfff;
const bool BF_SLORII_IMM_SIGNED = false;
inline constexpr uint64_t extrInstSloriiImm(EncInst inst) { return extrUnsignedImm(inst, BF_SLORII_IMM_SHIFT, BF_SLORII_IMM_NBITS); }
inline constexpr void embdInstSloriiImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SLORII_IMM_SHIFT, BF_SLORII_IMM_MASK, imm); }

const uint8_t BF_SRORII_XS_SHIFT = 7;
const uint8_t BF_SRORII_XS_NBITS = 5;
const uint32_t BF_SRORII_XS_MASK = 0x1f;
const bool BF_SRORII_XS_SIGNED = false;
inline constexpr RegId extrInstSroriiXs(EncInst inst) { return extrReg5(inst, BF_SRORII_XS_SHIFT); }
inline constexpr void embdInstSroriiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SRORII_XS_SHIFT, reg); }

const uint8_t BF_SRORII_XD_SHIFT = 12;
const uint8_t BF_SRORII_XD_NBITS = 4;
const uint32_t BF_SRORII_XD_MASK = 0xf;
const bool BF_SRORII_XD_SIGNED = false;
inline constexpr RegId extrInstSroriiXd(EncInst inst) { return extrReg4(inst, BF_SRORII_XD_SHIFT); }
inline constexpr void embdInstSroriiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SRORII_XD_SHIFT, reg); }

const uint8_t BF_SRORII_SHIFT_SHIFT = 16;
const uint8_t BF_SRORII_SHIFT_NBITS = 4;
const uint32_t BF_SRORII_SHIFT_MASK = 0xf;
const bool BF_SRORII_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSroriiShift(EncInst inst) { return extrUnsignedImm(inst, BF_SRORII_SHIFT_SHIFT, BF_SRORII_SHIFT_NBITS); }
inline constexpr void embdInstSroriiShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SRORII_SHIFT_SHIFT, BF_SRORII_SHIFT_MASK, imm); }

const uint8_t BF_SRORII_IMM_SHIFT = 20;
const uint8_t BF_SRORII_IMM_NBITS = 12;
const uint32_t BF_SRORII_IMM_MASK = 0xfff;
const bool BF_SRORII_IMM_SIGNED = false;
inline constexpr uint64_t extrInstSroriiImm(EncInst inst) { return extrUnsignedImm(inst, BF_SRORII_IMM_SHIFT, BF_SRORII_IMM_NBITS); }
inline constexpr void embdInstSroriiImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SRORII_IMM_SHIFT, BF_SRORII_IMM_MASK, imm); }

const uint8_t BF_SLANDII_XS_SHIFT = 7;
const uint8_t BF_SLANDII_XS_NBITS = 5;
const uint32_t BF_SLANDII_XS_MASK = 0x1f;
const bool BF_SLANDII_XS_SIGNED = false;
inline constexpr RegId extrInstSlandiiXs(EncInst inst) { return extrReg5(inst, BF_SLANDII_XS_SHIFT); }
inline constexpr void embdInstSlandiiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SLANDII_XS_SHIFT, reg); }

const uint8_t BF_SLANDII_XD_SHIFT = 12;
const uint8_t BF_SLANDII_XD_NBITS = 4;
const uint32_t BF_SLANDII_XD_MASK = 0xf;
const bool BF_SLANDII_XD_SIGNED = false;
inline constexpr RegId extrInstSlandiiXd(EncInst inst) { return extrReg4(inst, BF_SLANDII_XD_SHIFT); }
inline constexpr void embdInstSlandiiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SLANDII_XD_SHIFT, reg); }

const uint8_t BF_SLANDII_SHIFT_SHIFT = 16;
const uint8_t BF_SLANDII_SHIFT_NBITS = 4;
const uint32_t BF_SLANDII_SHIFT_MASK = 0xf;
const bool BF_SLANDII_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSlandiiShift(EncInst inst) { return extrUnsignedImm(inst, BF_SLANDII_SHIFT_SHIFT, BF_SLANDII_SHIFT_NBITS); }
inline constexpr void embdInstSlandiiShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SLANDII_SHIFT_SHIFT, BF_SLANDII_SHIFT_MASK, imm); }

const uint8_t BF_SLANDII_IMM_SHIFT = 20;
const uint8_t BF_SLANDII_IMM_NBITS = 12;
const uint32_t BF_SLANDII_IMM_MASK = 0xfff;
const bool BF_SLANDII_IMM_SIGNED = false;
inline constexpr uint64_t extrInstSlandiiImm(EncInst inst) { return extrUnsignedImm(inst, BF_SLANDII_IMM_SHIFT, BF_SLANDII_IMM_NBITS); }
inline constexpr void embdInstSlandiiImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SLANDII_IMM_SHIFT, BF_SLANDII_IMM_MASK, imm); }

const uint8_t BF_SRANDII_XS_SHIFT = 7;
const uint8_t BF_SRANDII_XS_NBITS = 5;
const uint32_t BF_SRANDII_XS_MASK = 0x1f;
const bool BF_SRANDII_XS_SIGNED = false;
inline constexpr RegId extrInstSrandiiXs(EncInst inst) { return extrReg5(inst, BF_SRANDII_XS_SHIFT); }
inline constexpr void embdInstSrandiiXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SRANDII_XS_SHIFT, reg); }

const uint8_t BF_SRANDII_XD_SHIFT = 12;
const uint8_t BF_SRANDII_XD_NBITS = 4;
const uint32_t BF_SRANDII_XD_MASK = 0xf;
const bool BF_SRANDII_XD_SIGNED = false;
inline constexpr RegId extrInstSrandiiXd(EncInst inst) { return extrReg4(inst, BF_SRANDII_XD_SHIFT); }
inline constexpr void embdInstSrandiiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SRANDII_XD_SHIFT, reg); }

const uint8_t BF_SRANDII_SHIFT_SHIFT = 16;
const uint8_t BF_SRANDII_SHIFT_NBITS = 4;
const uint32_t BF_SRANDII_SHIFT_MASK = 0xf;
const bool BF_SRANDII_SHIFT_SIGNED = false;
inline constexpr uint64_t extrInstSrandiiShift(EncInst inst) { return extrUnsignedImm(inst, BF_SRANDII_SHIFT_SHIFT, BF_SRANDII_SHIFT_NBITS); }
inline constexpr void embdInstSrandiiShift(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SRANDII_SHIFT_SHIFT, BF_SRANDII_SHIFT_MASK, imm); }

const uint8_t BF_SRANDII_IMM_SHIFT = 20;
const uint8_t BF_SRANDII_IMM_NBITS = 12;
const uint32_t BF_SRANDII_IMM_MASK = 0xfff;
const bool BF_SRANDII_IMM_SIGNED = false;
inline constexpr uint64_t extrInstSrandiiImm(EncInst inst) { return extrUnsignedImm(inst, BF_SRANDII_IMM_SHIFT, BF_SRANDII_IMM_NBITS); }
inline constexpr void embdInstSrandiiImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SRANDII_IMM_SHIFT, BF_SRANDII_IMM_MASK, imm); }

const uint8_t BF_MOVBIL_XS_SHIFT = 7;
const uint8_t BF_MOVBIL_XS_NBITS = 5;
const uint32_t BF_MOVBIL_XS_MASK = 0x1f;
const bool BF_MOVBIL_XS_SIGNED = false;
inline constexpr RegId extrInstMovbilXs(EncInst inst) { return extrReg5(inst, BF_MOVBIL_XS_SHIFT); }
inline constexpr void embdInstMovbilXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVBIL_XS_SHIFT, reg); }

const uint8_t BF_MOVBIL_LENB_SHIFT = 16;
const uint8_t BF_MOVBIL_LENB_NBITS = 3;
const uint32_t BF_MOVBIL_LENB_MASK = 0x7;
const bool BF_MOVBIL_LENB_SIGNED = false;
inline constexpr uint64_t extrInstMovbilLenb(EncInst inst) { return extrUnsignedImm(inst, BF_MOVBIL_LENB_SHIFT, BF_MOVBIL_LENB_NBITS); }
inline constexpr void embdInstMovbilLenb(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVBIL_LENB_SHIFT, BF_MOVBIL_LENB_MASK, imm); }

const uint8_t BF_MOVBIL_BITS_SHIFT = 20;
const uint8_t BF_MOVBIL_BITS_NBITS = 8;
const uint32_t BF_MOVBIL_BITS_MASK = 0xff;
const bool BF_MOVBIL_BITS_SIGNED = false;
inline constexpr uint64_t extrInstMovbilBits(EncInst inst) { return extrUnsignedImm(inst, BF_MOVBIL_BITS_SHIFT, BF_MOVBIL_BITS_NBITS); }
inline constexpr void embdInstMovbilBits(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVBIL_BITS_SHIFT, BF_MOVBIL_BITS_MASK, imm); }

const uint8_t BF_MOVBLR_XS_SHIFT = 7;
const uint8_t BF_MOVBLR_XS_NBITS = 5;
const uint32_t BF_MOVBLR_XS_MASK = 0x1f;
const bool BF_MOVBLR_XS_SIGNED = false;
inline constexpr RegId extrInstMovblrXs(EncInst inst) { return extrReg5(inst, BF_MOVBLR_XS_SHIFT); }
inline constexpr void embdInstMovblrXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVBLR_XS_SHIFT, reg); }

const uint8_t BF_MOVBLR_XD_SHIFT = 12;
const uint8_t BF_MOVBLR_XD_NBITS = 4;
const uint32_t BF_MOVBLR_XD_MASK = 0xf;
const bool BF_MOVBLR_XD_SIGNED = false;
inline constexpr RegId extrInstMovblrXd(EncInst inst) { return extrReg4(inst, BF_MOVBLR_XD_SHIFT); }
inline constexpr void embdInstMovblrXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_MOVBLR_XD_SHIFT, reg); }

const uint8_t BF_MOVBLR_LENB_SHIFT = 16;
const uint8_t BF_MOVBLR_LENB_NBITS = 3;
const uint32_t BF_MOVBLR_LENB_MASK = 0x7;
const bool BF_MOVBLR_LENB_SIGNED = false;
inline constexpr uint64_t extrInstMovblrLenb(EncInst inst) { return extrUnsignedImm(inst, BF_MOVBLR_LENB_SHIFT, BF_MOVBLR_LENB_NBITS); }
inline constexpr void embdInstMovblrLenb(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVBLR_LENB_SHIFT, BF_MOVBLR_LENB_MASK, imm); }

const uint8_t BF_FSTATE_PROP_SHIFT = 16;
const uint8_t BF_FSTATE_PROP_NBITS = 4;
const uint32_t BF_FSTATE_PROP_MASK = 0xf;
const bool BF_FSTATE_PROP_SIGNED = false;
inline constexpr uint64_t extrInstFstateProp(EncInst inst) { return extrUnsignedImm(inst, BF_FSTATE_PROP_SHIFT, BF_FSTATE_PROP_NBITS); }
inline constexpr void embdInstFstateProp(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSTATE_PROP_SHIFT, BF_FSTATE_PROP_MASK, imm); }

const uint8_t BF_CSWPI_X1_SHIFT = 7;
const uint8_t BF_CSWPI_X1_NBITS = 5;
const uint32_t BF_CSWPI_X1_MASK = 0x1f;
const bool BF_CSWPI_X1_SIGNED = false;
inline constexpr RegId extrInstCswpiX1(EncInst inst) { return extrReg5(inst, BF_CSWPI_X1_SHIFT); }
inline constexpr void embdInstCswpiX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_CSWPI_X1_SHIFT, reg); }

const uint8_t BF_CSWPI_X2_SHIFT = 12;
const uint8_t BF_CSWPI_X2_NBITS = 4;
const uint32_t BF_CSWPI_X2_MASK = 0xf;
const bool BF_CSWPI_X2_SIGNED = false;
inline constexpr RegId extrInstCswpiX2(EncInst inst) { return extrReg4(inst, BF_CSWPI_X2_SHIFT); }
inline constexpr void embdInstCswpiX2(EncInst& inst, RegId reg) { embdReg4(inst, BF_CSWPI_X2_SHIFT, reg); }

const uint8_t BF_CSWPI_IMM1_SHIFT = 16;
const uint8_t BF_CSWPI_IMM1_NBITS = 4;
const uint32_t BF_CSWPI_IMM1_MASK = 0xf;
const bool BF_CSWPI_IMM1_SIGNED = true;
inline constexpr int64_t extrInstCswpiImm1(EncInst inst) { return extrSignedImm(inst, BF_CSWPI_IMM1_SHIFT, BF_CSWPI_IMM1_NBITS); }
inline constexpr void embdInstCswpiImm1(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_CSWPI_IMM1_SHIFT, BF_CSWPI_IMM1_MASK, imm); }

const uint8_t BF_CSWPI_IMM2_SHIFT = 20;
const uint8_t BF_CSWPI_IMM2_NBITS = 4;
const uint32_t BF_CSWPI_IMM2_MASK = 0xf;
const bool BF_CSWPI_IMM2_SIGNED = true;
inline constexpr int64_t extrInstCswpiImm2(EncInst inst) { return extrSignedImm(inst, BF_CSWPI_IMM2_SHIFT, BF_CSWPI_IMM2_NBITS); }
inline constexpr void embdInstCswpiImm2(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_CSWPI_IMM2_SHIFT, BF_CSWPI_IMM2_MASK, imm); }

const uint8_t BF_MOVLR_XS_SHIFT = 7;
const uint8_t BF_MOVLR_XS_NBITS = 5;
const uint32_t BF_MOVLR_XS_MASK = 0x1f;
const bool BF_MOVLR_XS_SIGNED = false;
inline constexpr RegId extrInstMovlrXs(EncInst inst) { return extrReg5(inst, BF_MOVLR_XS_SHIFT); }
inline constexpr void embdInstMovlrXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVLR_XS_SHIFT, reg); }

const uint8_t BF_MOVLR_XD_SHIFT = 12;
const uint8_t BF_MOVLR_XD_NBITS = 4;
const uint32_t BF_MOVLR_XD_MASK = 0xf;
const bool BF_MOVLR_XD_SIGNED = false;
inline constexpr RegId extrInstMovlrXd(EncInst inst) { return extrReg4(inst, BF_MOVLR_XD_SHIFT); }
inline constexpr void embdInstMovlrXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_MOVLR_XD_SHIFT, reg); }

const uint8_t BF_MOVLR_LENB_SHIFT = 16;
const uint8_t BF_MOVLR_LENB_NBITS = 3;
const uint32_t BF_MOVLR_LENB_MASK = 0x7;
const bool BF_MOVLR_LENB_SIGNED = false;
inline constexpr uint64_t extrInstMovlrLenb(EncInst inst) { return extrUnsignedImm(inst, BF_MOVLR_LENB_SHIFT, BF_MOVLR_LENB_NBITS); }
inline constexpr void embdInstMovlrLenb(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVLR_LENB_SHIFT, BF_MOVLR_LENB_MASK, imm); }

const uint8_t BF_MOVLR_INC_SHIFT = 19;
const uint8_t BF_MOVLR_INC_NBITS = 1;
const uint32_t BF_MOVLR_INC_MASK = 0x1;
const bool BF_MOVLR_INC_SIGNED = false;
inline constexpr uint64_t extrInstMovlrInc(EncInst inst) { return extrUnsignedImm(inst, BF_MOVLR_INC_SHIFT, BF_MOVLR_INC_NBITS); }
inline constexpr void embdInstMovlrInc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVLR_INC_SHIFT, BF_MOVLR_INC_MASK, imm); }

const uint8_t BF_MOVLR_IMM_SHIFT = 20;
const uint8_t BF_MOVLR_IMM_NBITS = 12;
const uint32_t BF_MOVLR_IMM_MASK = 0xfff;
const bool BF_MOVLR_IMM_SIGNED = true;
inline constexpr int64_t extrInstMovlrImm(EncInst inst) { return extrSignedImm(inst, BF_MOVLR_IMM_SHIFT, BF_MOVLR_IMM_NBITS); }
inline constexpr void embdInstMovlrImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_MOVLR_IMM_SHIFT, BF_MOVLR_IMM_MASK, imm); }

const uint8_t BF_MOVRL_XS_SHIFT = 7;
const uint8_t BF_MOVRL_XS_NBITS = 5;
const uint32_t BF_MOVRL_XS_MASK = 0x1f;
const bool BF_MOVRL_XS_SIGNED = false;
inline constexpr RegId extrInstMovrlXs(EncInst inst) { return extrReg5(inst, BF_MOVRL_XS_SHIFT); }
inline constexpr void embdInstMovrlXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVRL_XS_SHIFT, reg); }

const uint8_t BF_MOVRL_XD_SHIFT = 12;
const uint8_t BF_MOVRL_XD_NBITS = 4;
const uint32_t BF_MOVRL_XD_MASK = 0xf;
const bool BF_MOVRL_XD_SIGNED = false;
inline constexpr RegId extrInstMovrlXd(EncInst inst) { return extrReg4(inst, BF_MOVRL_XD_SHIFT); }
inline constexpr void embdInstMovrlXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_MOVRL_XD_SHIFT, reg); }

const uint8_t BF_MOVRL_LENB_SHIFT = 16;
const uint8_t BF_MOVRL_LENB_NBITS = 3;
const uint32_t BF_MOVRL_LENB_MASK = 0x7;
const bool BF_MOVRL_LENB_SIGNED = false;
inline constexpr uint64_t extrInstMovrlLenb(EncInst inst) { return extrUnsignedImm(inst, BF_MOVRL_LENB_SHIFT, BF_MOVRL_LENB_NBITS); }
inline constexpr void embdInstMovrlLenb(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVRL_LENB_SHIFT, BF_MOVRL_LENB_MASK, imm); }

const uint8_t BF_MOVRL_INC_SHIFT = 19;
const uint8_t BF_MOVRL_INC_NBITS = 1;
const uint32_t BF_MOVRL_INC_MASK = 0x1;
const bool BF_MOVRL_INC_SIGNED = false;
inline constexpr uint64_t extrInstMovrlInc(EncInst inst) { return extrUnsignedImm(inst, BF_MOVRL_INC_SHIFT, BF_MOVRL_INC_NBITS); }
inline constexpr void embdInstMovrlInc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVRL_INC_SHIFT, BF_MOVRL_INC_MASK, imm); }

const uint8_t BF_MOVRL_IMM_SHIFT = 20;
const uint8_t BF_MOVRL_IMM_NBITS = 12;
const uint32_t BF_MOVRL_IMM_MASK = 0xfff;
const bool BF_MOVRL_IMM_SIGNED = true;
inline constexpr int64_t extrInstMovrlImm(EncInst inst) { return extrSignedImm(inst, BF_MOVRL_IMM_SHIFT, BF_MOVRL_IMM_NBITS); }
inline constexpr void embdInstMovrlImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_MOVRL_IMM_SHIFT, BF_MOVRL_IMM_MASK, imm); }

const uint8_t BF_SWIZ_XS_SHIFT = 7;
const uint8_t BF_SWIZ_XS_NBITS = 5;
const uint32_t BF_SWIZ_XS_MASK = 0x1f;
const bool BF_SWIZ_XS_SIGNED = false;
inline constexpr RegId extrInstSwizXs(EncInst inst) { return extrReg5(inst, BF_SWIZ_XS_SHIFT); }
inline constexpr void embdInstSwizXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SWIZ_XS_SHIFT, reg); }

const uint8_t BF_SWIZ_XD_SHIFT = 12;
const uint8_t BF_SWIZ_XD_NBITS = 4;
const uint32_t BF_SWIZ_XD_MASK = 0xf;
const bool BF_SWIZ_XD_SIGNED = false;
inline constexpr RegId extrInstSwizXd(EncInst inst) { return extrReg4(inst, BF_SWIZ_XD_SHIFT); }
inline constexpr void embdInstSwizXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_SWIZ_XD_SHIFT, reg); }

const uint8_t BF_BCPYOLI_XOP_SHIFT = 7;
const uint8_t BF_BCPYOLI_XOP_NBITS = 5;
const uint32_t BF_BCPYOLI_XOP_MASK = 0x1f;
const bool BF_BCPYOLI_XOP_SIGNED = false;
inline constexpr RegId extrInstBcpyoliXop(EncInst inst) { return extrReg5(inst, BF_BCPYOLI_XOP_SHIFT); }
inline constexpr void embdInstBcpyoliXop(EncInst& inst, RegId reg) { embdReg5(inst, BF_BCPYOLI_XOP_SHIFT, reg); }

const uint8_t BF_BCPYOLI_XD_SHIFT = 12;
const uint8_t BF_BCPYOLI_XD_NBITS = 4;
const uint32_t BF_BCPYOLI_XD_MASK = 0xf;
const bool BF_BCPYOLI_XD_SIGNED = false;
inline constexpr RegId extrInstBcpyoliXd(EncInst inst) { return extrReg4(inst, BF_BCPYOLI_XD_SHIFT); }
inline constexpr void embdInstBcpyoliXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_BCPYOLI_XD_SHIFT, reg); }

const uint8_t BF_BCPYOLI_LENW_SHIFT = 16;
const uint8_t BF_BCPYOLI_LENW_NBITS = 4;
const uint32_t BF_BCPYOLI_LENW_MASK = 0xf;
const bool BF_BCPYOLI_LENW_SIGNED = false;
inline constexpr uint64_t extrInstBcpyoliLenw(EncInst inst) { return extrUnsignedImm(inst, BF_BCPYOLI_LENW_SHIFT, BF_BCPYOLI_LENW_NBITS); }
inline constexpr void embdInstBcpyoliLenw(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BCPYOLI_LENW_SHIFT, BF_BCPYOLI_LENW_MASK, imm); }

/* R-Type Bitfields */
const uint8_t BF_RTYPE_XS1_SHIFT = 7;
const uint8_t BF_RTYPE_XS1_NBITS = 5;
const uint32_t BF_RTYPE_XS1_MASK = 0x1f;
const bool BF_RTYPE_XS1_SIGNED = false;
inline constexpr RegId extrInstRtypeXs1(EncInst inst) { return extrReg5(inst, BF_RTYPE_XS1_SHIFT); }
inline constexpr void embdInstRtypeXs1(EncInst& inst, RegId reg) { embdReg5(inst, BF_RTYPE_XS1_SHIFT, reg); }

const uint8_t BF_RTYPE_XD_SHIFT = 12;
const uint8_t BF_RTYPE_XD_NBITS = 5;
const uint32_t BF_RTYPE_XD_MASK = 0x1f;
const bool BF_RTYPE_XD_SIGNED = false;
inline constexpr RegId extrInstRtypeXd(EncInst inst) { return extrReg5(inst, BF_RTYPE_XD_SHIFT); }
inline constexpr void embdInstRtypeXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_RTYPE_XD_SHIFT, reg); }

const uint8_t BF_RTYPE_XS2_SHIFT = 17;
const uint8_t BF_RTYPE_XS2_NBITS = 5;
const uint32_t BF_RTYPE_XS2_MASK = 0x1f;
const bool BF_RTYPE_XS2_SIGNED = false;
inline constexpr RegId extrInstRtypeXs2(EncInst inst) { return extrReg5(inst, BF_RTYPE_XS2_SHIFT); }
inline constexpr void embdInstRtypeXs2(EncInst& inst, RegId reg) { embdReg5(inst, BF_RTYPE_XS2_SHIFT, reg); }

const uint8_t BF_RTYPE_IMM4_SHIFT = 22;
const uint8_t BF_RTYPE_IMM4_NBITS = 4;
const uint32_t BF_RTYPE_IMM4_MASK = 0xf;
const bool BF_RTYPE_IMM4_SIGNED = false;
inline constexpr uint64_t extrInstRtypeImm4(EncInst inst) { return extrUnsignedImm(inst, BF_RTYPE_IMM4_SHIFT, BF_RTYPE_IMM4_NBITS); }
inline constexpr void embdInstRtypeImm4(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_RTYPE_IMM4_SHIFT, BF_RTYPE_IMM4_MASK, imm); }

const uint8_t BF_RTYPE_FUNC_SHIFT = 26;
const uint8_t BF_RTYPE_FUNC_NBITS = 3;
const uint32_t BF_RTYPE_FUNC_MASK = 0x7;
const bool BF_RTYPE_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstRtypeFunc(EncInst inst) { return extrUnsignedImm(inst, BF_RTYPE_FUNC_SHIFT, BF_RTYPE_FUNC_NBITS); }
inline constexpr void embdInstRtypeFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_RTYPE_FUNC_SHIFT, BF_RTYPE_FUNC_MASK, imm); }

const uint8_t BF_RTYPE_PRECISION_SHIFT = 29;
const uint8_t BF_RTYPE_PRECISION_NBITS = 3;
const uint32_t BF_RTYPE_PRECISION_MASK = 0x7;
const bool BF_RTYPE_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstRtypePrecision(EncInst inst) { return extrUnsignedImm(inst, BF_RTYPE_PRECISION_SHIFT, BF_RTYPE_PRECISION_NBITS); }
inline constexpr void embdInstRtypePrecision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_RTYPE_PRECISION_SHIFT, BF_RTYPE_PRECISION_MASK, imm); }

const uint8_t BF_ADD_XS_SHIFT = 7;
const uint8_t BF_ADD_XS_NBITS = 5;
const uint32_t BF_ADD_XS_MASK = 0x1f;
const bool BF_ADD_XS_SIGNED = false;
inline constexpr RegId extrInstAddXs(EncInst inst) { return extrReg5(inst, BF_ADD_XS_SHIFT); }
inline constexpr void embdInstAddXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_ADD_XS_SHIFT, reg); }

const uint8_t BF_ADD_XD_SHIFT = 12;
const uint8_t BF_ADD_XD_NBITS = 5;
const uint32_t BF_ADD_XD_MASK = 0x1f;
const bool BF_ADD_XD_SIGNED = false;
inline constexpr RegId extrInstAddXd(EncInst inst) { return extrReg5(inst, BF_ADD_XD_SHIFT); }
inline constexpr void embdInstAddXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_ADD_XD_SHIFT, reg); }

const uint8_t BF_ADD_XT_SHIFT = 17;
const uint8_t BF_ADD_XT_NBITS = 5;
const uint32_t BF_ADD_XT_MASK = 0x1f;
const bool BF_ADD_XT_SIGNED = false;
inline constexpr RegId extrInstAddXt(EncInst inst) { return extrReg5(inst, BF_ADD_XT_SHIFT); }
inline constexpr void embdInstAddXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_ADD_XT_SHIFT, reg); }

const uint8_t BF_ADD_FUNC_SHIFT = 26;
const uint8_t BF_ADD_FUNC_NBITS = 3;
const uint32_t BF_ADD_FUNC_MASK = 0x7;
const bool BF_ADD_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstAddFunc(EncInst inst) { return extrUnsignedImm(inst, BF_ADD_FUNC_SHIFT, BF_ADD_FUNC_NBITS); }
inline constexpr void embdInstAddFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_ADD_FUNC_SHIFT, BF_ADD_FUNC_MASK, imm); }

const uint8_t BF_SUB_XS_SHIFT = 7;
const uint8_t BF_SUB_XS_NBITS = 5;
const uint32_t BF_SUB_XS_MASK = 0x1f;
const bool BF_SUB_XS_SIGNED = false;
inline constexpr RegId extrInstSubXs(EncInst inst) { return extrReg5(inst, BF_SUB_XS_SHIFT); }
inline constexpr void embdInstSubXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SUB_XS_SHIFT, reg); }

const uint8_t BF_SUB_XD_SHIFT = 12;
const uint8_t BF_SUB_XD_NBITS = 5;
const uint32_t BF_SUB_XD_MASK = 0x1f;
const bool BF_SUB_XD_SIGNED = false;
inline constexpr RegId extrInstSubXd(EncInst inst) { return extrReg5(inst, BF_SUB_XD_SHIFT); }
inline constexpr void embdInstSubXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_SUB_XD_SHIFT, reg); }

const uint8_t BF_SUB_XT_SHIFT = 17;
const uint8_t BF_SUB_XT_NBITS = 5;
const uint32_t BF_SUB_XT_MASK = 0x1f;
const bool BF_SUB_XT_SIGNED = false;
inline constexpr RegId extrInstSubXt(EncInst inst) { return extrReg5(inst, BF_SUB_XT_SHIFT); }
inline constexpr void embdInstSubXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_SUB_XT_SHIFT, reg); }

const uint8_t BF_SUB_FUNC_SHIFT = 26;
const uint8_t BF_SUB_FUNC_NBITS = 3;
const uint32_t BF_SUB_FUNC_MASK = 0x7;
const bool BF_SUB_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstSubFunc(EncInst inst) { return extrUnsignedImm(inst, BF_SUB_FUNC_SHIFT, BF_SUB_FUNC_NBITS); }
inline constexpr void embdInstSubFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SUB_FUNC_SHIFT, BF_SUB_FUNC_MASK, imm); }

const uint8_t BF_MUL_XS_SHIFT = 7;
const uint8_t BF_MUL_XS_NBITS = 5;
const uint32_t BF_MUL_XS_MASK = 0x1f;
const bool BF_MUL_XS_SIGNED = false;
inline constexpr RegId extrInstMulXs(EncInst inst) { return extrReg5(inst, BF_MUL_XS_SHIFT); }
inline constexpr void embdInstMulXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MUL_XS_SHIFT, reg); }

const uint8_t BF_MUL_XD_SHIFT = 12;
const uint8_t BF_MUL_XD_NBITS = 5;
const uint32_t BF_MUL_XD_MASK = 0x1f;
const bool BF_MUL_XD_SIGNED = false;
inline constexpr RegId extrInstMulXd(EncInst inst) { return extrReg5(inst, BF_MUL_XD_SHIFT); }
inline constexpr void embdInstMulXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_MUL_XD_SHIFT, reg); }

const uint8_t BF_MUL_XT_SHIFT = 17;
const uint8_t BF_MUL_XT_NBITS = 5;
const uint32_t BF_MUL_XT_MASK = 0x1f;
const bool BF_MUL_XT_SIGNED = false;
inline constexpr RegId extrInstMulXt(EncInst inst) { return extrReg5(inst, BF_MUL_XT_SHIFT); }
inline constexpr void embdInstMulXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_MUL_XT_SHIFT, reg); }

const uint8_t BF_MUL_FUNC_SHIFT = 26;
const uint8_t BF_MUL_FUNC_NBITS = 3;
const uint32_t BF_MUL_FUNC_MASK = 0x7;
const bool BF_MUL_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstMulFunc(EncInst inst) { return extrUnsignedImm(inst, BF_MUL_FUNC_SHIFT, BF_MUL_FUNC_NBITS); }
inline constexpr void embdInstMulFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MUL_FUNC_SHIFT, BF_MUL_FUNC_MASK, imm); }

const uint8_t BF_DIV_XS_SHIFT = 7;
const uint8_t BF_DIV_XS_NBITS = 5;
const uint32_t BF_DIV_XS_MASK = 0x1f;
const bool BF_DIV_XS_SIGNED = false;
inline constexpr RegId extrInstDivXs(EncInst inst) { return extrReg5(inst, BF_DIV_XS_SHIFT); }
inline constexpr void embdInstDivXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_DIV_XS_SHIFT, reg); }

const uint8_t BF_DIV_XD_SHIFT = 12;
const uint8_t BF_DIV_XD_NBITS = 5;
const uint32_t BF_DIV_XD_MASK = 0x1f;
const bool BF_DIV_XD_SIGNED = false;
inline constexpr RegId extrInstDivXd(EncInst inst) { return extrReg5(inst, BF_DIV_XD_SHIFT); }
inline constexpr void embdInstDivXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_DIV_XD_SHIFT, reg); }

const uint8_t BF_DIV_XT_SHIFT = 17;
const uint8_t BF_DIV_XT_NBITS = 5;
const uint32_t BF_DIV_XT_MASK = 0x1f;
const bool BF_DIV_XT_SIGNED = false;
inline constexpr RegId extrInstDivXt(EncInst inst) { return extrReg5(inst, BF_DIV_XT_SHIFT); }
inline constexpr void embdInstDivXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_DIV_XT_SHIFT, reg); }

const uint8_t BF_DIV_FUNC_SHIFT = 26;
const uint8_t BF_DIV_FUNC_NBITS = 3;
const uint32_t BF_DIV_FUNC_MASK = 0x7;
const bool BF_DIV_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstDivFunc(EncInst inst) { return extrUnsignedImm(inst, BF_DIV_FUNC_SHIFT, BF_DIV_FUNC_NBITS); }
inline constexpr void embdInstDivFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_DIV_FUNC_SHIFT, BF_DIV_FUNC_MASK, imm); }

const uint8_t BF_MOD_XS_SHIFT = 7;
const uint8_t BF_MOD_XS_NBITS = 5;
const uint32_t BF_MOD_XS_MASK = 0x1f;
const bool BF_MOD_XS_SIGNED = false;
inline constexpr RegId extrInstModXs(EncInst inst) { return extrReg5(inst, BF_MOD_XS_SHIFT); }
inline constexpr void embdInstModXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOD_XS_SHIFT, reg); }

const uint8_t BF_MOD_XD_SHIFT = 12;
const uint8_t BF_MOD_XD_NBITS = 5;
const uint32_t BF_MOD_XD_MASK = 0x1f;
const bool BF_MOD_XD_SIGNED = false;
inline constexpr RegId extrInstModXd(EncInst inst) { return extrReg5(inst, BF_MOD_XD_SHIFT); }
inline constexpr void embdInstModXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOD_XD_SHIFT, reg); }

const uint8_t BF_MOD_XT_SHIFT = 17;
const uint8_t BF_MOD_XT_NBITS = 5;
const uint32_t BF_MOD_XT_MASK = 0x1f;
const bool BF_MOD_XT_SIGNED = false;
inline constexpr RegId extrInstModXt(EncInst inst) { return extrReg5(inst, BF_MOD_XT_SHIFT); }
inline constexpr void embdInstModXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOD_XT_SHIFT, reg); }

const uint8_t BF_MOD_FUNC_SHIFT = 26;
const uint8_t BF_MOD_FUNC_NBITS = 3;
const uint32_t BF_MOD_FUNC_MASK = 0x7;
const bool BF_MOD_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstModFunc(EncInst inst) { return extrUnsignedImm(inst, BF_MOD_FUNC_SHIFT, BF_MOD_FUNC_NBITS); }
inline constexpr void embdInstModFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOD_FUNC_SHIFT, BF_MOD_FUNC_MASK, imm); }

const uint8_t BF_AND_XS_SHIFT = 7;
const uint8_t BF_AND_XS_NBITS = 5;
const uint32_t BF_AND_XS_MASK = 0x1f;
const bool BF_AND_XS_SIGNED = false;
inline constexpr RegId extrInstAndXs(EncInst inst) { return extrReg5(inst, BF_AND_XS_SHIFT); }
inline constexpr void embdInstAndXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_AND_XS_SHIFT, reg); }

const uint8_t BF_AND_XD_SHIFT = 12;
const uint8_t BF_AND_XD_NBITS = 5;
const uint32_t BF_AND_XD_MASK = 0x1f;
const bool BF_AND_XD_SIGNED = false;
inline constexpr RegId extrInstAndXd(EncInst inst) { return extrReg5(inst, BF_AND_XD_SHIFT); }
inline constexpr void embdInstAndXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_AND_XD_SHIFT, reg); }

const uint8_t BF_AND_XT_SHIFT = 17;
const uint8_t BF_AND_XT_NBITS = 5;
const uint32_t BF_AND_XT_MASK = 0x1f;
const bool BF_AND_XT_SIGNED = false;
inline constexpr RegId extrInstAndXt(EncInst inst) { return extrReg5(inst, BF_AND_XT_SHIFT); }
inline constexpr void embdInstAndXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_AND_XT_SHIFT, reg); }

const uint8_t BF_AND_FUNC_SHIFT = 26;
const uint8_t BF_AND_FUNC_NBITS = 3;
const uint32_t BF_AND_FUNC_MASK = 0x7;
const bool BF_AND_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstAndFunc(EncInst inst) { return extrUnsignedImm(inst, BF_AND_FUNC_SHIFT, BF_AND_FUNC_NBITS); }
inline constexpr void embdInstAndFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_AND_FUNC_SHIFT, BF_AND_FUNC_MASK, imm); }

const uint8_t BF_OR_XS_SHIFT = 7;
const uint8_t BF_OR_XS_NBITS = 5;
const uint32_t BF_OR_XS_MASK = 0x1f;
const bool BF_OR_XS_SIGNED = false;
inline constexpr RegId extrInstOrXs(EncInst inst) { return extrReg5(inst, BF_OR_XS_SHIFT); }
inline constexpr void embdInstOrXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_OR_XS_SHIFT, reg); }

const uint8_t BF_OR_XD_SHIFT = 12;
const uint8_t BF_OR_XD_NBITS = 5;
const uint32_t BF_OR_XD_MASK = 0x1f;
const bool BF_OR_XD_SIGNED = false;
inline constexpr RegId extrInstOrXd(EncInst inst) { return extrReg5(inst, BF_OR_XD_SHIFT); }
inline constexpr void embdInstOrXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_OR_XD_SHIFT, reg); }

const uint8_t BF_OR_XT_SHIFT = 17;
const uint8_t BF_OR_XT_NBITS = 5;
const uint32_t BF_OR_XT_MASK = 0x1f;
const bool BF_OR_XT_SIGNED = false;
inline constexpr RegId extrInstOrXt(EncInst inst) { return extrReg5(inst, BF_OR_XT_SHIFT); }
inline constexpr void embdInstOrXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_OR_XT_SHIFT, reg); }

const uint8_t BF_OR_FUNC_SHIFT = 26;
const uint8_t BF_OR_FUNC_NBITS = 3;
const uint32_t BF_OR_FUNC_MASK = 0x7;
const bool BF_OR_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstOrFunc(EncInst inst) { return extrUnsignedImm(inst, BF_OR_FUNC_SHIFT, BF_OR_FUNC_NBITS); }
inline constexpr void embdInstOrFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_OR_FUNC_SHIFT, BF_OR_FUNC_MASK, imm); }

const uint8_t BF_XOR_XS_SHIFT = 7;
const uint8_t BF_XOR_XS_NBITS = 5;
const uint32_t BF_XOR_XS_MASK = 0x1f;
const bool BF_XOR_XS_SIGNED = false;
inline constexpr RegId extrInstXorXs(EncInst inst) { return extrReg5(inst, BF_XOR_XS_SHIFT); }
inline constexpr void embdInstXorXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_XOR_XS_SHIFT, reg); }

const uint8_t BF_XOR_XD_SHIFT = 12;
const uint8_t BF_XOR_XD_NBITS = 5;
const uint32_t BF_XOR_XD_MASK = 0x1f;
const bool BF_XOR_XD_SIGNED = false;
inline constexpr RegId extrInstXorXd(EncInst inst) { return extrReg5(inst, BF_XOR_XD_SHIFT); }
inline constexpr void embdInstXorXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_XOR_XD_SHIFT, reg); }

const uint8_t BF_XOR_XT_SHIFT = 17;
const uint8_t BF_XOR_XT_NBITS = 5;
const uint32_t BF_XOR_XT_MASK = 0x1f;
const bool BF_XOR_XT_SIGNED = false;
inline constexpr RegId extrInstXorXt(EncInst inst) { return extrReg5(inst, BF_XOR_XT_SHIFT); }
inline constexpr void embdInstXorXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_XOR_XT_SHIFT, reg); }

const uint8_t BF_XOR_FUNC_SHIFT = 26;
const uint8_t BF_XOR_FUNC_NBITS = 3;
const uint32_t BF_XOR_FUNC_MASK = 0x7;
const bool BF_XOR_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstXorFunc(EncInst inst) { return extrUnsignedImm(inst, BF_XOR_FUNC_SHIFT, BF_XOR_FUNC_NBITS); }
inline constexpr void embdInstXorFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_XOR_FUNC_SHIFT, BF_XOR_FUNC_MASK, imm); }

const uint8_t BF_CLT_XS_SHIFT = 7;
const uint8_t BF_CLT_XS_NBITS = 5;
const uint32_t BF_CLT_XS_MASK = 0x1f;
const bool BF_CLT_XS_SIGNED = false;
inline constexpr RegId extrInstCltXs(EncInst inst) { return extrReg5(inst, BF_CLT_XS_SHIFT); }
inline constexpr void embdInstCltXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_CLT_XS_SHIFT, reg); }

const uint8_t BF_CLT_XD_SHIFT = 12;
const uint8_t BF_CLT_XD_NBITS = 5;
const uint32_t BF_CLT_XD_MASK = 0x1f;
const bool BF_CLT_XD_SIGNED = false;
inline constexpr RegId extrInstCltXd(EncInst inst) { return extrReg5(inst, BF_CLT_XD_SHIFT); }
inline constexpr void embdInstCltXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_CLT_XD_SHIFT, reg); }

const uint8_t BF_CLT_XT_SHIFT = 17;
const uint8_t BF_CLT_XT_NBITS = 5;
const uint32_t BF_CLT_XT_MASK = 0x1f;
const bool BF_CLT_XT_SIGNED = false;
inline constexpr RegId extrInstCltXt(EncInst inst) { return extrReg5(inst, BF_CLT_XT_SHIFT); }
inline constexpr void embdInstCltXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_CLT_XT_SHIFT, reg); }

const uint8_t BF_CLT_FUNC_SHIFT = 26;
const uint8_t BF_CLT_FUNC_NBITS = 3;
const uint32_t BF_CLT_FUNC_MASK = 0x7;
const bool BF_CLT_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstCltFunc(EncInst inst) { return extrUnsignedImm(inst, BF_CLT_FUNC_SHIFT, BF_CLT_FUNC_NBITS); }
inline constexpr void embdInstCltFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_CLT_FUNC_SHIFT, BF_CLT_FUNC_MASK, imm); }

const uint8_t BF_CGT_XS_SHIFT = 7;
const uint8_t BF_CGT_XS_NBITS = 5;
const uint32_t BF_CGT_XS_MASK = 0x1f;
const bool BF_CGT_XS_SIGNED = false;
inline constexpr RegId extrInstCgtXs(EncInst inst) { return extrReg5(inst, BF_CGT_XS_SHIFT); }
inline constexpr void embdInstCgtXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_CGT_XS_SHIFT, reg); }

const uint8_t BF_CGT_XD_SHIFT = 12;
const uint8_t BF_CGT_XD_NBITS = 5;
const uint32_t BF_CGT_XD_MASK = 0x1f;
const bool BF_CGT_XD_SIGNED = false;
inline constexpr RegId extrInstCgtXd(EncInst inst) { return extrReg5(inst, BF_CGT_XD_SHIFT); }
inline constexpr void embdInstCgtXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_CGT_XD_SHIFT, reg); }

const uint8_t BF_CGT_XT_SHIFT = 17;
const uint8_t BF_CGT_XT_NBITS = 5;
const uint32_t BF_CGT_XT_MASK = 0x1f;
const bool BF_CGT_XT_SIGNED = false;
inline constexpr RegId extrInstCgtXt(EncInst inst) { return extrReg5(inst, BF_CGT_XT_SHIFT); }
inline constexpr void embdInstCgtXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_CGT_XT_SHIFT, reg); }

const uint8_t BF_CGT_FUNC_SHIFT = 26;
const uint8_t BF_CGT_FUNC_NBITS = 3;
const uint32_t BF_CGT_FUNC_MASK = 0x7;
const bool BF_CGT_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstCgtFunc(EncInst inst) { return extrUnsignedImm(inst, BF_CGT_FUNC_SHIFT, BF_CGT_FUNC_NBITS); }
inline constexpr void embdInstCgtFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_CGT_FUNC_SHIFT, BF_CGT_FUNC_MASK, imm); }

const uint8_t BF_CEQ_XS_SHIFT = 7;
const uint8_t BF_CEQ_XS_NBITS = 5;
const uint32_t BF_CEQ_XS_MASK = 0x1f;
const bool BF_CEQ_XS_SIGNED = false;
inline constexpr RegId extrInstCeqXs(EncInst inst) { return extrReg5(inst, BF_CEQ_XS_SHIFT); }
inline constexpr void embdInstCeqXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_CEQ_XS_SHIFT, reg); }

const uint8_t BF_CEQ_XD_SHIFT = 12;
const uint8_t BF_CEQ_XD_NBITS = 5;
const uint32_t BF_CEQ_XD_MASK = 0x1f;
const bool BF_CEQ_XD_SIGNED = false;
inline constexpr RegId extrInstCeqXd(EncInst inst) { return extrReg5(inst, BF_CEQ_XD_SHIFT); }
inline constexpr void embdInstCeqXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_CEQ_XD_SHIFT, reg); }

const uint8_t BF_CEQ_XT_SHIFT = 17;
const uint8_t BF_CEQ_XT_NBITS = 5;
const uint32_t BF_CEQ_XT_MASK = 0x1f;
const bool BF_CEQ_XT_SIGNED = false;
inline constexpr RegId extrInstCeqXt(EncInst inst) { return extrReg5(inst, BF_CEQ_XT_SHIFT); }
inline constexpr void embdInstCeqXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_CEQ_XT_SHIFT, reg); }

const uint8_t BF_CEQ_FUNC_SHIFT = 26;
const uint8_t BF_CEQ_FUNC_NBITS = 3;
const uint32_t BF_CEQ_FUNC_MASK = 0x7;
const bool BF_CEQ_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstCeqFunc(EncInst inst) { return extrUnsignedImm(inst, BF_CEQ_FUNC_SHIFT, BF_CEQ_FUNC_NBITS); }
inline constexpr void embdInstCeqFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_CEQ_FUNC_SHIFT, BF_CEQ_FUNC_MASK, imm); }

const uint8_t BF_CSTR_XS_SHIFT = 7;
const uint8_t BF_CSTR_XS_NBITS = 5;
const uint32_t BF_CSTR_XS_MASK = 0x1f;
const bool BF_CSTR_XS_SIGNED = false;
inline constexpr RegId extrInstCstrXs(EncInst inst) { return extrReg5(inst, BF_CSTR_XS_SHIFT); }
inline constexpr void embdInstCstrXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_CSTR_XS_SHIFT, reg); }

const uint8_t BF_CSTR_XD_SHIFT = 12;
const uint8_t BF_CSTR_XD_NBITS = 5;
const uint32_t BF_CSTR_XD_MASK = 0x1f;
const bool BF_CSTR_XD_SIGNED = false;
inline constexpr RegId extrInstCstrXd(EncInst inst) { return extrReg5(inst, BF_CSTR_XD_SHIFT); }
inline constexpr void embdInstCstrXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_CSTR_XD_SHIFT, reg); }

const uint8_t BF_CSTR_XT_SHIFT = 17;
const uint8_t BF_CSTR_XT_NBITS = 5;
const uint32_t BF_CSTR_XT_MASK = 0x1f;
const bool BF_CSTR_XT_SIGNED = false;
inline constexpr RegId extrInstCstrXt(EncInst inst) { return extrReg5(inst, BF_CSTR_XT_SHIFT); }
inline constexpr void embdInstCstrXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_CSTR_XT_SHIFT, reg); }

const uint8_t BF_CSTR_FUNC_SHIFT = 26;
const uint8_t BF_CSTR_FUNC_NBITS = 3;
const uint32_t BF_CSTR_FUNC_MASK = 0x7;
const bool BF_CSTR_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstCstrFunc(EncInst inst) { return extrUnsignedImm(inst, BF_CSTR_FUNC_SHIFT, BF_CSTR_FUNC_NBITS); }
inline constexpr void embdInstCstrFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_CSTR_FUNC_SHIFT, BF_CSTR_FUNC_MASK, imm); }

const uint8_t BF_SR_XS_SHIFT = 7;
const uint8_t BF_SR_XS_NBITS = 5;
const uint32_t BF_SR_XS_MASK = 0x1f;
const bool BF_SR_XS_SIGNED = false;
inline constexpr RegId extrInstSrXs(EncInst inst) { return extrReg5(inst, BF_SR_XS_SHIFT); }
inline constexpr void embdInstSrXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SR_XS_SHIFT, reg); }

const uint8_t BF_SR_XD_SHIFT = 12;
const uint8_t BF_SR_XD_NBITS = 5;
const uint32_t BF_SR_XD_MASK = 0x1f;
const bool BF_SR_XD_SIGNED = false;
inline constexpr RegId extrInstSrXd(EncInst inst) { return extrReg5(inst, BF_SR_XD_SHIFT); }
inline constexpr void embdInstSrXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_SR_XD_SHIFT, reg); }

const uint8_t BF_SR_XT_SHIFT = 17;
const uint8_t BF_SR_XT_NBITS = 5;
const uint32_t BF_SR_XT_MASK = 0x1f;
const bool BF_SR_XT_SIGNED = false;
inline constexpr RegId extrInstSrXt(EncInst inst) { return extrReg5(inst, BF_SR_XT_SHIFT); }
inline constexpr void embdInstSrXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_SR_XT_SHIFT, reg); }

const uint8_t BF_SR_FUNC_SHIFT = 26;
const uint8_t BF_SR_FUNC_NBITS = 3;
const uint32_t BF_SR_FUNC_MASK = 0x7;
const bool BF_SR_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstSrFunc(EncInst inst) { return extrUnsignedImm(inst, BF_SR_FUNC_SHIFT, BF_SR_FUNC_NBITS); }
inline constexpr void embdInstSrFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SR_FUNC_SHIFT, BF_SR_FUNC_MASK, imm); }

const uint8_t BF_SL_XS_SHIFT = 7;
const uint8_t BF_SL_XS_NBITS = 5;
const uint32_t BF_SL_XS_MASK = 0x1f;
const bool BF_SL_XS_SIGNED = false;
inline constexpr RegId extrInstSlXs(EncInst inst) { return extrReg5(inst, BF_SL_XS_SHIFT); }
inline constexpr void embdInstSlXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SL_XS_SHIFT, reg); }

const uint8_t BF_SL_XD_SHIFT = 12;
const uint8_t BF_SL_XD_NBITS = 5;
const uint32_t BF_SL_XD_MASK = 0x1f;
const bool BF_SL_XD_SIGNED = false;
inline constexpr RegId extrInstSlXd(EncInst inst) { return extrReg5(inst, BF_SL_XD_SHIFT); }
inline constexpr void embdInstSlXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_SL_XD_SHIFT, reg); }

const uint8_t BF_SL_XT_SHIFT = 17;
const uint8_t BF_SL_XT_NBITS = 5;
const uint32_t BF_SL_XT_MASK = 0x1f;
const bool BF_SL_XT_SIGNED = false;
inline constexpr RegId extrInstSlXt(EncInst inst) { return extrReg5(inst, BF_SL_XT_SHIFT); }
inline constexpr void embdInstSlXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_SL_XT_SHIFT, reg); }

const uint8_t BF_SL_FUNC_SHIFT = 26;
const uint8_t BF_SL_FUNC_NBITS = 3;
const uint32_t BF_SL_FUNC_MASK = 0x7;
const bool BF_SL_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstSlFunc(EncInst inst) { return extrUnsignedImm(inst, BF_SL_FUNC_SHIFT, BF_SL_FUNC_NBITS); }
inline constexpr void embdInstSlFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SL_FUNC_SHIFT, BF_SL_FUNC_MASK, imm); }

const uint8_t BF_SAR_XS_SHIFT = 7;
const uint8_t BF_SAR_XS_NBITS = 5;
const uint32_t BF_SAR_XS_MASK = 0x1f;
const bool BF_SAR_XS_SIGNED = false;
inline constexpr RegId extrInstSarXs(EncInst inst) { return extrReg5(inst, BF_SAR_XS_SHIFT); }
inline constexpr void embdInstSarXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_SAR_XS_SHIFT, reg); }

const uint8_t BF_SAR_XD_SHIFT = 12;
const uint8_t BF_SAR_XD_NBITS = 5;
const uint32_t BF_SAR_XD_MASK = 0x1f;
const bool BF_SAR_XD_SIGNED = false;
inline constexpr RegId extrInstSarXd(EncInst inst) { return extrReg5(inst, BF_SAR_XD_SHIFT); }
inline constexpr void embdInstSarXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_SAR_XD_SHIFT, reg); }

const uint8_t BF_SAR_XT_SHIFT = 17;
const uint8_t BF_SAR_XT_NBITS = 5;
const uint32_t BF_SAR_XT_MASK = 0x1f;
const bool BF_SAR_XT_SIGNED = false;
inline constexpr RegId extrInstSarXt(EncInst inst) { return extrReg5(inst, BF_SAR_XT_SHIFT); }
inline constexpr void embdInstSarXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_SAR_XT_SHIFT, reg); }

const uint8_t BF_SAR_FUNC_SHIFT = 26;
const uint8_t BF_SAR_FUNC_NBITS = 3;
const uint32_t BF_SAR_FUNC_MASK = 0x7;
const bool BF_SAR_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstSarFunc(EncInst inst) { return extrUnsignedImm(inst, BF_SAR_FUNC_SHIFT, BF_SAR_FUNC_NBITS); }
inline constexpr void embdInstSarFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SAR_FUNC_SHIFT, BF_SAR_FUNC_MASK, imm); }

const uint8_t BF_BCPYLL_XS_SHIFT = 7;
const uint8_t BF_BCPYLL_XS_NBITS = 5;
const uint32_t BF_BCPYLL_XS_MASK = 0x1f;
const bool BF_BCPYLL_XS_SIGNED = false;
inline constexpr RegId extrInstBcpyllXs(EncInst inst) { return extrReg5(inst, BF_BCPYLL_XS_SHIFT); }
inline constexpr void embdInstBcpyllXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_BCPYLL_XS_SHIFT, reg); }

const uint8_t BF_BCPYLL_XD_SHIFT = 12;
const uint8_t BF_BCPYLL_XD_NBITS = 5;
const uint32_t BF_BCPYLL_XD_MASK = 0x1f;
const bool BF_BCPYLL_XD_SIGNED = false;
inline constexpr RegId extrInstBcpyllXd(EncInst inst) { return extrReg5(inst, BF_BCPYLL_XD_SHIFT); }
inline constexpr void embdInstBcpyllXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_BCPYLL_XD_SHIFT, reg); }

const uint8_t BF_BCPYLL_XT_SHIFT = 17;
const uint8_t BF_BCPYLL_XT_NBITS = 5;
const uint32_t BF_BCPYLL_XT_MASK = 0x1f;
const bool BF_BCPYLL_XT_SIGNED = false;
inline constexpr RegId extrInstBcpyllXt(EncInst inst) { return extrReg5(inst, BF_BCPYLL_XT_SHIFT); }
inline constexpr void embdInstBcpyllXt(EncInst& inst, RegId reg) { embdReg5(inst, BF_BCPYLL_XT_SHIFT, reg); }

const uint8_t BF_MOVRR_XS_SHIFT = 7;
const uint8_t BF_MOVRR_XS_NBITS = 5;
const uint32_t BF_MOVRR_XS_MASK = 0x1f;
const bool BF_MOVRR_XS_SIGNED = false;
inline constexpr RegId extrInstMovrrXs(EncInst inst) { return extrReg5(inst, BF_MOVRR_XS_SHIFT); }
inline constexpr void embdInstMovrrXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVRR_XS_SHIFT, reg); }

const uint8_t BF_MOVRR_XD_SHIFT = 12;
const uint8_t BF_MOVRR_XD_NBITS = 5;
const uint32_t BF_MOVRR_XD_MASK = 0x1f;
const bool BF_MOVRR_XD_SIGNED = false;
inline constexpr RegId extrInstMovrrXd(EncInst inst) { return extrReg5(inst, BF_MOVRR_XD_SHIFT); }
inline constexpr void embdInstMovrrXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVRR_XD_SHIFT, reg); }

const uint8_t BF_MOVWLR_XS_SHIFT = 7;
const uint8_t BF_MOVWLR_XS_NBITS = 5;
const uint32_t BF_MOVWLR_XS_MASK = 0x1f;
const bool BF_MOVWLR_XS_SIGNED = false;
inline constexpr RegId extrInstMovwlrXs(EncInst inst) { return extrReg5(inst, BF_MOVWLR_XS_SHIFT); }
inline constexpr void embdInstMovwlrXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVWLR_XS_SHIFT, reg); }

const uint8_t BF_MOVWLR_XD_SHIFT = 12;
const uint8_t BF_MOVWLR_XD_NBITS = 5;
const uint32_t BF_MOVWLR_XD_MASK = 0x1f;
const bool BF_MOVWLR_XD_SIGNED = false;
inline constexpr RegId extrInstMovwlrXd(EncInst inst) { return extrReg5(inst, BF_MOVWLR_XD_SHIFT); }
inline constexpr void embdInstMovwlrXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVWLR_XD_SHIFT, reg); }

const uint8_t BF_MOVWLR_XB_SHIFT = 17;
const uint8_t BF_MOVWLR_XB_NBITS = 5;
const uint32_t BF_MOVWLR_XB_MASK = 0x1f;
const bool BF_MOVWLR_XB_SIGNED = false;
inline constexpr RegId extrInstMovwlrXb(EncInst inst) { return extrReg5(inst, BF_MOVWLR_XB_SHIFT); }
inline constexpr void embdInstMovwlrXb(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVWLR_XB_SHIFT, reg); }

const uint8_t BF_MOVWLR_SCALE_SHIFT = 22;
const uint8_t BF_MOVWLR_SCALE_NBITS = 3;
const uint32_t BF_MOVWLR_SCALE_MASK = 0x7;
const bool BF_MOVWLR_SCALE_SIGNED = false;
inline constexpr uint64_t extrInstMovwlrScale(EncInst inst) { return extrUnsignedImm(inst, BF_MOVWLR_SCALE_SHIFT, BF_MOVWLR_SCALE_NBITS); }
inline constexpr void embdInstMovwlrScale(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVWLR_SCALE_SHIFT, BF_MOVWLR_SCALE_MASK, imm); }

const uint8_t BF_MOVWLR_INC_SHIFT = 25;
const uint8_t BF_MOVWLR_INC_NBITS = 1;
const uint32_t BF_MOVWLR_INC_MASK = 0x1;
const bool BF_MOVWLR_INC_SIGNED = false;
inline constexpr uint64_t extrInstMovwlrInc(EncInst inst) { return extrUnsignedImm(inst, BF_MOVWLR_INC_SHIFT, BF_MOVWLR_INC_NBITS); }
inline constexpr void embdInstMovwlrInc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVWLR_INC_SHIFT, BF_MOVWLR_INC_MASK, imm); }

const uint8_t BF_MOVWRL_XS_SHIFT = 7;
const uint8_t BF_MOVWRL_XS_NBITS = 5;
const uint32_t BF_MOVWRL_XS_MASK = 0x1f;
const bool BF_MOVWRL_XS_SIGNED = false;
inline constexpr RegId extrInstMovwrlXs(EncInst inst) { return extrReg5(inst, BF_MOVWRL_XS_SHIFT); }
inline constexpr void embdInstMovwrlXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVWRL_XS_SHIFT, reg); }

const uint8_t BF_MOVWRL_XD_SHIFT = 12;
const uint8_t BF_MOVWRL_XD_NBITS = 5;
const uint32_t BF_MOVWRL_XD_MASK = 0x1f;
const bool BF_MOVWRL_XD_SIGNED = false;
inline constexpr RegId extrInstMovwrlXd(EncInst inst) { return extrReg5(inst, BF_MOVWRL_XD_SHIFT); }
inline constexpr void embdInstMovwrlXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVWRL_XD_SHIFT, reg); }

const uint8_t BF_MOVWRL_XB_SHIFT = 17;
const uint8_t BF_MOVWRL_XB_NBITS = 5;
const uint32_t BF_MOVWRL_XB_MASK = 0x1f;
const bool BF_MOVWRL_XB_SIGNED = false;
inline constexpr RegId extrInstMovwrlXb(EncInst inst) { return extrReg5(inst, BF_MOVWRL_XB_SHIFT); }
inline constexpr void embdInstMovwrlXb(EncInst& inst, RegId reg) { embdReg5(inst, BF_MOVWRL_XB_SHIFT, reg); }

const uint8_t BF_MOVWRL_SCALE_SHIFT = 22;
const uint8_t BF_MOVWRL_SCALE_NBITS = 3;
const uint32_t BF_MOVWRL_SCALE_MASK = 0x7;
const bool BF_MOVWRL_SCALE_SIGNED = false;
inline constexpr uint64_t extrInstMovwrlScale(EncInst inst) { return extrUnsignedImm(inst, BF_MOVWRL_SCALE_SHIFT, BF_MOVWRL_SCALE_NBITS); }
inline constexpr void embdInstMovwrlScale(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVWRL_SCALE_SHIFT, BF_MOVWRL_SCALE_MASK, imm); }

const uint8_t BF_MOVWRL_INC_SHIFT = 25;
const uint8_t BF_MOVWRL_INC_NBITS = 1;
const uint32_t BF_MOVWRL_INC_MASK = 0x1;
const bool BF_MOVWRL_INC_SIGNED = false;
inline constexpr uint64_t extrInstMovwrlInc(EncInst inst) { return extrUnsignedImm(inst, BF_MOVWRL_INC_SHIFT, BF_MOVWRL_INC_NBITS); }
inline constexpr void embdInstMovwrlInc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MOVWRL_INC_SHIFT, BF_MOVWRL_INC_MASK, imm); }

const uint8_t BF_BCPYOL_XOP_SHIFT = 7;
const uint8_t BF_BCPYOL_XOP_NBITS = 5;
const uint32_t BF_BCPYOL_XOP_MASK = 0x1f;
const bool BF_BCPYOL_XOP_SIGNED = false;
inline constexpr RegId extrInstBcpyolXop(EncInst inst) { return extrReg5(inst, BF_BCPYOL_XOP_SHIFT); }
inline constexpr void embdInstBcpyolXop(EncInst& inst, RegId reg) { embdReg5(inst, BF_BCPYOL_XOP_SHIFT, reg); }

const uint8_t BF_BCPYOL_XD_SHIFT = 12;
const uint8_t BF_BCPYOL_XD_NBITS = 5;
const uint32_t BF_BCPYOL_XD_MASK = 0x1f;
const bool BF_BCPYOL_XD_SIGNED = false;
inline constexpr RegId extrInstBcpyolXd(EncInst inst) { return extrReg5(inst, BF_BCPYOL_XD_SHIFT); }
inline constexpr void embdInstBcpyolXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_BCPYOL_XD_SHIFT, reg); }

const uint8_t BF_BCPYOL_XLENW_SHIFT = 17;
const uint8_t BF_BCPYOL_XLENW_NBITS = 5;
const uint32_t BF_BCPYOL_XLENW_MASK = 0x1f;
const bool BF_BCPYOL_XLENW_SIGNED = false;
inline constexpr RegId extrInstBcpyolXlenw(EncInst inst) { return extrReg5(inst, BF_BCPYOL_XLENW_SHIFT); }
inline constexpr void embdInstBcpyolXlenw(EncInst& inst, RegId reg) { embdReg5(inst, BF_BCPYOL_XLENW_SHIFT, reg); }

const uint8_t BF_FMADD_64_XS_SHIFT = 7;
const uint8_t BF_FMADD_64_XS_NBITS = 5;
const uint32_t BF_FMADD_64_XS_MASK = 0x1f;
const bool BF_FMADD_64_XS_SIGNED = false;
inline constexpr RegId extrInstFmadd_64Xs(EncInst inst) { return extrReg5(inst, BF_FMADD_64_XS_SHIFT); }
inline constexpr void embdInstFmadd_64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMADD_64_XS_SHIFT, reg); }

const uint8_t BF_FMADD_64_XD_SHIFT = 12;
const uint8_t BF_FMADD_64_XD_NBITS = 5;
const uint32_t BF_FMADD_64_XD_MASK = 0x1f;
const bool BF_FMADD_64_XD_SIGNED = false;
inline constexpr RegId extrInstFmadd_64Xd(EncInst inst) { return extrReg5(inst, BF_FMADD_64_XD_SHIFT); }
inline constexpr void embdInstFmadd_64Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMADD_64_XD_SHIFT, reg); }

const uint8_t BF_FMADD_64_XT_SHIFT = 17;
const uint8_t BF_FMADD_64_XT_NBITS = 5;
const uint32_t BF_FMADD_64_XT_MASK = 0x1f;
const bool BF_FMADD_64_XT_SIGNED = false;
inline constexpr RegId extrInstFmadd_64Xt(EncInst inst) { return extrReg5(inst, BF_FMADD_64_XT_SHIFT); }
inline constexpr void embdInstFmadd_64Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMADD_64_XT_SHIFT, reg); }

const uint8_t BF_FMADD_64_FUNC_SHIFT = 26;
const uint8_t BF_FMADD_64_FUNC_NBITS = 3;
const uint32_t BF_FMADD_64_FUNC_MASK = 0x7;
const bool BF_FMADD_64_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFmadd_64Func(EncInst inst) { return extrUnsignedImm(inst, BF_FMADD_64_FUNC_SHIFT, BF_FMADD_64_FUNC_NBITS); }
inline constexpr void embdInstFmadd_64Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMADD_64_FUNC_SHIFT, BF_FMADD_64_FUNC_MASK, imm); }

const uint8_t BF_FMADD_64_PRECISION_SHIFT = 29;
const uint8_t BF_FMADD_64_PRECISION_NBITS = 3;
const uint32_t BF_FMADD_64_PRECISION_MASK = 0x7;
const bool BF_FMADD_64_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFmadd_64Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FMADD_64_PRECISION_SHIFT, BF_FMADD_64_PRECISION_NBITS); }
inline constexpr void embdInstFmadd_64Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMADD_64_PRECISION_SHIFT, BF_FMADD_64_PRECISION_MASK, imm); }

const uint8_t BF_FADD_64_XS_SHIFT = 7;
const uint8_t BF_FADD_64_XS_NBITS = 5;
const uint32_t BF_FADD_64_XS_MASK = 0x1f;
const bool BF_FADD_64_XS_SIGNED = false;
inline constexpr RegId extrInstFadd_64Xs(EncInst inst) { return extrReg5(inst, BF_FADD_64_XS_SHIFT); }
inline constexpr void embdInstFadd_64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FADD_64_XS_SHIFT, reg); }

const uint8_t BF_FADD_64_XD_SHIFT = 12;
const uint8_t BF_FADD_64_XD_NBITS = 5;
const uint32_t BF_FADD_64_XD_MASK = 0x1f;
const bool BF_FADD_64_XD_SIGNED = false;
inline constexpr RegId extrInstFadd_64Xd(EncInst inst) { return extrReg5(inst, BF_FADD_64_XD_SHIFT); }
inline constexpr void embdInstFadd_64Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FADD_64_XD_SHIFT, reg); }

const uint8_t BF_FADD_64_XT_SHIFT = 17;
const uint8_t BF_FADD_64_XT_NBITS = 5;
const uint32_t BF_FADD_64_XT_MASK = 0x1f;
const bool BF_FADD_64_XT_SIGNED = false;
inline constexpr RegId extrInstFadd_64Xt(EncInst inst) { return extrReg5(inst, BF_FADD_64_XT_SHIFT); }
inline constexpr void embdInstFadd_64Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FADD_64_XT_SHIFT, reg); }

const uint8_t BF_FADD_64_FUNC_SHIFT = 26;
const uint8_t BF_FADD_64_FUNC_NBITS = 3;
const uint32_t BF_FADD_64_FUNC_MASK = 0x7;
const bool BF_FADD_64_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFadd_64Func(EncInst inst) { return extrUnsignedImm(inst, BF_FADD_64_FUNC_SHIFT, BF_FADD_64_FUNC_NBITS); }
inline constexpr void embdInstFadd_64Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FADD_64_FUNC_SHIFT, BF_FADD_64_FUNC_MASK, imm); }

const uint8_t BF_FADD_64_PRECISION_SHIFT = 29;
const uint8_t BF_FADD_64_PRECISION_NBITS = 3;
const uint32_t BF_FADD_64_PRECISION_MASK = 0x7;
const bool BF_FADD_64_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFadd_64Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FADD_64_PRECISION_SHIFT, BF_FADD_64_PRECISION_NBITS); }
inline constexpr void embdInstFadd_64Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FADD_64_PRECISION_SHIFT, BF_FADD_64_PRECISION_MASK, imm); }

const uint8_t BF_FSUB_64_XS_SHIFT = 7;
const uint8_t BF_FSUB_64_XS_NBITS = 5;
const uint32_t BF_FSUB_64_XS_MASK = 0x1f;
const bool BF_FSUB_64_XS_SIGNED = false;
inline constexpr RegId extrInstFsub_64Xs(EncInst inst) { return extrReg5(inst, BF_FSUB_64_XS_SHIFT); }
inline constexpr void embdInstFsub_64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSUB_64_XS_SHIFT, reg); }

const uint8_t BF_FSUB_64_XD_SHIFT = 12;
const uint8_t BF_FSUB_64_XD_NBITS = 5;
const uint32_t BF_FSUB_64_XD_MASK = 0x1f;
const bool BF_FSUB_64_XD_SIGNED = false;
inline constexpr RegId extrInstFsub_64Xd(EncInst inst) { return extrReg5(inst, BF_FSUB_64_XD_SHIFT); }
inline constexpr void embdInstFsub_64Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSUB_64_XD_SHIFT, reg); }

const uint8_t BF_FSUB_64_XT_SHIFT = 17;
const uint8_t BF_FSUB_64_XT_NBITS = 5;
const uint32_t BF_FSUB_64_XT_MASK = 0x1f;
const bool BF_FSUB_64_XT_SIGNED = false;
inline constexpr RegId extrInstFsub_64Xt(EncInst inst) { return extrReg5(inst, BF_FSUB_64_XT_SHIFT); }
inline constexpr void embdInstFsub_64Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSUB_64_XT_SHIFT, reg); }

const uint8_t BF_FSUB_64_FUNC_SHIFT = 26;
const uint8_t BF_FSUB_64_FUNC_NBITS = 3;
const uint32_t BF_FSUB_64_FUNC_MASK = 0x7;
const bool BF_FSUB_64_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFsub_64Func(EncInst inst) { return extrUnsignedImm(inst, BF_FSUB_64_FUNC_SHIFT, BF_FSUB_64_FUNC_NBITS); }
inline constexpr void embdInstFsub_64Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSUB_64_FUNC_SHIFT, BF_FSUB_64_FUNC_MASK, imm); }

const uint8_t BF_FSUB_64_PRECISION_SHIFT = 29;
const uint8_t BF_FSUB_64_PRECISION_NBITS = 3;
const uint32_t BF_FSUB_64_PRECISION_MASK = 0x7;
const bool BF_FSUB_64_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFsub_64Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FSUB_64_PRECISION_SHIFT, BF_FSUB_64_PRECISION_NBITS); }
inline constexpr void embdInstFsub_64Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSUB_64_PRECISION_SHIFT, BF_FSUB_64_PRECISION_MASK, imm); }

const uint8_t BF_FMUL_64_XS_SHIFT = 7;
const uint8_t BF_FMUL_64_XS_NBITS = 5;
const uint32_t BF_FMUL_64_XS_MASK = 0x1f;
const bool BF_FMUL_64_XS_SIGNED = false;
inline constexpr RegId extrInstFmul_64Xs(EncInst inst) { return extrReg5(inst, BF_FMUL_64_XS_SHIFT); }
inline constexpr void embdInstFmul_64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMUL_64_XS_SHIFT, reg); }

const uint8_t BF_FMUL_64_XD_SHIFT = 12;
const uint8_t BF_FMUL_64_XD_NBITS = 5;
const uint32_t BF_FMUL_64_XD_MASK = 0x1f;
const bool BF_FMUL_64_XD_SIGNED = false;
inline constexpr RegId extrInstFmul_64Xd(EncInst inst) { return extrReg5(inst, BF_FMUL_64_XD_SHIFT); }
inline constexpr void embdInstFmul_64Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMUL_64_XD_SHIFT, reg); }

const uint8_t BF_FMUL_64_XT_SHIFT = 17;
const uint8_t BF_FMUL_64_XT_NBITS = 5;
const uint32_t BF_FMUL_64_XT_MASK = 0x1f;
const bool BF_FMUL_64_XT_SIGNED = false;
inline constexpr RegId extrInstFmul_64Xt(EncInst inst) { return extrReg5(inst, BF_FMUL_64_XT_SHIFT); }
inline constexpr void embdInstFmul_64Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMUL_64_XT_SHIFT, reg); }

const uint8_t BF_FMUL_64_FUNC_SHIFT = 26;
const uint8_t BF_FMUL_64_FUNC_NBITS = 3;
const uint32_t BF_FMUL_64_FUNC_MASK = 0x7;
const bool BF_FMUL_64_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFmul_64Func(EncInst inst) { return extrUnsignedImm(inst, BF_FMUL_64_FUNC_SHIFT, BF_FMUL_64_FUNC_NBITS); }
inline constexpr void embdInstFmul_64Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMUL_64_FUNC_SHIFT, BF_FMUL_64_FUNC_MASK, imm); }

const uint8_t BF_FMUL_64_PRECISION_SHIFT = 29;
const uint8_t BF_FMUL_64_PRECISION_NBITS = 3;
const uint32_t BF_FMUL_64_PRECISION_MASK = 0x7;
const bool BF_FMUL_64_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFmul_64Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FMUL_64_PRECISION_SHIFT, BF_FMUL_64_PRECISION_NBITS); }
inline constexpr void embdInstFmul_64Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMUL_64_PRECISION_SHIFT, BF_FMUL_64_PRECISION_MASK, imm); }

const uint8_t BF_FDIV_64_XS_SHIFT = 7;
const uint8_t BF_FDIV_64_XS_NBITS = 5;
const uint32_t BF_FDIV_64_XS_MASK = 0x1f;
const bool BF_FDIV_64_XS_SIGNED = false;
inline constexpr RegId extrInstFdiv_64Xs(EncInst inst) { return extrReg5(inst, BF_FDIV_64_XS_SHIFT); }
inline constexpr void embdInstFdiv_64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FDIV_64_XS_SHIFT, reg); }

const uint8_t BF_FDIV_64_XD_SHIFT = 12;
const uint8_t BF_FDIV_64_XD_NBITS = 5;
const uint32_t BF_FDIV_64_XD_MASK = 0x1f;
const bool BF_FDIV_64_XD_SIGNED = false;
inline constexpr RegId extrInstFdiv_64Xd(EncInst inst) { return extrReg5(inst, BF_FDIV_64_XD_SHIFT); }
inline constexpr void embdInstFdiv_64Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FDIV_64_XD_SHIFT, reg); }

const uint8_t BF_FDIV_64_XT_SHIFT = 17;
const uint8_t BF_FDIV_64_XT_NBITS = 5;
const uint32_t BF_FDIV_64_XT_MASK = 0x1f;
const bool BF_FDIV_64_XT_SIGNED = false;
inline constexpr RegId extrInstFdiv_64Xt(EncInst inst) { return extrReg5(inst, BF_FDIV_64_XT_SHIFT); }
inline constexpr void embdInstFdiv_64Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FDIV_64_XT_SHIFT, reg); }

const uint8_t BF_FDIV_64_FUNC_SHIFT = 26;
const uint8_t BF_FDIV_64_FUNC_NBITS = 3;
const uint32_t BF_FDIV_64_FUNC_MASK = 0x7;
const bool BF_FDIV_64_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFdiv_64Func(EncInst inst) { return extrUnsignedImm(inst, BF_FDIV_64_FUNC_SHIFT, BF_FDIV_64_FUNC_NBITS); }
inline constexpr void embdInstFdiv_64Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FDIV_64_FUNC_SHIFT, BF_FDIV_64_FUNC_MASK, imm); }

const uint8_t BF_FDIV_64_PRECISION_SHIFT = 29;
const uint8_t BF_FDIV_64_PRECISION_NBITS = 3;
const uint32_t BF_FDIV_64_PRECISION_MASK = 0x7;
const bool BF_FDIV_64_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFdiv_64Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FDIV_64_PRECISION_SHIFT, BF_FDIV_64_PRECISION_NBITS); }
inline constexpr void embdInstFdiv_64Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FDIV_64_PRECISION_SHIFT, BF_FDIV_64_PRECISION_MASK, imm); }

const uint8_t BF_FSQRT_64_XS_SHIFT = 7;
const uint8_t BF_FSQRT_64_XS_NBITS = 5;
const uint32_t BF_FSQRT_64_XS_MASK = 0x1f;
const bool BF_FSQRT_64_XS_SIGNED = false;
inline constexpr RegId extrInstFsqrt_64Xs(EncInst inst) { return extrReg5(inst, BF_FSQRT_64_XS_SHIFT); }
inline constexpr void embdInstFsqrt_64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSQRT_64_XS_SHIFT, reg); }

const uint8_t BF_FSQRT_64_XD_SHIFT = 12;
const uint8_t BF_FSQRT_64_XD_NBITS = 5;
const uint32_t BF_FSQRT_64_XD_MASK = 0x1f;
const bool BF_FSQRT_64_XD_SIGNED = false;
inline constexpr RegId extrInstFsqrt_64Xd(EncInst inst) { return extrReg5(inst, BF_FSQRT_64_XD_SHIFT); }
inline constexpr void embdInstFsqrt_64Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSQRT_64_XD_SHIFT, reg); }

const uint8_t BF_FSQRT_64_XT_SHIFT = 17;
const uint8_t BF_FSQRT_64_XT_NBITS = 5;
const uint32_t BF_FSQRT_64_XT_MASK = 0x1f;
const bool BF_FSQRT_64_XT_SIGNED = false;
inline constexpr RegId extrInstFsqrt_64Xt(EncInst inst) { return extrReg5(inst, BF_FSQRT_64_XT_SHIFT); }
inline constexpr void embdInstFsqrt_64Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSQRT_64_XT_SHIFT, reg); }

const uint8_t BF_FSQRT_64_FUNC_SHIFT = 26;
const uint8_t BF_FSQRT_64_FUNC_NBITS = 3;
const uint32_t BF_FSQRT_64_FUNC_MASK = 0x7;
const bool BF_FSQRT_64_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFsqrt_64Func(EncInst inst) { return extrUnsignedImm(inst, BF_FSQRT_64_FUNC_SHIFT, BF_FSQRT_64_FUNC_NBITS); }
inline constexpr void embdInstFsqrt_64Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSQRT_64_FUNC_SHIFT, BF_FSQRT_64_FUNC_MASK, imm); }

const uint8_t BF_FSQRT_64_PRECISION_SHIFT = 29;
const uint8_t BF_FSQRT_64_PRECISION_NBITS = 3;
const uint32_t BF_FSQRT_64_PRECISION_MASK = 0x7;
const bool BF_FSQRT_64_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFsqrt_64Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FSQRT_64_PRECISION_SHIFT, BF_FSQRT_64_PRECISION_NBITS); }
inline constexpr void embdInstFsqrt_64Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSQRT_64_PRECISION_SHIFT, BF_FSQRT_64_PRECISION_MASK, imm); }

const uint8_t BF_FEXP_64_XS_SHIFT = 7;
const uint8_t BF_FEXP_64_XS_NBITS = 5;
const uint32_t BF_FEXP_64_XS_MASK = 0x1f;
const bool BF_FEXP_64_XS_SIGNED = false;
inline constexpr RegId extrInstFexp_64Xs(EncInst inst) { return extrReg5(inst, BF_FEXP_64_XS_SHIFT); }
inline constexpr void embdInstFexp_64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FEXP_64_XS_SHIFT, reg); }

const uint8_t BF_FEXP_64_XD_SHIFT = 12;
const uint8_t BF_FEXP_64_XD_NBITS = 5;
const uint32_t BF_FEXP_64_XD_MASK = 0x1f;
const bool BF_FEXP_64_XD_SIGNED = false;
inline constexpr RegId extrInstFexp_64Xd(EncInst inst) { return extrReg5(inst, BF_FEXP_64_XD_SHIFT); }
inline constexpr void embdInstFexp_64Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FEXP_64_XD_SHIFT, reg); }

const uint8_t BF_FEXP_64_XT_SHIFT = 17;
const uint8_t BF_FEXP_64_XT_NBITS = 5;
const uint32_t BF_FEXP_64_XT_MASK = 0x1f;
const bool BF_FEXP_64_XT_SIGNED = false;
inline constexpr RegId extrInstFexp_64Xt(EncInst inst) { return extrReg5(inst, BF_FEXP_64_XT_SHIFT); }
inline constexpr void embdInstFexp_64Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FEXP_64_XT_SHIFT, reg); }

const uint8_t BF_FEXP_64_FUNC_SHIFT = 26;
const uint8_t BF_FEXP_64_FUNC_NBITS = 3;
const uint32_t BF_FEXP_64_FUNC_MASK = 0x7;
const bool BF_FEXP_64_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFexp_64Func(EncInst inst) { return extrUnsignedImm(inst, BF_FEXP_64_FUNC_SHIFT, BF_FEXP_64_FUNC_NBITS); }
inline constexpr void embdInstFexp_64Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FEXP_64_FUNC_SHIFT, BF_FEXP_64_FUNC_MASK, imm); }

const uint8_t BF_FEXP_64_PRECISION_SHIFT = 29;
const uint8_t BF_FEXP_64_PRECISION_NBITS = 3;
const uint32_t BF_FEXP_64_PRECISION_MASK = 0x7;
const bool BF_FEXP_64_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFexp_64Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FEXP_64_PRECISION_SHIFT, BF_FEXP_64_PRECISION_NBITS); }
inline constexpr void embdInstFexp_64Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FEXP_64_PRECISION_SHIFT, BF_FEXP_64_PRECISION_MASK, imm); }

const uint8_t BF_FMADD_32_XS_SHIFT = 7;
const uint8_t BF_FMADD_32_XS_NBITS = 5;
const uint32_t BF_FMADD_32_XS_MASK = 0x1f;
const bool BF_FMADD_32_XS_SIGNED = false;
inline constexpr RegId extrInstFmadd_32Xs(EncInst inst) { return extrReg5(inst, BF_FMADD_32_XS_SHIFT); }
inline constexpr void embdInstFmadd_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMADD_32_XS_SHIFT, reg); }

const uint8_t BF_FMADD_32_XD_SHIFT = 12;
const uint8_t BF_FMADD_32_XD_NBITS = 5;
const uint32_t BF_FMADD_32_XD_MASK = 0x1f;
const bool BF_FMADD_32_XD_SIGNED = false;
inline constexpr RegId extrInstFmadd_32Xd(EncInst inst) { return extrReg5(inst, BF_FMADD_32_XD_SHIFT); }
inline constexpr void embdInstFmadd_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMADD_32_XD_SHIFT, reg); }

const uint8_t BF_FMADD_32_XT_SHIFT = 17;
const uint8_t BF_FMADD_32_XT_NBITS = 5;
const uint32_t BF_FMADD_32_XT_MASK = 0x1f;
const bool BF_FMADD_32_XT_SIGNED = false;
inline constexpr RegId extrInstFmadd_32Xt(EncInst inst) { return extrReg5(inst, BF_FMADD_32_XT_SHIFT); }
inline constexpr void embdInstFmadd_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMADD_32_XT_SHIFT, reg); }

const uint8_t BF_FMADD_32_FUNC_SHIFT = 26;
const uint8_t BF_FMADD_32_FUNC_NBITS = 3;
const uint32_t BF_FMADD_32_FUNC_MASK = 0x7;
const bool BF_FMADD_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFmadd_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_FMADD_32_FUNC_SHIFT, BF_FMADD_32_FUNC_NBITS); }
inline constexpr void embdInstFmadd_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMADD_32_FUNC_SHIFT, BF_FMADD_32_FUNC_MASK, imm); }

const uint8_t BF_FMADD_32_PRECISION_SHIFT = 29;
const uint8_t BF_FMADD_32_PRECISION_NBITS = 3;
const uint32_t BF_FMADD_32_PRECISION_MASK = 0x7;
const bool BF_FMADD_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFmadd_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FMADD_32_PRECISION_SHIFT, BF_FMADD_32_PRECISION_NBITS); }
inline constexpr void embdInstFmadd_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMADD_32_PRECISION_SHIFT, BF_FMADD_32_PRECISION_MASK, imm); }

const uint8_t BF_FADD_32_XS_SHIFT = 7;
const uint8_t BF_FADD_32_XS_NBITS = 5;
const uint32_t BF_FADD_32_XS_MASK = 0x1f;
const bool BF_FADD_32_XS_SIGNED = false;
inline constexpr RegId extrInstFadd_32Xs(EncInst inst) { return extrReg5(inst, BF_FADD_32_XS_SHIFT); }
inline constexpr void embdInstFadd_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FADD_32_XS_SHIFT, reg); }

const uint8_t BF_FADD_32_XD_SHIFT = 12;
const uint8_t BF_FADD_32_XD_NBITS = 5;
const uint32_t BF_FADD_32_XD_MASK = 0x1f;
const bool BF_FADD_32_XD_SIGNED = false;
inline constexpr RegId extrInstFadd_32Xd(EncInst inst) { return extrReg5(inst, BF_FADD_32_XD_SHIFT); }
inline constexpr void embdInstFadd_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FADD_32_XD_SHIFT, reg); }

const uint8_t BF_FADD_32_XT_SHIFT = 17;
const uint8_t BF_FADD_32_XT_NBITS = 5;
const uint32_t BF_FADD_32_XT_MASK = 0x1f;
const bool BF_FADD_32_XT_SIGNED = false;
inline constexpr RegId extrInstFadd_32Xt(EncInst inst) { return extrReg5(inst, BF_FADD_32_XT_SHIFT); }
inline constexpr void embdInstFadd_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FADD_32_XT_SHIFT, reg); }

const uint8_t BF_FADD_32_FUNC_SHIFT = 26;
const uint8_t BF_FADD_32_FUNC_NBITS = 3;
const uint32_t BF_FADD_32_FUNC_MASK = 0x7;
const bool BF_FADD_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFadd_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_FADD_32_FUNC_SHIFT, BF_FADD_32_FUNC_NBITS); }
inline constexpr void embdInstFadd_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FADD_32_FUNC_SHIFT, BF_FADD_32_FUNC_MASK, imm); }

const uint8_t BF_FADD_32_PRECISION_SHIFT = 29;
const uint8_t BF_FADD_32_PRECISION_NBITS = 3;
const uint32_t BF_FADD_32_PRECISION_MASK = 0x7;
const bool BF_FADD_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFadd_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FADD_32_PRECISION_SHIFT, BF_FADD_32_PRECISION_NBITS); }
inline constexpr void embdInstFadd_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FADD_32_PRECISION_SHIFT, BF_FADD_32_PRECISION_MASK, imm); }

const uint8_t BF_FSUB_32_XS_SHIFT = 7;
const uint8_t BF_FSUB_32_XS_NBITS = 5;
const uint32_t BF_FSUB_32_XS_MASK = 0x1f;
const bool BF_FSUB_32_XS_SIGNED = false;
inline constexpr RegId extrInstFsub_32Xs(EncInst inst) { return extrReg5(inst, BF_FSUB_32_XS_SHIFT); }
inline constexpr void embdInstFsub_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSUB_32_XS_SHIFT, reg); }

const uint8_t BF_FSUB_32_XD_SHIFT = 12;
const uint8_t BF_FSUB_32_XD_NBITS = 5;
const uint32_t BF_FSUB_32_XD_MASK = 0x1f;
const bool BF_FSUB_32_XD_SIGNED = false;
inline constexpr RegId extrInstFsub_32Xd(EncInst inst) { return extrReg5(inst, BF_FSUB_32_XD_SHIFT); }
inline constexpr void embdInstFsub_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSUB_32_XD_SHIFT, reg); }

const uint8_t BF_FSUB_32_XT_SHIFT = 17;
const uint8_t BF_FSUB_32_XT_NBITS = 5;
const uint32_t BF_FSUB_32_XT_MASK = 0x1f;
const bool BF_FSUB_32_XT_SIGNED = false;
inline constexpr RegId extrInstFsub_32Xt(EncInst inst) { return extrReg5(inst, BF_FSUB_32_XT_SHIFT); }
inline constexpr void embdInstFsub_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSUB_32_XT_SHIFT, reg); }

const uint8_t BF_FSUB_32_FUNC_SHIFT = 26;
const uint8_t BF_FSUB_32_FUNC_NBITS = 3;
const uint32_t BF_FSUB_32_FUNC_MASK = 0x7;
const bool BF_FSUB_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFsub_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_FSUB_32_FUNC_SHIFT, BF_FSUB_32_FUNC_NBITS); }
inline constexpr void embdInstFsub_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSUB_32_FUNC_SHIFT, BF_FSUB_32_FUNC_MASK, imm); }

const uint8_t BF_FSUB_32_PRECISION_SHIFT = 29;
const uint8_t BF_FSUB_32_PRECISION_NBITS = 3;
const uint32_t BF_FSUB_32_PRECISION_MASK = 0x7;
const bool BF_FSUB_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFsub_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FSUB_32_PRECISION_SHIFT, BF_FSUB_32_PRECISION_NBITS); }
inline constexpr void embdInstFsub_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSUB_32_PRECISION_SHIFT, BF_FSUB_32_PRECISION_MASK, imm); }

const uint8_t BF_FMUL_32_XS_SHIFT = 7;
const uint8_t BF_FMUL_32_XS_NBITS = 5;
const uint32_t BF_FMUL_32_XS_MASK = 0x1f;
const bool BF_FMUL_32_XS_SIGNED = false;
inline constexpr RegId extrInstFmul_32Xs(EncInst inst) { return extrReg5(inst, BF_FMUL_32_XS_SHIFT); }
inline constexpr void embdInstFmul_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMUL_32_XS_SHIFT, reg); }

const uint8_t BF_FMUL_32_XD_SHIFT = 12;
const uint8_t BF_FMUL_32_XD_NBITS = 5;
const uint32_t BF_FMUL_32_XD_MASK = 0x1f;
const bool BF_FMUL_32_XD_SIGNED = false;
inline constexpr RegId extrInstFmul_32Xd(EncInst inst) { return extrReg5(inst, BF_FMUL_32_XD_SHIFT); }
inline constexpr void embdInstFmul_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMUL_32_XD_SHIFT, reg); }

const uint8_t BF_FMUL_32_XT_SHIFT = 17;
const uint8_t BF_FMUL_32_XT_NBITS = 5;
const uint32_t BF_FMUL_32_XT_MASK = 0x1f;
const bool BF_FMUL_32_XT_SIGNED = false;
inline constexpr RegId extrInstFmul_32Xt(EncInst inst) { return extrReg5(inst, BF_FMUL_32_XT_SHIFT); }
inline constexpr void embdInstFmul_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMUL_32_XT_SHIFT, reg); }

const uint8_t BF_FMUL_32_FUNC_SHIFT = 26;
const uint8_t BF_FMUL_32_FUNC_NBITS = 3;
const uint32_t BF_FMUL_32_FUNC_MASK = 0x7;
const bool BF_FMUL_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFmul_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_FMUL_32_FUNC_SHIFT, BF_FMUL_32_FUNC_NBITS); }
inline constexpr void embdInstFmul_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMUL_32_FUNC_SHIFT, BF_FMUL_32_FUNC_MASK, imm); }

const uint8_t BF_FMUL_32_PRECISION_SHIFT = 29;
const uint8_t BF_FMUL_32_PRECISION_NBITS = 3;
const uint32_t BF_FMUL_32_PRECISION_MASK = 0x7;
const bool BF_FMUL_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFmul_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FMUL_32_PRECISION_SHIFT, BF_FMUL_32_PRECISION_NBITS); }
inline constexpr void embdInstFmul_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMUL_32_PRECISION_SHIFT, BF_FMUL_32_PRECISION_MASK, imm); }

const uint8_t BF_FDIV_32_XS_SHIFT = 7;
const uint8_t BF_FDIV_32_XS_NBITS = 5;
const uint32_t BF_FDIV_32_XS_MASK = 0x1f;
const bool BF_FDIV_32_XS_SIGNED = false;
inline constexpr RegId extrInstFdiv_32Xs(EncInst inst) { return extrReg5(inst, BF_FDIV_32_XS_SHIFT); }
inline constexpr void embdInstFdiv_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FDIV_32_XS_SHIFT, reg); }

const uint8_t BF_FDIV_32_XD_SHIFT = 12;
const uint8_t BF_FDIV_32_XD_NBITS = 5;
const uint32_t BF_FDIV_32_XD_MASK = 0x1f;
const bool BF_FDIV_32_XD_SIGNED = false;
inline constexpr RegId extrInstFdiv_32Xd(EncInst inst) { return extrReg5(inst, BF_FDIV_32_XD_SHIFT); }
inline constexpr void embdInstFdiv_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FDIV_32_XD_SHIFT, reg); }

const uint8_t BF_FDIV_32_XT_SHIFT = 17;
const uint8_t BF_FDIV_32_XT_NBITS = 5;
const uint32_t BF_FDIV_32_XT_MASK = 0x1f;
const bool BF_FDIV_32_XT_SIGNED = false;
inline constexpr RegId extrInstFdiv_32Xt(EncInst inst) { return extrReg5(inst, BF_FDIV_32_XT_SHIFT); }
inline constexpr void embdInstFdiv_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FDIV_32_XT_SHIFT, reg); }

const uint8_t BF_FDIV_32_FUNC_SHIFT = 26;
const uint8_t BF_FDIV_32_FUNC_NBITS = 3;
const uint32_t BF_FDIV_32_FUNC_MASK = 0x7;
const bool BF_FDIV_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFdiv_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_FDIV_32_FUNC_SHIFT, BF_FDIV_32_FUNC_NBITS); }
inline constexpr void embdInstFdiv_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FDIV_32_FUNC_SHIFT, BF_FDIV_32_FUNC_MASK, imm); }

const uint8_t BF_FDIV_32_PRECISION_SHIFT = 29;
const uint8_t BF_FDIV_32_PRECISION_NBITS = 3;
const uint32_t BF_FDIV_32_PRECISION_MASK = 0x7;
const bool BF_FDIV_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFdiv_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FDIV_32_PRECISION_SHIFT, BF_FDIV_32_PRECISION_NBITS); }
inline constexpr void embdInstFdiv_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FDIV_32_PRECISION_SHIFT, BF_FDIV_32_PRECISION_MASK, imm); }

const uint8_t BF_FSQRT_32_XS_SHIFT = 7;
const uint8_t BF_FSQRT_32_XS_NBITS = 5;
const uint32_t BF_FSQRT_32_XS_MASK = 0x1f;
const bool BF_FSQRT_32_XS_SIGNED = false;
inline constexpr RegId extrInstFsqrt_32Xs(EncInst inst) { return extrReg5(inst, BF_FSQRT_32_XS_SHIFT); }
inline constexpr void embdInstFsqrt_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSQRT_32_XS_SHIFT, reg); }

const uint8_t BF_FSQRT_32_XD_SHIFT = 12;
const uint8_t BF_FSQRT_32_XD_NBITS = 5;
const uint32_t BF_FSQRT_32_XD_MASK = 0x1f;
const bool BF_FSQRT_32_XD_SIGNED = false;
inline constexpr RegId extrInstFsqrt_32Xd(EncInst inst) { return extrReg5(inst, BF_FSQRT_32_XD_SHIFT); }
inline constexpr void embdInstFsqrt_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSQRT_32_XD_SHIFT, reg); }

const uint8_t BF_FSQRT_32_XT_SHIFT = 17;
const uint8_t BF_FSQRT_32_XT_NBITS = 5;
const uint32_t BF_FSQRT_32_XT_MASK = 0x1f;
const bool BF_FSQRT_32_XT_SIGNED = false;
inline constexpr RegId extrInstFsqrt_32Xt(EncInst inst) { return extrReg5(inst, BF_FSQRT_32_XT_SHIFT); }
inline constexpr void embdInstFsqrt_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSQRT_32_XT_SHIFT, reg); }

const uint8_t BF_FSQRT_32_FUNC_SHIFT = 26;
const uint8_t BF_FSQRT_32_FUNC_NBITS = 3;
const uint32_t BF_FSQRT_32_FUNC_MASK = 0x7;
const bool BF_FSQRT_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFsqrt_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_FSQRT_32_FUNC_SHIFT, BF_FSQRT_32_FUNC_NBITS); }
inline constexpr void embdInstFsqrt_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSQRT_32_FUNC_SHIFT, BF_FSQRT_32_FUNC_MASK, imm); }

const uint8_t BF_FSQRT_32_PRECISION_SHIFT = 29;
const uint8_t BF_FSQRT_32_PRECISION_NBITS = 3;
const uint32_t BF_FSQRT_32_PRECISION_MASK = 0x7;
const bool BF_FSQRT_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFsqrt_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FSQRT_32_PRECISION_SHIFT, BF_FSQRT_32_PRECISION_NBITS); }
inline constexpr void embdInstFsqrt_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSQRT_32_PRECISION_SHIFT, BF_FSQRT_32_PRECISION_MASK, imm); }

const uint8_t BF_FEXP_32_XS_SHIFT = 7;
const uint8_t BF_FEXP_32_XS_NBITS = 5;
const uint32_t BF_FEXP_32_XS_MASK = 0x1f;
const bool BF_FEXP_32_XS_SIGNED = false;
inline constexpr RegId extrInstFexp_32Xs(EncInst inst) { return extrReg5(inst, BF_FEXP_32_XS_SHIFT); }
inline constexpr void embdInstFexp_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FEXP_32_XS_SHIFT, reg); }

const uint8_t BF_FEXP_32_XD_SHIFT = 12;
const uint8_t BF_FEXP_32_XD_NBITS = 5;
const uint32_t BF_FEXP_32_XD_MASK = 0x1f;
const bool BF_FEXP_32_XD_SIGNED = false;
inline constexpr RegId extrInstFexp_32Xd(EncInst inst) { return extrReg5(inst, BF_FEXP_32_XD_SHIFT); }
inline constexpr void embdInstFexp_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FEXP_32_XD_SHIFT, reg); }

const uint8_t BF_FEXP_32_XT_SHIFT = 17;
const uint8_t BF_FEXP_32_XT_NBITS = 5;
const uint32_t BF_FEXP_32_XT_MASK = 0x1f;
const bool BF_FEXP_32_XT_SIGNED = false;
inline constexpr RegId extrInstFexp_32Xt(EncInst inst) { return extrReg5(inst, BF_FEXP_32_XT_SHIFT); }
inline constexpr void embdInstFexp_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FEXP_32_XT_SHIFT, reg); }

const uint8_t BF_FEXP_32_FUNC_SHIFT = 26;
const uint8_t BF_FEXP_32_FUNC_NBITS = 3;
const uint32_t BF_FEXP_32_FUNC_MASK = 0x7;
const bool BF_FEXP_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFexp_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_FEXP_32_FUNC_SHIFT, BF_FEXP_32_FUNC_NBITS); }
inline constexpr void embdInstFexp_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FEXP_32_FUNC_SHIFT, BF_FEXP_32_FUNC_MASK, imm); }

const uint8_t BF_FEXP_32_PRECISION_SHIFT = 29;
const uint8_t BF_FEXP_32_PRECISION_NBITS = 3;
const uint32_t BF_FEXP_32_PRECISION_MASK = 0x7;
const bool BF_FEXP_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFexp_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FEXP_32_PRECISION_SHIFT, BF_FEXP_32_PRECISION_NBITS); }
inline constexpr void embdInstFexp_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FEXP_32_PRECISION_SHIFT, BF_FEXP_32_PRECISION_MASK, imm); }

const uint8_t BF_FMADD_B16_XS_SHIFT = 7;
const uint8_t BF_FMADD_B16_XS_NBITS = 5;
const uint32_t BF_FMADD_B16_XS_MASK = 0x1f;
const bool BF_FMADD_B16_XS_SIGNED = false;
inline constexpr RegId extrInstFmadd_b16Xs(EncInst inst) { return extrReg5(inst, BF_FMADD_B16_XS_SHIFT); }
inline constexpr void embdInstFmadd_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMADD_B16_XS_SHIFT, reg); }

const uint8_t BF_FMADD_B16_XD_SHIFT = 12;
const uint8_t BF_FMADD_B16_XD_NBITS = 5;
const uint32_t BF_FMADD_B16_XD_MASK = 0x1f;
const bool BF_FMADD_B16_XD_SIGNED = false;
inline constexpr RegId extrInstFmadd_b16Xd(EncInst inst) { return extrReg5(inst, BF_FMADD_B16_XD_SHIFT); }
inline constexpr void embdInstFmadd_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMADD_B16_XD_SHIFT, reg); }

const uint8_t BF_FMADD_B16_XT_SHIFT = 17;
const uint8_t BF_FMADD_B16_XT_NBITS = 5;
const uint32_t BF_FMADD_B16_XT_MASK = 0x1f;
const bool BF_FMADD_B16_XT_SIGNED = false;
inline constexpr RegId extrInstFmadd_b16Xt(EncInst inst) { return extrReg5(inst, BF_FMADD_B16_XT_SHIFT); }
inline constexpr void embdInstFmadd_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMADD_B16_XT_SHIFT, reg); }

const uint8_t BF_FMADD_B16_FUNC_SHIFT = 26;
const uint8_t BF_FMADD_B16_FUNC_NBITS = 3;
const uint32_t BF_FMADD_B16_FUNC_MASK = 0x7;
const bool BF_FMADD_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFmadd_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_FMADD_B16_FUNC_SHIFT, BF_FMADD_B16_FUNC_NBITS); }
inline constexpr void embdInstFmadd_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMADD_B16_FUNC_SHIFT, BF_FMADD_B16_FUNC_MASK, imm); }

const uint8_t BF_FMADD_B16_PRECISION_SHIFT = 29;
const uint8_t BF_FMADD_B16_PRECISION_NBITS = 3;
const uint32_t BF_FMADD_B16_PRECISION_MASK = 0x7;
const bool BF_FMADD_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFmadd_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FMADD_B16_PRECISION_SHIFT, BF_FMADD_B16_PRECISION_NBITS); }
inline constexpr void embdInstFmadd_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMADD_B16_PRECISION_SHIFT, BF_FMADD_B16_PRECISION_MASK, imm); }

const uint8_t BF_FADD_B16_XS_SHIFT = 7;
const uint8_t BF_FADD_B16_XS_NBITS = 5;
const uint32_t BF_FADD_B16_XS_MASK = 0x1f;
const bool BF_FADD_B16_XS_SIGNED = false;
inline constexpr RegId extrInstFadd_b16Xs(EncInst inst) { return extrReg5(inst, BF_FADD_B16_XS_SHIFT); }
inline constexpr void embdInstFadd_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FADD_B16_XS_SHIFT, reg); }

const uint8_t BF_FADD_B16_XD_SHIFT = 12;
const uint8_t BF_FADD_B16_XD_NBITS = 5;
const uint32_t BF_FADD_B16_XD_MASK = 0x1f;
const bool BF_FADD_B16_XD_SIGNED = false;
inline constexpr RegId extrInstFadd_b16Xd(EncInst inst) { return extrReg5(inst, BF_FADD_B16_XD_SHIFT); }
inline constexpr void embdInstFadd_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FADD_B16_XD_SHIFT, reg); }

const uint8_t BF_FADD_B16_XT_SHIFT = 17;
const uint8_t BF_FADD_B16_XT_NBITS = 5;
const uint32_t BF_FADD_B16_XT_MASK = 0x1f;
const bool BF_FADD_B16_XT_SIGNED = false;
inline constexpr RegId extrInstFadd_b16Xt(EncInst inst) { return extrReg5(inst, BF_FADD_B16_XT_SHIFT); }
inline constexpr void embdInstFadd_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FADD_B16_XT_SHIFT, reg); }

const uint8_t BF_FADD_B16_FUNC_SHIFT = 26;
const uint8_t BF_FADD_B16_FUNC_NBITS = 3;
const uint32_t BF_FADD_B16_FUNC_MASK = 0x7;
const bool BF_FADD_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFadd_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_FADD_B16_FUNC_SHIFT, BF_FADD_B16_FUNC_NBITS); }
inline constexpr void embdInstFadd_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FADD_B16_FUNC_SHIFT, BF_FADD_B16_FUNC_MASK, imm); }

const uint8_t BF_FADD_B16_PRECISION_SHIFT = 29;
const uint8_t BF_FADD_B16_PRECISION_NBITS = 3;
const uint32_t BF_FADD_B16_PRECISION_MASK = 0x7;
const bool BF_FADD_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFadd_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FADD_B16_PRECISION_SHIFT, BF_FADD_B16_PRECISION_NBITS); }
inline constexpr void embdInstFadd_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FADD_B16_PRECISION_SHIFT, BF_FADD_B16_PRECISION_MASK, imm); }

const uint8_t BF_FSUB_B16_XS_SHIFT = 7;
const uint8_t BF_FSUB_B16_XS_NBITS = 5;
const uint32_t BF_FSUB_B16_XS_MASK = 0x1f;
const bool BF_FSUB_B16_XS_SIGNED = false;
inline constexpr RegId extrInstFsub_b16Xs(EncInst inst) { return extrReg5(inst, BF_FSUB_B16_XS_SHIFT); }
inline constexpr void embdInstFsub_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSUB_B16_XS_SHIFT, reg); }

const uint8_t BF_FSUB_B16_XD_SHIFT = 12;
const uint8_t BF_FSUB_B16_XD_NBITS = 5;
const uint32_t BF_FSUB_B16_XD_MASK = 0x1f;
const bool BF_FSUB_B16_XD_SIGNED = false;
inline constexpr RegId extrInstFsub_b16Xd(EncInst inst) { return extrReg5(inst, BF_FSUB_B16_XD_SHIFT); }
inline constexpr void embdInstFsub_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSUB_B16_XD_SHIFT, reg); }

const uint8_t BF_FSUB_B16_XT_SHIFT = 17;
const uint8_t BF_FSUB_B16_XT_NBITS = 5;
const uint32_t BF_FSUB_B16_XT_MASK = 0x1f;
const bool BF_FSUB_B16_XT_SIGNED = false;
inline constexpr RegId extrInstFsub_b16Xt(EncInst inst) { return extrReg5(inst, BF_FSUB_B16_XT_SHIFT); }
inline constexpr void embdInstFsub_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSUB_B16_XT_SHIFT, reg); }

const uint8_t BF_FSUB_B16_FUNC_SHIFT = 26;
const uint8_t BF_FSUB_B16_FUNC_NBITS = 3;
const uint32_t BF_FSUB_B16_FUNC_MASK = 0x7;
const bool BF_FSUB_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFsub_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_FSUB_B16_FUNC_SHIFT, BF_FSUB_B16_FUNC_NBITS); }
inline constexpr void embdInstFsub_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSUB_B16_FUNC_SHIFT, BF_FSUB_B16_FUNC_MASK, imm); }

const uint8_t BF_FSUB_B16_PRECISION_SHIFT = 29;
const uint8_t BF_FSUB_B16_PRECISION_NBITS = 3;
const uint32_t BF_FSUB_B16_PRECISION_MASK = 0x7;
const bool BF_FSUB_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFsub_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FSUB_B16_PRECISION_SHIFT, BF_FSUB_B16_PRECISION_NBITS); }
inline constexpr void embdInstFsub_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSUB_B16_PRECISION_SHIFT, BF_FSUB_B16_PRECISION_MASK, imm); }

const uint8_t BF_FMUL_B16_XS_SHIFT = 7;
const uint8_t BF_FMUL_B16_XS_NBITS = 5;
const uint32_t BF_FMUL_B16_XS_MASK = 0x1f;
const bool BF_FMUL_B16_XS_SIGNED = false;
inline constexpr RegId extrInstFmul_b16Xs(EncInst inst) { return extrReg5(inst, BF_FMUL_B16_XS_SHIFT); }
inline constexpr void embdInstFmul_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMUL_B16_XS_SHIFT, reg); }

const uint8_t BF_FMUL_B16_XD_SHIFT = 12;
const uint8_t BF_FMUL_B16_XD_NBITS = 5;
const uint32_t BF_FMUL_B16_XD_MASK = 0x1f;
const bool BF_FMUL_B16_XD_SIGNED = false;
inline constexpr RegId extrInstFmul_b16Xd(EncInst inst) { return extrReg5(inst, BF_FMUL_B16_XD_SHIFT); }
inline constexpr void embdInstFmul_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMUL_B16_XD_SHIFT, reg); }

const uint8_t BF_FMUL_B16_XT_SHIFT = 17;
const uint8_t BF_FMUL_B16_XT_NBITS = 5;
const uint32_t BF_FMUL_B16_XT_MASK = 0x1f;
const bool BF_FMUL_B16_XT_SIGNED = false;
inline constexpr RegId extrInstFmul_b16Xt(EncInst inst) { return extrReg5(inst, BF_FMUL_B16_XT_SHIFT); }
inline constexpr void embdInstFmul_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FMUL_B16_XT_SHIFT, reg); }

const uint8_t BF_FMUL_B16_FUNC_SHIFT = 26;
const uint8_t BF_FMUL_B16_FUNC_NBITS = 3;
const uint32_t BF_FMUL_B16_FUNC_MASK = 0x7;
const bool BF_FMUL_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFmul_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_FMUL_B16_FUNC_SHIFT, BF_FMUL_B16_FUNC_NBITS); }
inline constexpr void embdInstFmul_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMUL_B16_FUNC_SHIFT, BF_FMUL_B16_FUNC_MASK, imm); }

const uint8_t BF_FMUL_B16_PRECISION_SHIFT = 29;
const uint8_t BF_FMUL_B16_PRECISION_NBITS = 3;
const uint32_t BF_FMUL_B16_PRECISION_MASK = 0x7;
const bool BF_FMUL_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFmul_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FMUL_B16_PRECISION_SHIFT, BF_FMUL_B16_PRECISION_NBITS); }
inline constexpr void embdInstFmul_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FMUL_B16_PRECISION_SHIFT, BF_FMUL_B16_PRECISION_MASK, imm); }

const uint8_t BF_FDIV_B16_XS_SHIFT = 7;
const uint8_t BF_FDIV_B16_XS_NBITS = 5;
const uint32_t BF_FDIV_B16_XS_MASK = 0x1f;
const bool BF_FDIV_B16_XS_SIGNED = false;
inline constexpr RegId extrInstFdiv_b16Xs(EncInst inst) { return extrReg5(inst, BF_FDIV_B16_XS_SHIFT); }
inline constexpr void embdInstFdiv_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FDIV_B16_XS_SHIFT, reg); }

const uint8_t BF_FDIV_B16_XD_SHIFT = 12;
const uint8_t BF_FDIV_B16_XD_NBITS = 5;
const uint32_t BF_FDIV_B16_XD_MASK = 0x1f;
const bool BF_FDIV_B16_XD_SIGNED = false;
inline constexpr RegId extrInstFdiv_b16Xd(EncInst inst) { return extrReg5(inst, BF_FDIV_B16_XD_SHIFT); }
inline constexpr void embdInstFdiv_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FDIV_B16_XD_SHIFT, reg); }

const uint8_t BF_FDIV_B16_XT_SHIFT = 17;
const uint8_t BF_FDIV_B16_XT_NBITS = 5;
const uint32_t BF_FDIV_B16_XT_MASK = 0x1f;
const bool BF_FDIV_B16_XT_SIGNED = false;
inline constexpr RegId extrInstFdiv_b16Xt(EncInst inst) { return extrReg5(inst, BF_FDIV_B16_XT_SHIFT); }
inline constexpr void embdInstFdiv_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FDIV_B16_XT_SHIFT, reg); }

const uint8_t BF_FDIV_B16_FUNC_SHIFT = 26;
const uint8_t BF_FDIV_B16_FUNC_NBITS = 3;
const uint32_t BF_FDIV_B16_FUNC_MASK = 0x7;
const bool BF_FDIV_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFdiv_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_FDIV_B16_FUNC_SHIFT, BF_FDIV_B16_FUNC_NBITS); }
inline constexpr void embdInstFdiv_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FDIV_B16_FUNC_SHIFT, BF_FDIV_B16_FUNC_MASK, imm); }

const uint8_t BF_FDIV_B16_PRECISION_SHIFT = 29;
const uint8_t BF_FDIV_B16_PRECISION_NBITS = 3;
const uint32_t BF_FDIV_B16_PRECISION_MASK = 0x7;
const bool BF_FDIV_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFdiv_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FDIV_B16_PRECISION_SHIFT, BF_FDIV_B16_PRECISION_NBITS); }
inline constexpr void embdInstFdiv_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FDIV_B16_PRECISION_SHIFT, BF_FDIV_B16_PRECISION_MASK, imm); }

const uint8_t BF_FSQRT_B16_XS_SHIFT = 7;
const uint8_t BF_FSQRT_B16_XS_NBITS = 5;
const uint32_t BF_FSQRT_B16_XS_MASK = 0x1f;
const bool BF_FSQRT_B16_XS_SIGNED = false;
inline constexpr RegId extrInstFsqrt_b16Xs(EncInst inst) { return extrReg5(inst, BF_FSQRT_B16_XS_SHIFT); }
inline constexpr void embdInstFsqrt_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSQRT_B16_XS_SHIFT, reg); }

const uint8_t BF_FSQRT_B16_XD_SHIFT = 12;
const uint8_t BF_FSQRT_B16_XD_NBITS = 5;
const uint32_t BF_FSQRT_B16_XD_MASK = 0x1f;
const bool BF_FSQRT_B16_XD_SIGNED = false;
inline constexpr RegId extrInstFsqrt_b16Xd(EncInst inst) { return extrReg5(inst, BF_FSQRT_B16_XD_SHIFT); }
inline constexpr void embdInstFsqrt_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSQRT_B16_XD_SHIFT, reg); }

const uint8_t BF_FSQRT_B16_XT_SHIFT = 17;
const uint8_t BF_FSQRT_B16_XT_NBITS = 5;
const uint32_t BF_FSQRT_B16_XT_MASK = 0x1f;
const bool BF_FSQRT_B16_XT_SIGNED = false;
inline constexpr RegId extrInstFsqrt_b16Xt(EncInst inst) { return extrReg5(inst, BF_FSQRT_B16_XT_SHIFT); }
inline constexpr void embdInstFsqrt_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FSQRT_B16_XT_SHIFT, reg); }

const uint8_t BF_FSQRT_B16_FUNC_SHIFT = 26;
const uint8_t BF_FSQRT_B16_FUNC_NBITS = 3;
const uint32_t BF_FSQRT_B16_FUNC_MASK = 0x7;
const bool BF_FSQRT_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFsqrt_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_FSQRT_B16_FUNC_SHIFT, BF_FSQRT_B16_FUNC_NBITS); }
inline constexpr void embdInstFsqrt_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSQRT_B16_FUNC_SHIFT, BF_FSQRT_B16_FUNC_MASK, imm); }

const uint8_t BF_FSQRT_B16_PRECISION_SHIFT = 29;
const uint8_t BF_FSQRT_B16_PRECISION_NBITS = 3;
const uint32_t BF_FSQRT_B16_PRECISION_MASK = 0x7;
const bool BF_FSQRT_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFsqrt_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FSQRT_B16_PRECISION_SHIFT, BF_FSQRT_B16_PRECISION_NBITS); }
inline constexpr void embdInstFsqrt_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FSQRT_B16_PRECISION_SHIFT, BF_FSQRT_B16_PRECISION_MASK, imm); }

const uint8_t BF_FEXP_B16_XS_SHIFT = 7;
const uint8_t BF_FEXP_B16_XS_NBITS = 5;
const uint32_t BF_FEXP_B16_XS_MASK = 0x1f;
const bool BF_FEXP_B16_XS_SIGNED = false;
inline constexpr RegId extrInstFexp_b16Xs(EncInst inst) { return extrReg5(inst, BF_FEXP_B16_XS_SHIFT); }
inline constexpr void embdInstFexp_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FEXP_B16_XS_SHIFT, reg); }

const uint8_t BF_FEXP_B16_XD_SHIFT = 12;
const uint8_t BF_FEXP_B16_XD_NBITS = 5;
const uint32_t BF_FEXP_B16_XD_MASK = 0x1f;
const bool BF_FEXP_B16_XD_SIGNED = false;
inline constexpr RegId extrInstFexp_b16Xd(EncInst inst) { return extrReg5(inst, BF_FEXP_B16_XD_SHIFT); }
inline constexpr void embdInstFexp_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FEXP_B16_XD_SHIFT, reg); }

const uint8_t BF_FEXP_B16_XT_SHIFT = 17;
const uint8_t BF_FEXP_B16_XT_NBITS = 5;
const uint32_t BF_FEXP_B16_XT_MASK = 0x1f;
const bool BF_FEXP_B16_XT_SIGNED = false;
inline constexpr RegId extrInstFexp_b16Xt(EncInst inst) { return extrReg5(inst, BF_FEXP_B16_XT_SHIFT); }
inline constexpr void embdInstFexp_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_FEXP_B16_XT_SHIFT, reg); }

const uint8_t BF_FEXP_B16_FUNC_SHIFT = 26;
const uint8_t BF_FEXP_B16_FUNC_NBITS = 3;
const uint32_t BF_FEXP_B16_FUNC_MASK = 0x7;
const bool BF_FEXP_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFexp_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_FEXP_B16_FUNC_SHIFT, BF_FEXP_B16_FUNC_NBITS); }
inline constexpr void embdInstFexp_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FEXP_B16_FUNC_SHIFT, BF_FEXP_B16_FUNC_MASK, imm); }

const uint8_t BF_FEXP_B16_PRECISION_SHIFT = 29;
const uint8_t BF_FEXP_B16_PRECISION_NBITS = 3;
const uint32_t BF_FEXP_B16_PRECISION_MASK = 0x7;
const bool BF_FEXP_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFexp_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FEXP_B16_PRECISION_SHIFT, BF_FEXP_B16_PRECISION_NBITS); }
inline constexpr void embdInstFexp_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FEXP_B16_PRECISION_SHIFT, BF_FEXP_B16_PRECISION_MASK, imm); }

const uint8_t BF_FCNVT_64_I64_XS_SHIFT = 7;
const uint8_t BF_FCNVT_64_I64_XS_NBITS = 5;
const uint32_t BF_FCNVT_64_I64_XS_MASK = 0x1f;
const bool BF_FCNVT_64_I64_XS_SIGNED = false;
inline constexpr RegId extrInstFcnvt_64_i64Xs(EncInst inst) { return extrReg5(inst, BF_FCNVT_64_I64_XS_SHIFT); }
inline constexpr void embdInstFcnvt_64_i64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_64_I64_XS_SHIFT, reg); }

const uint8_t BF_FCNVT_64_I64_XD_SHIFT = 12;
const uint8_t BF_FCNVT_64_I64_XD_NBITS = 5;
const uint32_t BF_FCNVT_64_I64_XD_MASK = 0x1f;
const bool BF_FCNVT_64_I64_XD_SIGNED = false;
inline constexpr RegId extrInstFcnvt_64_i64Xd(EncInst inst) { return extrReg5(inst, BF_FCNVT_64_I64_XD_SHIFT); }
inline constexpr void embdInstFcnvt_64_i64Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_64_I64_XD_SHIFT, reg); }

const uint8_t BF_FCNVT_64_I64_FUNC_SHIFT = 26;
const uint8_t BF_FCNVT_64_I64_FUNC_NBITS = 3;
const uint32_t BF_FCNVT_64_I64_FUNC_MASK = 0x7;
const bool BF_FCNVT_64_I64_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_64_i64Func(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_64_I64_FUNC_SHIFT, BF_FCNVT_64_I64_FUNC_NBITS); }
inline constexpr void embdInstFcnvt_64_i64Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_64_I64_FUNC_SHIFT, BF_FCNVT_64_I64_FUNC_MASK, imm); }

const uint8_t BF_FCNVT_64_I64_PRECISION_SHIFT = 29;
const uint8_t BF_FCNVT_64_I64_PRECISION_NBITS = 3;
const uint32_t BF_FCNVT_64_I64_PRECISION_MASK = 0x7;
const bool BF_FCNVT_64_I64_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_64_i64Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_64_I64_PRECISION_SHIFT, BF_FCNVT_64_I64_PRECISION_NBITS); }
inline constexpr void embdInstFcnvt_64_i64Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_64_I64_PRECISION_SHIFT, BF_FCNVT_64_I64_PRECISION_MASK, imm); }

const uint8_t BF_FCNVT_32_I32_XS_SHIFT = 7;
const uint8_t BF_FCNVT_32_I32_XS_NBITS = 5;
const uint32_t BF_FCNVT_32_I32_XS_MASK = 0x1f;
const bool BF_FCNVT_32_I32_XS_SIGNED = false;
inline constexpr RegId extrInstFcnvt_32_i32Xs(EncInst inst) { return extrReg5(inst, BF_FCNVT_32_I32_XS_SHIFT); }
inline constexpr void embdInstFcnvt_32_i32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_32_I32_XS_SHIFT, reg); }

const uint8_t BF_FCNVT_32_I32_XD_SHIFT = 12;
const uint8_t BF_FCNVT_32_I32_XD_NBITS = 5;
const uint32_t BF_FCNVT_32_I32_XD_MASK = 0x1f;
const bool BF_FCNVT_32_I32_XD_SIGNED = false;
inline constexpr RegId extrInstFcnvt_32_i32Xd(EncInst inst) { return extrReg5(inst, BF_FCNVT_32_I32_XD_SHIFT); }
inline constexpr void embdInstFcnvt_32_i32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_32_I32_XD_SHIFT, reg); }

const uint8_t BF_FCNVT_32_I32_FUNC_SHIFT = 26;
const uint8_t BF_FCNVT_32_I32_FUNC_NBITS = 3;
const uint32_t BF_FCNVT_32_I32_FUNC_MASK = 0x7;
const bool BF_FCNVT_32_I32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_32_i32Func(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_32_I32_FUNC_SHIFT, BF_FCNVT_32_I32_FUNC_NBITS); }
inline constexpr void embdInstFcnvt_32_i32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_32_I32_FUNC_SHIFT, BF_FCNVT_32_I32_FUNC_MASK, imm); }

const uint8_t BF_FCNVT_32_I32_PRECISION_SHIFT = 29;
const uint8_t BF_FCNVT_32_I32_PRECISION_NBITS = 3;
const uint32_t BF_FCNVT_32_I32_PRECISION_MASK = 0x7;
const bool BF_FCNVT_32_I32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_32_i32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_32_I32_PRECISION_SHIFT, BF_FCNVT_32_I32_PRECISION_NBITS); }
inline constexpr void embdInstFcnvt_32_i32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_32_I32_PRECISION_SHIFT, BF_FCNVT_32_I32_PRECISION_MASK, imm); }

const uint8_t BF_FCNVT_I64_64_XS_SHIFT = 7;
const uint8_t BF_FCNVT_I64_64_XS_NBITS = 5;
const uint32_t BF_FCNVT_I64_64_XS_MASK = 0x1f;
const bool BF_FCNVT_I64_64_XS_SIGNED = false;
inline constexpr RegId extrInstFcnvt_i64_64Xs(EncInst inst) { return extrReg5(inst, BF_FCNVT_I64_64_XS_SHIFT); }
inline constexpr void embdInstFcnvt_i64_64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_I64_64_XS_SHIFT, reg); }

const uint8_t BF_FCNVT_I64_64_XD_SHIFT = 12;
const uint8_t BF_FCNVT_I64_64_XD_NBITS = 5;
const uint32_t BF_FCNVT_I64_64_XD_MASK = 0x1f;
const bool BF_FCNVT_I64_64_XD_SIGNED = false;
inline constexpr RegId extrInstFcnvt_i64_64Xd(EncInst inst) { return extrReg5(inst, BF_FCNVT_I64_64_XD_SHIFT); }
inline constexpr void embdInstFcnvt_i64_64Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_I64_64_XD_SHIFT, reg); }

const uint8_t BF_FCNVT_I64_64_FUNC_SHIFT = 26;
const uint8_t BF_FCNVT_I64_64_FUNC_NBITS = 3;
const uint32_t BF_FCNVT_I64_64_FUNC_MASK = 0x7;
const bool BF_FCNVT_I64_64_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_i64_64Func(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_I64_64_FUNC_SHIFT, BF_FCNVT_I64_64_FUNC_NBITS); }
inline constexpr void embdInstFcnvt_i64_64Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_I64_64_FUNC_SHIFT, BF_FCNVT_I64_64_FUNC_MASK, imm); }

const uint8_t BF_FCNVT_I64_64_PRECISION_SHIFT = 29;
const uint8_t BF_FCNVT_I64_64_PRECISION_NBITS = 3;
const uint32_t BF_FCNVT_I64_64_PRECISION_MASK = 0x7;
const bool BF_FCNVT_I64_64_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_i64_64Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_I64_64_PRECISION_SHIFT, BF_FCNVT_I64_64_PRECISION_NBITS); }
inline constexpr void embdInstFcnvt_i64_64Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_I64_64_PRECISION_SHIFT, BF_FCNVT_I64_64_PRECISION_MASK, imm); }

const uint8_t BF_FCNVT_I32_32_XS_SHIFT = 7;
const uint8_t BF_FCNVT_I32_32_XS_NBITS = 5;
const uint32_t BF_FCNVT_I32_32_XS_MASK = 0x1f;
const bool BF_FCNVT_I32_32_XS_SIGNED = false;
inline constexpr RegId extrInstFcnvt_i32_32Xs(EncInst inst) { return extrReg5(inst, BF_FCNVT_I32_32_XS_SHIFT); }
inline constexpr void embdInstFcnvt_i32_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_I32_32_XS_SHIFT, reg); }

const uint8_t BF_FCNVT_I32_32_XD_SHIFT = 12;
const uint8_t BF_FCNVT_I32_32_XD_NBITS = 5;
const uint32_t BF_FCNVT_I32_32_XD_MASK = 0x1f;
const bool BF_FCNVT_I32_32_XD_SIGNED = false;
inline constexpr RegId extrInstFcnvt_i32_32Xd(EncInst inst) { return extrReg5(inst, BF_FCNVT_I32_32_XD_SHIFT); }
inline constexpr void embdInstFcnvt_i32_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_I32_32_XD_SHIFT, reg); }

const uint8_t BF_FCNVT_I32_32_FUNC_SHIFT = 26;
const uint8_t BF_FCNVT_I32_32_FUNC_NBITS = 3;
const uint32_t BF_FCNVT_I32_32_FUNC_MASK = 0x7;
const bool BF_FCNVT_I32_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_i32_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_I32_32_FUNC_SHIFT, BF_FCNVT_I32_32_FUNC_NBITS); }
inline constexpr void embdInstFcnvt_i32_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_I32_32_FUNC_SHIFT, BF_FCNVT_I32_32_FUNC_MASK, imm); }

const uint8_t BF_FCNVT_I32_32_PRECISION_SHIFT = 29;
const uint8_t BF_FCNVT_I32_32_PRECISION_NBITS = 3;
const uint32_t BF_FCNVT_I32_32_PRECISION_MASK = 0x7;
const bool BF_FCNVT_I32_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_i32_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_I32_32_PRECISION_SHIFT, BF_FCNVT_I32_32_PRECISION_NBITS); }
inline constexpr void embdInstFcnvt_i32_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_I32_32_PRECISION_SHIFT, BF_FCNVT_I32_32_PRECISION_MASK, imm); }

const uint8_t BF_FCNVT_64_32_XS_SHIFT = 7;
const uint8_t BF_FCNVT_64_32_XS_NBITS = 5;
const uint32_t BF_FCNVT_64_32_XS_MASK = 0x1f;
const bool BF_FCNVT_64_32_XS_SIGNED = false;
inline constexpr RegId extrInstFcnvt_64_32Xs(EncInst inst) { return extrReg5(inst, BF_FCNVT_64_32_XS_SHIFT); }
inline constexpr void embdInstFcnvt_64_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_64_32_XS_SHIFT, reg); }

const uint8_t BF_FCNVT_64_32_XD_SHIFT = 12;
const uint8_t BF_FCNVT_64_32_XD_NBITS = 5;
const uint32_t BF_FCNVT_64_32_XD_MASK = 0x1f;
const bool BF_FCNVT_64_32_XD_SIGNED = false;
inline constexpr RegId extrInstFcnvt_64_32Xd(EncInst inst) { return extrReg5(inst, BF_FCNVT_64_32_XD_SHIFT); }
inline constexpr void embdInstFcnvt_64_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_64_32_XD_SHIFT, reg); }

const uint8_t BF_FCNVT_64_32_FUNC_SHIFT = 26;
const uint8_t BF_FCNVT_64_32_FUNC_NBITS = 3;
const uint32_t BF_FCNVT_64_32_FUNC_MASK = 0x7;
const bool BF_FCNVT_64_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_64_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_64_32_FUNC_SHIFT, BF_FCNVT_64_32_FUNC_NBITS); }
inline constexpr void embdInstFcnvt_64_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_64_32_FUNC_SHIFT, BF_FCNVT_64_32_FUNC_MASK, imm); }

const uint8_t BF_FCNVT_64_32_PRECISION_SHIFT = 29;
const uint8_t BF_FCNVT_64_32_PRECISION_NBITS = 3;
const uint32_t BF_FCNVT_64_32_PRECISION_MASK = 0x7;
const bool BF_FCNVT_64_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_64_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_64_32_PRECISION_SHIFT, BF_FCNVT_64_32_PRECISION_NBITS); }
inline constexpr void embdInstFcnvt_64_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_64_32_PRECISION_SHIFT, BF_FCNVT_64_32_PRECISION_MASK, imm); }

const uint8_t BF_FCNVT_64_B16_XS_SHIFT = 7;
const uint8_t BF_FCNVT_64_B16_XS_NBITS = 5;
const uint32_t BF_FCNVT_64_B16_XS_MASK = 0x1f;
const bool BF_FCNVT_64_B16_XS_SIGNED = false;
inline constexpr RegId extrInstFcnvt_64_b16Xs(EncInst inst) { return extrReg5(inst, BF_FCNVT_64_B16_XS_SHIFT); }
inline constexpr void embdInstFcnvt_64_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_64_B16_XS_SHIFT, reg); }

const uint8_t BF_FCNVT_64_B16_XD_SHIFT = 12;
const uint8_t BF_FCNVT_64_B16_XD_NBITS = 5;
const uint32_t BF_FCNVT_64_B16_XD_MASK = 0x1f;
const bool BF_FCNVT_64_B16_XD_SIGNED = false;
inline constexpr RegId extrInstFcnvt_64_b16Xd(EncInst inst) { return extrReg5(inst, BF_FCNVT_64_B16_XD_SHIFT); }
inline constexpr void embdInstFcnvt_64_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_64_B16_XD_SHIFT, reg); }

const uint8_t BF_FCNVT_64_B16_FUNC_SHIFT = 26;
const uint8_t BF_FCNVT_64_B16_FUNC_NBITS = 3;
const uint32_t BF_FCNVT_64_B16_FUNC_MASK = 0x7;
const bool BF_FCNVT_64_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_64_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_64_B16_FUNC_SHIFT, BF_FCNVT_64_B16_FUNC_NBITS); }
inline constexpr void embdInstFcnvt_64_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_64_B16_FUNC_SHIFT, BF_FCNVT_64_B16_FUNC_MASK, imm); }

const uint8_t BF_FCNVT_64_B16_PRECISION_SHIFT = 29;
const uint8_t BF_FCNVT_64_B16_PRECISION_NBITS = 3;
const uint32_t BF_FCNVT_64_B16_PRECISION_MASK = 0x7;
const bool BF_FCNVT_64_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_64_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_64_B16_PRECISION_SHIFT, BF_FCNVT_64_B16_PRECISION_NBITS); }
inline constexpr void embdInstFcnvt_64_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_64_B16_PRECISION_SHIFT, BF_FCNVT_64_B16_PRECISION_MASK, imm); }

const uint8_t BF_FCNVT_32_64_XS_SHIFT = 7;
const uint8_t BF_FCNVT_32_64_XS_NBITS = 5;
const uint32_t BF_FCNVT_32_64_XS_MASK = 0x1f;
const bool BF_FCNVT_32_64_XS_SIGNED = false;
inline constexpr RegId extrInstFcnvt_32_64Xs(EncInst inst) { return extrReg5(inst, BF_FCNVT_32_64_XS_SHIFT); }
inline constexpr void embdInstFcnvt_32_64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_32_64_XS_SHIFT, reg); }

const uint8_t BF_FCNVT_32_64_XD_SHIFT = 12;
const uint8_t BF_FCNVT_32_64_XD_NBITS = 5;
const uint32_t BF_FCNVT_32_64_XD_MASK = 0x1f;
const bool BF_FCNVT_32_64_XD_SIGNED = false;
inline constexpr RegId extrInstFcnvt_32_64Xd(EncInst inst) { return extrReg5(inst, BF_FCNVT_32_64_XD_SHIFT); }
inline constexpr void embdInstFcnvt_32_64Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_32_64_XD_SHIFT, reg); }

const uint8_t BF_FCNVT_32_64_FUNC_SHIFT = 26;
const uint8_t BF_FCNVT_32_64_FUNC_NBITS = 3;
const uint32_t BF_FCNVT_32_64_FUNC_MASK = 0x7;
const bool BF_FCNVT_32_64_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_32_64Func(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_32_64_FUNC_SHIFT, BF_FCNVT_32_64_FUNC_NBITS); }
inline constexpr void embdInstFcnvt_32_64Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_32_64_FUNC_SHIFT, BF_FCNVT_32_64_FUNC_MASK, imm); }

const uint8_t BF_FCNVT_32_64_PRECISION_SHIFT = 29;
const uint8_t BF_FCNVT_32_64_PRECISION_NBITS = 3;
const uint32_t BF_FCNVT_32_64_PRECISION_MASK = 0x7;
const bool BF_FCNVT_32_64_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_32_64Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_32_64_PRECISION_SHIFT, BF_FCNVT_32_64_PRECISION_NBITS); }
inline constexpr void embdInstFcnvt_32_64Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_32_64_PRECISION_SHIFT, BF_FCNVT_32_64_PRECISION_MASK, imm); }

const uint8_t BF_FCNVT_32_B16_XS_SHIFT = 7;
const uint8_t BF_FCNVT_32_B16_XS_NBITS = 5;
const uint32_t BF_FCNVT_32_B16_XS_MASK = 0x1f;
const bool BF_FCNVT_32_B16_XS_SIGNED = false;
inline constexpr RegId extrInstFcnvt_32_b16Xs(EncInst inst) { return extrReg5(inst, BF_FCNVT_32_B16_XS_SHIFT); }
inline constexpr void embdInstFcnvt_32_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_32_B16_XS_SHIFT, reg); }

const uint8_t BF_FCNVT_32_B16_XD_SHIFT = 12;
const uint8_t BF_FCNVT_32_B16_XD_NBITS = 5;
const uint32_t BF_FCNVT_32_B16_XD_MASK = 0x1f;
const bool BF_FCNVT_32_B16_XD_SIGNED = false;
inline constexpr RegId extrInstFcnvt_32_b16Xd(EncInst inst) { return extrReg5(inst, BF_FCNVT_32_B16_XD_SHIFT); }
inline constexpr void embdInstFcnvt_32_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_32_B16_XD_SHIFT, reg); }

const uint8_t BF_FCNVT_32_B16_FUNC_SHIFT = 26;
const uint8_t BF_FCNVT_32_B16_FUNC_NBITS = 3;
const uint32_t BF_FCNVT_32_B16_FUNC_MASK = 0x7;
const bool BF_FCNVT_32_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_32_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_32_B16_FUNC_SHIFT, BF_FCNVT_32_B16_FUNC_NBITS); }
inline constexpr void embdInstFcnvt_32_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_32_B16_FUNC_SHIFT, BF_FCNVT_32_B16_FUNC_MASK, imm); }

const uint8_t BF_FCNVT_32_B16_PRECISION_SHIFT = 29;
const uint8_t BF_FCNVT_32_B16_PRECISION_NBITS = 3;
const uint32_t BF_FCNVT_32_B16_PRECISION_MASK = 0x7;
const bool BF_FCNVT_32_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_32_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_32_B16_PRECISION_SHIFT, BF_FCNVT_32_B16_PRECISION_NBITS); }
inline constexpr void embdInstFcnvt_32_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_32_B16_PRECISION_SHIFT, BF_FCNVT_32_B16_PRECISION_MASK, imm); }

const uint8_t BF_FCNVT_B16_64_XS_SHIFT = 7;
const uint8_t BF_FCNVT_B16_64_XS_NBITS = 5;
const uint32_t BF_FCNVT_B16_64_XS_MASK = 0x1f;
const bool BF_FCNVT_B16_64_XS_SIGNED = false;
inline constexpr RegId extrInstFcnvt_b16_64Xs(EncInst inst) { return extrReg5(inst, BF_FCNVT_B16_64_XS_SHIFT); }
inline constexpr void embdInstFcnvt_b16_64Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_B16_64_XS_SHIFT, reg); }

const uint8_t BF_FCNVT_B16_64_XD_SHIFT = 12;
const uint8_t BF_FCNVT_B16_64_XD_NBITS = 5;
const uint32_t BF_FCNVT_B16_64_XD_MASK = 0x1f;
const bool BF_FCNVT_B16_64_XD_SIGNED = false;
inline constexpr RegId extrInstFcnvt_b16_64Xd(EncInst inst) { return extrReg5(inst, BF_FCNVT_B16_64_XD_SHIFT); }
inline constexpr void embdInstFcnvt_b16_64Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_B16_64_XD_SHIFT, reg); }

const uint8_t BF_FCNVT_B16_64_FUNC_SHIFT = 26;
const uint8_t BF_FCNVT_B16_64_FUNC_NBITS = 3;
const uint32_t BF_FCNVT_B16_64_FUNC_MASK = 0x7;
const bool BF_FCNVT_B16_64_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_b16_64Func(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_B16_64_FUNC_SHIFT, BF_FCNVT_B16_64_FUNC_NBITS); }
inline constexpr void embdInstFcnvt_b16_64Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_B16_64_FUNC_SHIFT, BF_FCNVT_B16_64_FUNC_MASK, imm); }

const uint8_t BF_FCNVT_B16_64_PRECISION_SHIFT = 29;
const uint8_t BF_FCNVT_B16_64_PRECISION_NBITS = 3;
const uint32_t BF_FCNVT_B16_64_PRECISION_MASK = 0x7;
const bool BF_FCNVT_B16_64_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_b16_64Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_B16_64_PRECISION_SHIFT, BF_FCNVT_B16_64_PRECISION_NBITS); }
inline constexpr void embdInstFcnvt_b16_64Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_B16_64_PRECISION_SHIFT, BF_FCNVT_B16_64_PRECISION_MASK, imm); }

const uint8_t BF_FCNVT_B16_32_XS_SHIFT = 7;
const uint8_t BF_FCNVT_B16_32_XS_NBITS = 5;
const uint32_t BF_FCNVT_B16_32_XS_MASK = 0x1f;
const bool BF_FCNVT_B16_32_XS_SIGNED = false;
inline constexpr RegId extrInstFcnvt_b16_32Xs(EncInst inst) { return extrReg5(inst, BF_FCNVT_B16_32_XS_SHIFT); }
inline constexpr void embdInstFcnvt_b16_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_B16_32_XS_SHIFT, reg); }

const uint8_t BF_FCNVT_B16_32_XD_SHIFT = 12;
const uint8_t BF_FCNVT_B16_32_XD_NBITS = 5;
const uint32_t BF_FCNVT_B16_32_XD_MASK = 0x1f;
const bool BF_FCNVT_B16_32_XD_SIGNED = false;
inline constexpr RegId extrInstFcnvt_b16_32Xd(EncInst inst) { return extrReg5(inst, BF_FCNVT_B16_32_XD_SHIFT); }
inline constexpr void embdInstFcnvt_b16_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_FCNVT_B16_32_XD_SHIFT, reg); }

const uint8_t BF_FCNVT_B16_32_FUNC_SHIFT = 26;
const uint8_t BF_FCNVT_B16_32_FUNC_NBITS = 3;
const uint32_t BF_FCNVT_B16_32_FUNC_MASK = 0x7;
const bool BF_FCNVT_B16_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_b16_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_B16_32_FUNC_SHIFT, BF_FCNVT_B16_32_FUNC_NBITS); }
inline constexpr void embdInstFcnvt_b16_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_B16_32_FUNC_SHIFT, BF_FCNVT_B16_32_FUNC_MASK, imm); }

const uint8_t BF_FCNVT_B16_32_PRECISION_SHIFT = 29;
const uint8_t BF_FCNVT_B16_32_PRECISION_NBITS = 3;
const uint32_t BF_FCNVT_B16_32_PRECISION_MASK = 0x7;
const bool BF_FCNVT_B16_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstFcnvt_b16_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_FCNVT_B16_32_PRECISION_SHIFT, BF_FCNVT_B16_32_PRECISION_NBITS); }
inline constexpr void embdInstFcnvt_b16_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FCNVT_B16_32_PRECISION_SHIFT, BF_FCNVT_B16_32_PRECISION_MASK, imm); }

const uint8_t BF_VMADD_32_XS_SHIFT = 7;
const uint8_t BF_VMADD_32_XS_NBITS = 5;
const uint32_t BF_VMADD_32_XS_MASK = 0x1f;
const bool BF_VMADD_32_XS_SIGNED = false;
inline constexpr RegId extrInstVmadd_32Xs(EncInst inst) { return extrReg5(inst, BF_VMADD_32_XS_SHIFT); }
inline constexpr void embdInstVmadd_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMADD_32_XS_SHIFT, reg); }

const uint8_t BF_VMADD_32_XD_SHIFT = 12;
const uint8_t BF_VMADD_32_XD_NBITS = 5;
const uint32_t BF_VMADD_32_XD_MASK = 0x1f;
const bool BF_VMADD_32_XD_SIGNED = false;
inline constexpr RegId extrInstVmadd_32Xd(EncInst inst) { return extrReg5(inst, BF_VMADD_32_XD_SHIFT); }
inline constexpr void embdInstVmadd_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMADD_32_XD_SHIFT, reg); }

const uint8_t BF_VMADD_32_XT_SHIFT = 17;
const uint8_t BF_VMADD_32_XT_NBITS = 5;
const uint32_t BF_VMADD_32_XT_MASK = 0x1f;
const bool BF_VMADD_32_XT_SIGNED = false;
inline constexpr RegId extrInstVmadd_32Xt(EncInst inst) { return extrReg5(inst, BF_VMADD_32_XT_SHIFT); }
inline constexpr void embdInstVmadd_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMADD_32_XT_SHIFT, reg); }

const uint8_t BF_VMADD_32_MASK_SHIFT = 22;
const uint8_t BF_VMADD_32_MASK_NBITS = 4;
const uint32_t BF_VMADD_32_MASK_MASK = 0xf;
const bool BF_VMADD_32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVmadd_32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VMADD_32_MASK_SHIFT, BF_VMADD_32_MASK_NBITS); }
inline constexpr void embdInstVmadd_32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMADD_32_MASK_SHIFT, BF_VMADD_32_MASK_MASK, imm); }

const uint8_t BF_VMADD_32_FUNC_SHIFT = 26;
const uint8_t BF_VMADD_32_FUNC_NBITS = 3;
const uint32_t BF_VMADD_32_FUNC_MASK = 0x7;
const bool BF_VMADD_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVmadd_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VMADD_32_FUNC_SHIFT, BF_VMADD_32_FUNC_NBITS); }
inline constexpr void embdInstVmadd_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMADD_32_FUNC_SHIFT, BF_VMADD_32_FUNC_MASK, imm); }

const uint8_t BF_VMADD_32_PRECISION_SHIFT = 29;
const uint8_t BF_VMADD_32_PRECISION_NBITS = 3;
const uint32_t BF_VMADD_32_PRECISION_MASK = 0x7;
const bool BF_VMADD_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVmadd_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VMADD_32_PRECISION_SHIFT, BF_VMADD_32_PRECISION_NBITS); }
inline constexpr void embdInstVmadd_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMADD_32_PRECISION_SHIFT, BF_VMADD_32_PRECISION_MASK, imm); }

const uint8_t BF_VADD_32_XS_SHIFT = 7;
const uint8_t BF_VADD_32_XS_NBITS = 5;
const uint32_t BF_VADD_32_XS_MASK = 0x1f;
const bool BF_VADD_32_XS_SIGNED = false;
inline constexpr RegId extrInstVadd_32Xs(EncInst inst) { return extrReg5(inst, BF_VADD_32_XS_SHIFT); }
inline constexpr void embdInstVadd_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VADD_32_XS_SHIFT, reg); }

const uint8_t BF_VADD_32_XD_SHIFT = 12;
const uint8_t BF_VADD_32_XD_NBITS = 5;
const uint32_t BF_VADD_32_XD_MASK = 0x1f;
const bool BF_VADD_32_XD_SIGNED = false;
inline constexpr RegId extrInstVadd_32Xd(EncInst inst) { return extrReg5(inst, BF_VADD_32_XD_SHIFT); }
inline constexpr void embdInstVadd_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VADD_32_XD_SHIFT, reg); }

const uint8_t BF_VADD_32_XT_SHIFT = 17;
const uint8_t BF_VADD_32_XT_NBITS = 5;
const uint32_t BF_VADD_32_XT_MASK = 0x1f;
const bool BF_VADD_32_XT_SIGNED = false;
inline constexpr RegId extrInstVadd_32Xt(EncInst inst) { return extrReg5(inst, BF_VADD_32_XT_SHIFT); }
inline constexpr void embdInstVadd_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VADD_32_XT_SHIFT, reg); }

const uint8_t BF_VADD_32_MASK_SHIFT = 22;
const uint8_t BF_VADD_32_MASK_NBITS = 4;
const uint32_t BF_VADD_32_MASK_MASK = 0xf;
const bool BF_VADD_32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVadd_32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VADD_32_MASK_SHIFT, BF_VADD_32_MASK_NBITS); }
inline constexpr void embdInstVadd_32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VADD_32_MASK_SHIFT, BF_VADD_32_MASK_MASK, imm); }

const uint8_t BF_VADD_32_FUNC_SHIFT = 26;
const uint8_t BF_VADD_32_FUNC_NBITS = 3;
const uint32_t BF_VADD_32_FUNC_MASK = 0x7;
const bool BF_VADD_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVadd_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VADD_32_FUNC_SHIFT, BF_VADD_32_FUNC_NBITS); }
inline constexpr void embdInstVadd_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VADD_32_FUNC_SHIFT, BF_VADD_32_FUNC_MASK, imm); }

const uint8_t BF_VADD_32_PRECISION_SHIFT = 29;
const uint8_t BF_VADD_32_PRECISION_NBITS = 3;
const uint32_t BF_VADD_32_PRECISION_MASK = 0x7;
const bool BF_VADD_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVadd_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VADD_32_PRECISION_SHIFT, BF_VADD_32_PRECISION_NBITS); }
inline constexpr void embdInstVadd_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VADD_32_PRECISION_SHIFT, BF_VADD_32_PRECISION_MASK, imm); }

const uint8_t BF_VSUB_32_XS_SHIFT = 7;
const uint8_t BF_VSUB_32_XS_NBITS = 5;
const uint32_t BF_VSUB_32_XS_MASK = 0x1f;
const bool BF_VSUB_32_XS_SIGNED = false;
inline constexpr RegId extrInstVsub_32Xs(EncInst inst) { return extrReg5(inst, BF_VSUB_32_XS_SHIFT); }
inline constexpr void embdInstVsub_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSUB_32_XS_SHIFT, reg); }

const uint8_t BF_VSUB_32_XD_SHIFT = 12;
const uint8_t BF_VSUB_32_XD_NBITS = 5;
const uint32_t BF_VSUB_32_XD_MASK = 0x1f;
const bool BF_VSUB_32_XD_SIGNED = false;
inline constexpr RegId extrInstVsub_32Xd(EncInst inst) { return extrReg5(inst, BF_VSUB_32_XD_SHIFT); }
inline constexpr void embdInstVsub_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSUB_32_XD_SHIFT, reg); }

const uint8_t BF_VSUB_32_XT_SHIFT = 17;
const uint8_t BF_VSUB_32_XT_NBITS = 5;
const uint32_t BF_VSUB_32_XT_MASK = 0x1f;
const bool BF_VSUB_32_XT_SIGNED = false;
inline constexpr RegId extrInstVsub_32Xt(EncInst inst) { return extrReg5(inst, BF_VSUB_32_XT_SHIFT); }
inline constexpr void embdInstVsub_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSUB_32_XT_SHIFT, reg); }

const uint8_t BF_VSUB_32_MASK_SHIFT = 22;
const uint8_t BF_VSUB_32_MASK_NBITS = 4;
const uint32_t BF_VSUB_32_MASK_MASK = 0xf;
const bool BF_VSUB_32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVsub_32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VSUB_32_MASK_SHIFT, BF_VSUB_32_MASK_NBITS); }
inline constexpr void embdInstVsub_32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSUB_32_MASK_SHIFT, BF_VSUB_32_MASK_MASK, imm); }

const uint8_t BF_VSUB_32_FUNC_SHIFT = 26;
const uint8_t BF_VSUB_32_FUNC_NBITS = 3;
const uint32_t BF_VSUB_32_FUNC_MASK = 0x7;
const bool BF_VSUB_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVsub_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VSUB_32_FUNC_SHIFT, BF_VSUB_32_FUNC_NBITS); }
inline constexpr void embdInstVsub_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSUB_32_FUNC_SHIFT, BF_VSUB_32_FUNC_MASK, imm); }

const uint8_t BF_VSUB_32_PRECISION_SHIFT = 29;
const uint8_t BF_VSUB_32_PRECISION_NBITS = 3;
const uint32_t BF_VSUB_32_PRECISION_MASK = 0x7;
const bool BF_VSUB_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVsub_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VSUB_32_PRECISION_SHIFT, BF_VSUB_32_PRECISION_NBITS); }
inline constexpr void embdInstVsub_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSUB_32_PRECISION_SHIFT, BF_VSUB_32_PRECISION_MASK, imm); }

const uint8_t BF_VMUL_32_XS_SHIFT = 7;
const uint8_t BF_VMUL_32_XS_NBITS = 5;
const uint32_t BF_VMUL_32_XS_MASK = 0x1f;
const bool BF_VMUL_32_XS_SIGNED = false;
inline constexpr RegId extrInstVmul_32Xs(EncInst inst) { return extrReg5(inst, BF_VMUL_32_XS_SHIFT); }
inline constexpr void embdInstVmul_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMUL_32_XS_SHIFT, reg); }

const uint8_t BF_VMUL_32_XD_SHIFT = 12;
const uint8_t BF_VMUL_32_XD_NBITS = 5;
const uint32_t BF_VMUL_32_XD_MASK = 0x1f;
const bool BF_VMUL_32_XD_SIGNED = false;
inline constexpr RegId extrInstVmul_32Xd(EncInst inst) { return extrReg5(inst, BF_VMUL_32_XD_SHIFT); }
inline constexpr void embdInstVmul_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMUL_32_XD_SHIFT, reg); }

const uint8_t BF_VMUL_32_XT_SHIFT = 17;
const uint8_t BF_VMUL_32_XT_NBITS = 5;
const uint32_t BF_VMUL_32_XT_MASK = 0x1f;
const bool BF_VMUL_32_XT_SIGNED = false;
inline constexpr RegId extrInstVmul_32Xt(EncInst inst) { return extrReg5(inst, BF_VMUL_32_XT_SHIFT); }
inline constexpr void embdInstVmul_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMUL_32_XT_SHIFT, reg); }

const uint8_t BF_VMUL_32_MASK_SHIFT = 22;
const uint8_t BF_VMUL_32_MASK_NBITS = 4;
const uint32_t BF_VMUL_32_MASK_MASK = 0xf;
const bool BF_VMUL_32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVmul_32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VMUL_32_MASK_SHIFT, BF_VMUL_32_MASK_NBITS); }
inline constexpr void embdInstVmul_32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMUL_32_MASK_SHIFT, BF_VMUL_32_MASK_MASK, imm); }

const uint8_t BF_VMUL_32_FUNC_SHIFT = 26;
const uint8_t BF_VMUL_32_FUNC_NBITS = 3;
const uint32_t BF_VMUL_32_FUNC_MASK = 0x7;
const bool BF_VMUL_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVmul_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VMUL_32_FUNC_SHIFT, BF_VMUL_32_FUNC_NBITS); }
inline constexpr void embdInstVmul_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMUL_32_FUNC_SHIFT, BF_VMUL_32_FUNC_MASK, imm); }

const uint8_t BF_VMUL_32_PRECISION_SHIFT = 29;
const uint8_t BF_VMUL_32_PRECISION_NBITS = 3;
const uint32_t BF_VMUL_32_PRECISION_MASK = 0x7;
const bool BF_VMUL_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVmul_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VMUL_32_PRECISION_SHIFT, BF_VMUL_32_PRECISION_NBITS); }
inline constexpr void embdInstVmul_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMUL_32_PRECISION_SHIFT, BF_VMUL_32_PRECISION_MASK, imm); }

const uint8_t BF_VDIV_32_XS_SHIFT = 7;
const uint8_t BF_VDIV_32_XS_NBITS = 5;
const uint32_t BF_VDIV_32_XS_MASK = 0x1f;
const bool BF_VDIV_32_XS_SIGNED = false;
inline constexpr RegId extrInstVdiv_32Xs(EncInst inst) { return extrReg5(inst, BF_VDIV_32_XS_SHIFT); }
inline constexpr void embdInstVdiv_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VDIV_32_XS_SHIFT, reg); }

const uint8_t BF_VDIV_32_XD_SHIFT = 12;
const uint8_t BF_VDIV_32_XD_NBITS = 5;
const uint32_t BF_VDIV_32_XD_MASK = 0x1f;
const bool BF_VDIV_32_XD_SIGNED = false;
inline constexpr RegId extrInstVdiv_32Xd(EncInst inst) { return extrReg5(inst, BF_VDIV_32_XD_SHIFT); }
inline constexpr void embdInstVdiv_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VDIV_32_XD_SHIFT, reg); }

const uint8_t BF_VDIV_32_XT_SHIFT = 17;
const uint8_t BF_VDIV_32_XT_NBITS = 5;
const uint32_t BF_VDIV_32_XT_MASK = 0x1f;
const bool BF_VDIV_32_XT_SIGNED = false;
inline constexpr RegId extrInstVdiv_32Xt(EncInst inst) { return extrReg5(inst, BF_VDIV_32_XT_SHIFT); }
inline constexpr void embdInstVdiv_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VDIV_32_XT_SHIFT, reg); }

const uint8_t BF_VDIV_32_MASK_SHIFT = 22;
const uint8_t BF_VDIV_32_MASK_NBITS = 4;
const uint32_t BF_VDIV_32_MASK_MASK = 0xf;
const bool BF_VDIV_32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVdiv_32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VDIV_32_MASK_SHIFT, BF_VDIV_32_MASK_NBITS); }
inline constexpr void embdInstVdiv_32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VDIV_32_MASK_SHIFT, BF_VDIV_32_MASK_MASK, imm); }

const uint8_t BF_VDIV_32_FUNC_SHIFT = 26;
const uint8_t BF_VDIV_32_FUNC_NBITS = 3;
const uint32_t BF_VDIV_32_FUNC_MASK = 0x7;
const bool BF_VDIV_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVdiv_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VDIV_32_FUNC_SHIFT, BF_VDIV_32_FUNC_NBITS); }
inline constexpr void embdInstVdiv_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VDIV_32_FUNC_SHIFT, BF_VDIV_32_FUNC_MASK, imm); }

const uint8_t BF_VDIV_32_PRECISION_SHIFT = 29;
const uint8_t BF_VDIV_32_PRECISION_NBITS = 3;
const uint32_t BF_VDIV_32_PRECISION_MASK = 0x7;
const bool BF_VDIV_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVdiv_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VDIV_32_PRECISION_SHIFT, BF_VDIV_32_PRECISION_NBITS); }
inline constexpr void embdInstVdiv_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VDIV_32_PRECISION_SHIFT, BF_VDIV_32_PRECISION_MASK, imm); }

const uint8_t BF_VSQRT_32_XS_SHIFT = 7;
const uint8_t BF_VSQRT_32_XS_NBITS = 5;
const uint32_t BF_VSQRT_32_XS_MASK = 0x1f;
const bool BF_VSQRT_32_XS_SIGNED = false;
inline constexpr RegId extrInstVsqrt_32Xs(EncInst inst) { return extrReg5(inst, BF_VSQRT_32_XS_SHIFT); }
inline constexpr void embdInstVsqrt_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSQRT_32_XS_SHIFT, reg); }

const uint8_t BF_VSQRT_32_XD_SHIFT = 12;
const uint8_t BF_VSQRT_32_XD_NBITS = 5;
const uint32_t BF_VSQRT_32_XD_MASK = 0x1f;
const bool BF_VSQRT_32_XD_SIGNED = false;
inline constexpr RegId extrInstVsqrt_32Xd(EncInst inst) { return extrReg5(inst, BF_VSQRT_32_XD_SHIFT); }
inline constexpr void embdInstVsqrt_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSQRT_32_XD_SHIFT, reg); }

const uint8_t BF_VSQRT_32_XT_SHIFT = 17;
const uint8_t BF_VSQRT_32_XT_NBITS = 5;
const uint32_t BF_VSQRT_32_XT_MASK = 0x1f;
const bool BF_VSQRT_32_XT_SIGNED = false;
inline constexpr RegId extrInstVsqrt_32Xt(EncInst inst) { return extrReg5(inst, BF_VSQRT_32_XT_SHIFT); }
inline constexpr void embdInstVsqrt_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSQRT_32_XT_SHIFT, reg); }

const uint8_t BF_VSQRT_32_MASK_SHIFT = 22;
const uint8_t BF_VSQRT_32_MASK_NBITS = 4;
const uint32_t BF_VSQRT_32_MASK_MASK = 0xf;
const bool BF_VSQRT_32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVsqrt_32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VSQRT_32_MASK_SHIFT, BF_VSQRT_32_MASK_NBITS); }
inline constexpr void embdInstVsqrt_32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSQRT_32_MASK_SHIFT, BF_VSQRT_32_MASK_MASK, imm); }

const uint8_t BF_VSQRT_32_FUNC_SHIFT = 26;
const uint8_t BF_VSQRT_32_FUNC_NBITS = 3;
const uint32_t BF_VSQRT_32_FUNC_MASK = 0x7;
const bool BF_VSQRT_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVsqrt_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VSQRT_32_FUNC_SHIFT, BF_VSQRT_32_FUNC_NBITS); }
inline constexpr void embdInstVsqrt_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSQRT_32_FUNC_SHIFT, BF_VSQRT_32_FUNC_MASK, imm); }

const uint8_t BF_VSQRT_32_PRECISION_SHIFT = 29;
const uint8_t BF_VSQRT_32_PRECISION_NBITS = 3;
const uint32_t BF_VSQRT_32_PRECISION_MASK = 0x7;
const bool BF_VSQRT_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVsqrt_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VSQRT_32_PRECISION_SHIFT, BF_VSQRT_32_PRECISION_NBITS); }
inline constexpr void embdInstVsqrt_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSQRT_32_PRECISION_SHIFT, BF_VSQRT_32_PRECISION_MASK, imm); }

const uint8_t BF_VEXP_32_XS_SHIFT = 7;
const uint8_t BF_VEXP_32_XS_NBITS = 5;
const uint32_t BF_VEXP_32_XS_MASK = 0x1f;
const bool BF_VEXP_32_XS_SIGNED = false;
inline constexpr RegId extrInstVexp_32Xs(EncInst inst) { return extrReg5(inst, BF_VEXP_32_XS_SHIFT); }
inline constexpr void embdInstVexp_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VEXP_32_XS_SHIFT, reg); }

const uint8_t BF_VEXP_32_XD_SHIFT = 12;
const uint8_t BF_VEXP_32_XD_NBITS = 5;
const uint32_t BF_VEXP_32_XD_MASK = 0x1f;
const bool BF_VEXP_32_XD_SIGNED = false;
inline constexpr RegId extrInstVexp_32Xd(EncInst inst) { return extrReg5(inst, BF_VEXP_32_XD_SHIFT); }
inline constexpr void embdInstVexp_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VEXP_32_XD_SHIFT, reg); }

const uint8_t BF_VEXP_32_XT_SHIFT = 17;
const uint8_t BF_VEXP_32_XT_NBITS = 5;
const uint32_t BF_VEXP_32_XT_MASK = 0x1f;
const bool BF_VEXP_32_XT_SIGNED = false;
inline constexpr RegId extrInstVexp_32Xt(EncInst inst) { return extrReg5(inst, BF_VEXP_32_XT_SHIFT); }
inline constexpr void embdInstVexp_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VEXP_32_XT_SHIFT, reg); }

const uint8_t BF_VEXP_32_MASK_SHIFT = 22;
const uint8_t BF_VEXP_32_MASK_NBITS = 4;
const uint32_t BF_VEXP_32_MASK_MASK = 0xf;
const bool BF_VEXP_32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVexp_32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VEXP_32_MASK_SHIFT, BF_VEXP_32_MASK_NBITS); }
inline constexpr void embdInstVexp_32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VEXP_32_MASK_SHIFT, BF_VEXP_32_MASK_MASK, imm); }

const uint8_t BF_VEXP_32_FUNC_SHIFT = 26;
const uint8_t BF_VEXP_32_FUNC_NBITS = 3;
const uint32_t BF_VEXP_32_FUNC_MASK = 0x7;
const bool BF_VEXP_32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVexp_32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VEXP_32_FUNC_SHIFT, BF_VEXP_32_FUNC_NBITS); }
inline constexpr void embdInstVexp_32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VEXP_32_FUNC_SHIFT, BF_VEXP_32_FUNC_MASK, imm); }

const uint8_t BF_VEXP_32_PRECISION_SHIFT = 29;
const uint8_t BF_VEXP_32_PRECISION_NBITS = 3;
const uint32_t BF_VEXP_32_PRECISION_MASK = 0x7;
const bool BF_VEXP_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVexp_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VEXP_32_PRECISION_SHIFT, BF_VEXP_32_PRECISION_NBITS); }
inline constexpr void embdInstVexp_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VEXP_32_PRECISION_SHIFT, BF_VEXP_32_PRECISION_MASK, imm); }

const uint8_t BF_VMADD_B16_XS_SHIFT = 7;
const uint8_t BF_VMADD_B16_XS_NBITS = 5;
const uint32_t BF_VMADD_B16_XS_MASK = 0x1f;
const bool BF_VMADD_B16_XS_SIGNED = false;
inline constexpr RegId extrInstVmadd_b16Xs(EncInst inst) { return extrReg5(inst, BF_VMADD_B16_XS_SHIFT); }
inline constexpr void embdInstVmadd_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMADD_B16_XS_SHIFT, reg); }

const uint8_t BF_VMADD_B16_XD_SHIFT = 12;
const uint8_t BF_VMADD_B16_XD_NBITS = 5;
const uint32_t BF_VMADD_B16_XD_MASK = 0x1f;
const bool BF_VMADD_B16_XD_SIGNED = false;
inline constexpr RegId extrInstVmadd_b16Xd(EncInst inst) { return extrReg5(inst, BF_VMADD_B16_XD_SHIFT); }
inline constexpr void embdInstVmadd_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMADD_B16_XD_SHIFT, reg); }

const uint8_t BF_VMADD_B16_XT_SHIFT = 17;
const uint8_t BF_VMADD_B16_XT_NBITS = 5;
const uint32_t BF_VMADD_B16_XT_MASK = 0x1f;
const bool BF_VMADD_B16_XT_SIGNED = false;
inline constexpr RegId extrInstVmadd_b16Xt(EncInst inst) { return extrReg5(inst, BF_VMADD_B16_XT_SHIFT); }
inline constexpr void embdInstVmadd_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMADD_B16_XT_SHIFT, reg); }

const uint8_t BF_VMADD_B16_MASK_SHIFT = 22;
const uint8_t BF_VMADD_B16_MASK_NBITS = 4;
const uint32_t BF_VMADD_B16_MASK_MASK = 0xf;
const bool BF_VMADD_B16_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVmadd_b16Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VMADD_B16_MASK_SHIFT, BF_VMADD_B16_MASK_NBITS); }
inline constexpr void embdInstVmadd_b16Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMADD_B16_MASK_SHIFT, BF_VMADD_B16_MASK_MASK, imm); }

const uint8_t BF_VMADD_B16_FUNC_SHIFT = 26;
const uint8_t BF_VMADD_B16_FUNC_NBITS = 3;
const uint32_t BF_VMADD_B16_FUNC_MASK = 0x7;
const bool BF_VMADD_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVmadd_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_VMADD_B16_FUNC_SHIFT, BF_VMADD_B16_FUNC_NBITS); }
inline constexpr void embdInstVmadd_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMADD_B16_FUNC_SHIFT, BF_VMADD_B16_FUNC_MASK, imm); }

const uint8_t BF_VMADD_B16_PRECISION_SHIFT = 29;
const uint8_t BF_VMADD_B16_PRECISION_NBITS = 3;
const uint32_t BF_VMADD_B16_PRECISION_MASK = 0x7;
const bool BF_VMADD_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVmadd_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VMADD_B16_PRECISION_SHIFT, BF_VMADD_B16_PRECISION_NBITS); }
inline constexpr void embdInstVmadd_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMADD_B16_PRECISION_SHIFT, BF_VMADD_B16_PRECISION_MASK, imm); }

const uint8_t BF_VADD_B16_XS_SHIFT = 7;
const uint8_t BF_VADD_B16_XS_NBITS = 5;
const uint32_t BF_VADD_B16_XS_MASK = 0x1f;
const bool BF_VADD_B16_XS_SIGNED = false;
inline constexpr RegId extrInstVadd_b16Xs(EncInst inst) { return extrReg5(inst, BF_VADD_B16_XS_SHIFT); }
inline constexpr void embdInstVadd_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VADD_B16_XS_SHIFT, reg); }

const uint8_t BF_VADD_B16_XD_SHIFT = 12;
const uint8_t BF_VADD_B16_XD_NBITS = 5;
const uint32_t BF_VADD_B16_XD_MASK = 0x1f;
const bool BF_VADD_B16_XD_SIGNED = false;
inline constexpr RegId extrInstVadd_b16Xd(EncInst inst) { return extrReg5(inst, BF_VADD_B16_XD_SHIFT); }
inline constexpr void embdInstVadd_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VADD_B16_XD_SHIFT, reg); }

const uint8_t BF_VADD_B16_XT_SHIFT = 17;
const uint8_t BF_VADD_B16_XT_NBITS = 5;
const uint32_t BF_VADD_B16_XT_MASK = 0x1f;
const bool BF_VADD_B16_XT_SIGNED = false;
inline constexpr RegId extrInstVadd_b16Xt(EncInst inst) { return extrReg5(inst, BF_VADD_B16_XT_SHIFT); }
inline constexpr void embdInstVadd_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VADD_B16_XT_SHIFT, reg); }

const uint8_t BF_VADD_B16_MASK_SHIFT = 22;
const uint8_t BF_VADD_B16_MASK_NBITS = 4;
const uint32_t BF_VADD_B16_MASK_MASK = 0xf;
const bool BF_VADD_B16_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVadd_b16Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VADD_B16_MASK_SHIFT, BF_VADD_B16_MASK_NBITS); }
inline constexpr void embdInstVadd_b16Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VADD_B16_MASK_SHIFT, BF_VADD_B16_MASK_MASK, imm); }

const uint8_t BF_VADD_B16_FUNC_SHIFT = 26;
const uint8_t BF_VADD_B16_FUNC_NBITS = 3;
const uint32_t BF_VADD_B16_FUNC_MASK = 0x7;
const bool BF_VADD_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVadd_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_VADD_B16_FUNC_SHIFT, BF_VADD_B16_FUNC_NBITS); }
inline constexpr void embdInstVadd_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VADD_B16_FUNC_SHIFT, BF_VADD_B16_FUNC_MASK, imm); }

const uint8_t BF_VADD_B16_PRECISION_SHIFT = 29;
const uint8_t BF_VADD_B16_PRECISION_NBITS = 3;
const uint32_t BF_VADD_B16_PRECISION_MASK = 0x7;
const bool BF_VADD_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVadd_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VADD_B16_PRECISION_SHIFT, BF_VADD_B16_PRECISION_NBITS); }
inline constexpr void embdInstVadd_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VADD_B16_PRECISION_SHIFT, BF_VADD_B16_PRECISION_MASK, imm); }

const uint8_t BF_VSUB_B16_XS_SHIFT = 7;
const uint8_t BF_VSUB_B16_XS_NBITS = 5;
const uint32_t BF_VSUB_B16_XS_MASK = 0x1f;
const bool BF_VSUB_B16_XS_SIGNED = false;
inline constexpr RegId extrInstVsub_b16Xs(EncInst inst) { return extrReg5(inst, BF_VSUB_B16_XS_SHIFT); }
inline constexpr void embdInstVsub_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSUB_B16_XS_SHIFT, reg); }

const uint8_t BF_VSUB_B16_XD_SHIFT = 12;
const uint8_t BF_VSUB_B16_XD_NBITS = 5;
const uint32_t BF_VSUB_B16_XD_MASK = 0x1f;
const bool BF_VSUB_B16_XD_SIGNED = false;
inline constexpr RegId extrInstVsub_b16Xd(EncInst inst) { return extrReg5(inst, BF_VSUB_B16_XD_SHIFT); }
inline constexpr void embdInstVsub_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSUB_B16_XD_SHIFT, reg); }

const uint8_t BF_VSUB_B16_XT_SHIFT = 17;
const uint8_t BF_VSUB_B16_XT_NBITS = 5;
const uint32_t BF_VSUB_B16_XT_MASK = 0x1f;
const bool BF_VSUB_B16_XT_SIGNED = false;
inline constexpr RegId extrInstVsub_b16Xt(EncInst inst) { return extrReg5(inst, BF_VSUB_B16_XT_SHIFT); }
inline constexpr void embdInstVsub_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSUB_B16_XT_SHIFT, reg); }

const uint8_t BF_VSUB_B16_MASK_SHIFT = 22;
const uint8_t BF_VSUB_B16_MASK_NBITS = 4;
const uint32_t BF_VSUB_B16_MASK_MASK = 0xf;
const bool BF_VSUB_B16_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVsub_b16Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VSUB_B16_MASK_SHIFT, BF_VSUB_B16_MASK_NBITS); }
inline constexpr void embdInstVsub_b16Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSUB_B16_MASK_SHIFT, BF_VSUB_B16_MASK_MASK, imm); }

const uint8_t BF_VSUB_B16_FUNC_SHIFT = 26;
const uint8_t BF_VSUB_B16_FUNC_NBITS = 3;
const uint32_t BF_VSUB_B16_FUNC_MASK = 0x7;
const bool BF_VSUB_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVsub_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_VSUB_B16_FUNC_SHIFT, BF_VSUB_B16_FUNC_NBITS); }
inline constexpr void embdInstVsub_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSUB_B16_FUNC_SHIFT, BF_VSUB_B16_FUNC_MASK, imm); }

const uint8_t BF_VSUB_B16_PRECISION_SHIFT = 29;
const uint8_t BF_VSUB_B16_PRECISION_NBITS = 3;
const uint32_t BF_VSUB_B16_PRECISION_MASK = 0x7;
const bool BF_VSUB_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVsub_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VSUB_B16_PRECISION_SHIFT, BF_VSUB_B16_PRECISION_NBITS); }
inline constexpr void embdInstVsub_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSUB_B16_PRECISION_SHIFT, BF_VSUB_B16_PRECISION_MASK, imm); }

const uint8_t BF_VMUL_B16_XS_SHIFT = 7;
const uint8_t BF_VMUL_B16_XS_NBITS = 5;
const uint32_t BF_VMUL_B16_XS_MASK = 0x1f;
const bool BF_VMUL_B16_XS_SIGNED = false;
inline constexpr RegId extrInstVmul_b16Xs(EncInst inst) { return extrReg5(inst, BF_VMUL_B16_XS_SHIFT); }
inline constexpr void embdInstVmul_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMUL_B16_XS_SHIFT, reg); }

const uint8_t BF_VMUL_B16_XD_SHIFT = 12;
const uint8_t BF_VMUL_B16_XD_NBITS = 5;
const uint32_t BF_VMUL_B16_XD_MASK = 0x1f;
const bool BF_VMUL_B16_XD_SIGNED = false;
inline constexpr RegId extrInstVmul_b16Xd(EncInst inst) { return extrReg5(inst, BF_VMUL_B16_XD_SHIFT); }
inline constexpr void embdInstVmul_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMUL_B16_XD_SHIFT, reg); }

const uint8_t BF_VMUL_B16_XT_SHIFT = 17;
const uint8_t BF_VMUL_B16_XT_NBITS = 5;
const uint32_t BF_VMUL_B16_XT_MASK = 0x1f;
const bool BF_VMUL_B16_XT_SIGNED = false;
inline constexpr RegId extrInstVmul_b16Xt(EncInst inst) { return extrReg5(inst, BF_VMUL_B16_XT_SHIFT); }
inline constexpr void embdInstVmul_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMUL_B16_XT_SHIFT, reg); }

const uint8_t BF_VMUL_B16_MASK_SHIFT = 22;
const uint8_t BF_VMUL_B16_MASK_NBITS = 4;
const uint32_t BF_VMUL_B16_MASK_MASK = 0xf;
const bool BF_VMUL_B16_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVmul_b16Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VMUL_B16_MASK_SHIFT, BF_VMUL_B16_MASK_NBITS); }
inline constexpr void embdInstVmul_b16Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMUL_B16_MASK_SHIFT, BF_VMUL_B16_MASK_MASK, imm); }

const uint8_t BF_VMUL_B16_FUNC_SHIFT = 26;
const uint8_t BF_VMUL_B16_FUNC_NBITS = 3;
const uint32_t BF_VMUL_B16_FUNC_MASK = 0x7;
const bool BF_VMUL_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVmul_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_VMUL_B16_FUNC_SHIFT, BF_VMUL_B16_FUNC_NBITS); }
inline constexpr void embdInstVmul_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMUL_B16_FUNC_SHIFT, BF_VMUL_B16_FUNC_MASK, imm); }

const uint8_t BF_VMUL_B16_PRECISION_SHIFT = 29;
const uint8_t BF_VMUL_B16_PRECISION_NBITS = 3;
const uint32_t BF_VMUL_B16_PRECISION_MASK = 0x7;
const bool BF_VMUL_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVmul_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VMUL_B16_PRECISION_SHIFT, BF_VMUL_B16_PRECISION_NBITS); }
inline constexpr void embdInstVmul_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMUL_B16_PRECISION_SHIFT, BF_VMUL_B16_PRECISION_MASK, imm); }

const uint8_t BF_VDIV_B16_XS_SHIFT = 7;
const uint8_t BF_VDIV_B16_XS_NBITS = 5;
const uint32_t BF_VDIV_B16_XS_MASK = 0x1f;
const bool BF_VDIV_B16_XS_SIGNED = false;
inline constexpr RegId extrInstVdiv_b16Xs(EncInst inst) { return extrReg5(inst, BF_VDIV_B16_XS_SHIFT); }
inline constexpr void embdInstVdiv_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VDIV_B16_XS_SHIFT, reg); }

const uint8_t BF_VDIV_B16_XD_SHIFT = 12;
const uint8_t BF_VDIV_B16_XD_NBITS = 5;
const uint32_t BF_VDIV_B16_XD_MASK = 0x1f;
const bool BF_VDIV_B16_XD_SIGNED = false;
inline constexpr RegId extrInstVdiv_b16Xd(EncInst inst) { return extrReg5(inst, BF_VDIV_B16_XD_SHIFT); }
inline constexpr void embdInstVdiv_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VDIV_B16_XD_SHIFT, reg); }

const uint8_t BF_VDIV_B16_XT_SHIFT = 17;
const uint8_t BF_VDIV_B16_XT_NBITS = 5;
const uint32_t BF_VDIV_B16_XT_MASK = 0x1f;
const bool BF_VDIV_B16_XT_SIGNED = false;
inline constexpr RegId extrInstVdiv_b16Xt(EncInst inst) { return extrReg5(inst, BF_VDIV_B16_XT_SHIFT); }
inline constexpr void embdInstVdiv_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VDIV_B16_XT_SHIFT, reg); }

const uint8_t BF_VDIV_B16_MASK_SHIFT = 22;
const uint8_t BF_VDIV_B16_MASK_NBITS = 4;
const uint32_t BF_VDIV_B16_MASK_MASK = 0xf;
const bool BF_VDIV_B16_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVdiv_b16Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VDIV_B16_MASK_SHIFT, BF_VDIV_B16_MASK_NBITS); }
inline constexpr void embdInstVdiv_b16Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VDIV_B16_MASK_SHIFT, BF_VDIV_B16_MASK_MASK, imm); }

const uint8_t BF_VDIV_B16_FUNC_SHIFT = 26;
const uint8_t BF_VDIV_B16_FUNC_NBITS = 3;
const uint32_t BF_VDIV_B16_FUNC_MASK = 0x7;
const bool BF_VDIV_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVdiv_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_VDIV_B16_FUNC_SHIFT, BF_VDIV_B16_FUNC_NBITS); }
inline constexpr void embdInstVdiv_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VDIV_B16_FUNC_SHIFT, BF_VDIV_B16_FUNC_MASK, imm); }

const uint8_t BF_VDIV_B16_PRECISION_SHIFT = 29;
const uint8_t BF_VDIV_B16_PRECISION_NBITS = 3;
const uint32_t BF_VDIV_B16_PRECISION_MASK = 0x7;
const bool BF_VDIV_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVdiv_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VDIV_B16_PRECISION_SHIFT, BF_VDIV_B16_PRECISION_NBITS); }
inline constexpr void embdInstVdiv_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VDIV_B16_PRECISION_SHIFT, BF_VDIV_B16_PRECISION_MASK, imm); }

const uint8_t BF_VSQRT_B16_XS_SHIFT = 7;
const uint8_t BF_VSQRT_B16_XS_NBITS = 5;
const uint32_t BF_VSQRT_B16_XS_MASK = 0x1f;
const bool BF_VSQRT_B16_XS_SIGNED = false;
inline constexpr RegId extrInstVsqrt_b16Xs(EncInst inst) { return extrReg5(inst, BF_VSQRT_B16_XS_SHIFT); }
inline constexpr void embdInstVsqrt_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSQRT_B16_XS_SHIFT, reg); }

const uint8_t BF_VSQRT_B16_XD_SHIFT = 12;
const uint8_t BF_VSQRT_B16_XD_NBITS = 5;
const uint32_t BF_VSQRT_B16_XD_MASK = 0x1f;
const bool BF_VSQRT_B16_XD_SIGNED = false;
inline constexpr RegId extrInstVsqrt_b16Xd(EncInst inst) { return extrReg5(inst, BF_VSQRT_B16_XD_SHIFT); }
inline constexpr void embdInstVsqrt_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSQRT_B16_XD_SHIFT, reg); }

const uint8_t BF_VSQRT_B16_XT_SHIFT = 17;
const uint8_t BF_VSQRT_B16_XT_NBITS = 5;
const uint32_t BF_VSQRT_B16_XT_MASK = 0x1f;
const bool BF_VSQRT_B16_XT_SIGNED = false;
inline constexpr RegId extrInstVsqrt_b16Xt(EncInst inst) { return extrReg5(inst, BF_VSQRT_B16_XT_SHIFT); }
inline constexpr void embdInstVsqrt_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSQRT_B16_XT_SHIFT, reg); }

const uint8_t BF_VSQRT_B16_MASK_SHIFT = 22;
const uint8_t BF_VSQRT_B16_MASK_NBITS = 4;
const uint32_t BF_VSQRT_B16_MASK_MASK = 0xf;
const bool BF_VSQRT_B16_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVsqrt_b16Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VSQRT_B16_MASK_SHIFT, BF_VSQRT_B16_MASK_NBITS); }
inline constexpr void embdInstVsqrt_b16Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSQRT_B16_MASK_SHIFT, BF_VSQRT_B16_MASK_MASK, imm); }

const uint8_t BF_VSQRT_B16_FUNC_SHIFT = 26;
const uint8_t BF_VSQRT_B16_FUNC_NBITS = 3;
const uint32_t BF_VSQRT_B16_FUNC_MASK = 0x7;
const bool BF_VSQRT_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVsqrt_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_VSQRT_B16_FUNC_SHIFT, BF_VSQRT_B16_FUNC_NBITS); }
inline constexpr void embdInstVsqrt_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSQRT_B16_FUNC_SHIFT, BF_VSQRT_B16_FUNC_MASK, imm); }

const uint8_t BF_VSQRT_B16_PRECISION_SHIFT = 29;
const uint8_t BF_VSQRT_B16_PRECISION_NBITS = 3;
const uint32_t BF_VSQRT_B16_PRECISION_MASK = 0x7;
const bool BF_VSQRT_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVsqrt_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VSQRT_B16_PRECISION_SHIFT, BF_VSQRT_B16_PRECISION_NBITS); }
inline constexpr void embdInstVsqrt_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSQRT_B16_PRECISION_SHIFT, BF_VSQRT_B16_PRECISION_MASK, imm); }

const uint8_t BF_VEXP_B16_XS_SHIFT = 7;
const uint8_t BF_VEXP_B16_XS_NBITS = 5;
const uint32_t BF_VEXP_B16_XS_MASK = 0x1f;
const bool BF_VEXP_B16_XS_SIGNED = false;
inline constexpr RegId extrInstVexp_b16Xs(EncInst inst) { return extrReg5(inst, BF_VEXP_B16_XS_SHIFT); }
inline constexpr void embdInstVexp_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VEXP_B16_XS_SHIFT, reg); }

const uint8_t BF_VEXP_B16_XD_SHIFT = 12;
const uint8_t BF_VEXP_B16_XD_NBITS = 5;
const uint32_t BF_VEXP_B16_XD_MASK = 0x1f;
const bool BF_VEXP_B16_XD_SIGNED = false;
inline constexpr RegId extrInstVexp_b16Xd(EncInst inst) { return extrReg5(inst, BF_VEXP_B16_XD_SHIFT); }
inline constexpr void embdInstVexp_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VEXP_B16_XD_SHIFT, reg); }

const uint8_t BF_VEXP_B16_XT_SHIFT = 17;
const uint8_t BF_VEXP_B16_XT_NBITS = 5;
const uint32_t BF_VEXP_B16_XT_MASK = 0x1f;
const bool BF_VEXP_B16_XT_SIGNED = false;
inline constexpr RegId extrInstVexp_b16Xt(EncInst inst) { return extrReg5(inst, BF_VEXP_B16_XT_SHIFT); }
inline constexpr void embdInstVexp_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VEXP_B16_XT_SHIFT, reg); }

const uint8_t BF_VEXP_B16_MASK_SHIFT = 22;
const uint8_t BF_VEXP_B16_MASK_NBITS = 4;
const uint32_t BF_VEXP_B16_MASK_MASK = 0xf;
const bool BF_VEXP_B16_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVexp_b16Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VEXP_B16_MASK_SHIFT, BF_VEXP_B16_MASK_NBITS); }
inline constexpr void embdInstVexp_b16Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VEXP_B16_MASK_SHIFT, BF_VEXP_B16_MASK_MASK, imm); }

const uint8_t BF_VEXP_B16_FUNC_SHIFT = 26;
const uint8_t BF_VEXP_B16_FUNC_NBITS = 3;
const uint32_t BF_VEXP_B16_FUNC_MASK = 0x7;
const bool BF_VEXP_B16_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVexp_b16Func(EncInst inst) { return extrUnsignedImm(inst, BF_VEXP_B16_FUNC_SHIFT, BF_VEXP_B16_FUNC_NBITS); }
inline constexpr void embdInstVexp_b16Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VEXP_B16_FUNC_SHIFT, BF_VEXP_B16_FUNC_MASK, imm); }

const uint8_t BF_VEXP_B16_PRECISION_SHIFT = 29;
const uint8_t BF_VEXP_B16_PRECISION_NBITS = 3;
const uint32_t BF_VEXP_B16_PRECISION_MASK = 0x7;
const bool BF_VEXP_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVexp_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VEXP_B16_PRECISION_SHIFT, BF_VEXP_B16_PRECISION_NBITS); }
inline constexpr void embdInstVexp_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VEXP_B16_PRECISION_SHIFT, BF_VEXP_B16_PRECISION_MASK, imm); }

const uint8_t BF_VMADD_I32_XS_SHIFT = 7;
const uint8_t BF_VMADD_I32_XS_NBITS = 5;
const uint32_t BF_VMADD_I32_XS_MASK = 0x1f;
const bool BF_VMADD_I32_XS_SIGNED = false;
inline constexpr RegId extrInstVmadd_i32Xs(EncInst inst) { return extrReg5(inst, BF_VMADD_I32_XS_SHIFT); }
inline constexpr void embdInstVmadd_i32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMADD_I32_XS_SHIFT, reg); }

const uint8_t BF_VMADD_I32_XD_SHIFT = 12;
const uint8_t BF_VMADD_I32_XD_NBITS = 5;
const uint32_t BF_VMADD_I32_XD_MASK = 0x1f;
const bool BF_VMADD_I32_XD_SIGNED = false;
inline constexpr RegId extrInstVmadd_i32Xd(EncInst inst) { return extrReg5(inst, BF_VMADD_I32_XD_SHIFT); }
inline constexpr void embdInstVmadd_i32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMADD_I32_XD_SHIFT, reg); }

const uint8_t BF_VMADD_I32_XT_SHIFT = 17;
const uint8_t BF_VMADD_I32_XT_NBITS = 5;
const uint32_t BF_VMADD_I32_XT_MASK = 0x1f;
const bool BF_VMADD_I32_XT_SIGNED = false;
inline constexpr RegId extrInstVmadd_i32Xt(EncInst inst) { return extrReg5(inst, BF_VMADD_I32_XT_SHIFT); }
inline constexpr void embdInstVmadd_i32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMADD_I32_XT_SHIFT, reg); }

const uint8_t BF_VMADD_I32_MASK_SHIFT = 22;
const uint8_t BF_VMADD_I32_MASK_NBITS = 4;
const uint32_t BF_VMADD_I32_MASK_MASK = 0xf;
const bool BF_VMADD_I32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVmadd_i32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VMADD_I32_MASK_SHIFT, BF_VMADD_I32_MASK_NBITS); }
inline constexpr void embdInstVmadd_i32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMADD_I32_MASK_SHIFT, BF_VMADD_I32_MASK_MASK, imm); }

const uint8_t BF_VMADD_I32_FUNC_SHIFT = 26;
const uint8_t BF_VMADD_I32_FUNC_NBITS = 3;
const uint32_t BF_VMADD_I32_FUNC_MASK = 0x7;
const bool BF_VMADD_I32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVmadd_i32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VMADD_I32_FUNC_SHIFT, BF_VMADD_I32_FUNC_NBITS); }
inline constexpr void embdInstVmadd_i32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMADD_I32_FUNC_SHIFT, BF_VMADD_I32_FUNC_MASK, imm); }

const uint8_t BF_VMADD_I32_PRECISION_SHIFT = 29;
const uint8_t BF_VMADD_I32_PRECISION_NBITS = 3;
const uint32_t BF_VMADD_I32_PRECISION_MASK = 0x7;
const bool BF_VMADD_I32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVmadd_i32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VMADD_I32_PRECISION_SHIFT, BF_VMADD_I32_PRECISION_NBITS); }
inline constexpr void embdInstVmadd_i32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMADD_I32_PRECISION_SHIFT, BF_VMADD_I32_PRECISION_MASK, imm); }

const uint8_t BF_VADD_I32_XS_SHIFT = 7;
const uint8_t BF_VADD_I32_XS_NBITS = 5;
const uint32_t BF_VADD_I32_XS_MASK = 0x1f;
const bool BF_VADD_I32_XS_SIGNED = false;
inline constexpr RegId extrInstVadd_i32Xs(EncInst inst) { return extrReg5(inst, BF_VADD_I32_XS_SHIFT); }
inline constexpr void embdInstVadd_i32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VADD_I32_XS_SHIFT, reg); }

const uint8_t BF_VADD_I32_XD_SHIFT = 12;
const uint8_t BF_VADD_I32_XD_NBITS = 5;
const uint32_t BF_VADD_I32_XD_MASK = 0x1f;
const bool BF_VADD_I32_XD_SIGNED = false;
inline constexpr RegId extrInstVadd_i32Xd(EncInst inst) { return extrReg5(inst, BF_VADD_I32_XD_SHIFT); }
inline constexpr void embdInstVadd_i32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VADD_I32_XD_SHIFT, reg); }

const uint8_t BF_VADD_I32_XT_SHIFT = 17;
const uint8_t BF_VADD_I32_XT_NBITS = 5;
const uint32_t BF_VADD_I32_XT_MASK = 0x1f;
const bool BF_VADD_I32_XT_SIGNED = false;
inline constexpr RegId extrInstVadd_i32Xt(EncInst inst) { return extrReg5(inst, BF_VADD_I32_XT_SHIFT); }
inline constexpr void embdInstVadd_i32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VADD_I32_XT_SHIFT, reg); }

const uint8_t BF_VADD_I32_MASK_SHIFT = 22;
const uint8_t BF_VADD_I32_MASK_NBITS = 4;
const uint32_t BF_VADD_I32_MASK_MASK = 0xf;
const bool BF_VADD_I32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVadd_i32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VADD_I32_MASK_SHIFT, BF_VADD_I32_MASK_NBITS); }
inline constexpr void embdInstVadd_i32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VADD_I32_MASK_SHIFT, BF_VADD_I32_MASK_MASK, imm); }

const uint8_t BF_VADD_I32_FUNC_SHIFT = 26;
const uint8_t BF_VADD_I32_FUNC_NBITS = 3;
const uint32_t BF_VADD_I32_FUNC_MASK = 0x7;
const bool BF_VADD_I32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVadd_i32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VADD_I32_FUNC_SHIFT, BF_VADD_I32_FUNC_NBITS); }
inline constexpr void embdInstVadd_i32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VADD_I32_FUNC_SHIFT, BF_VADD_I32_FUNC_MASK, imm); }

const uint8_t BF_VADD_I32_PRECISION_SHIFT = 29;
const uint8_t BF_VADD_I32_PRECISION_NBITS = 3;
const uint32_t BF_VADD_I32_PRECISION_MASK = 0x7;
const bool BF_VADD_I32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVadd_i32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VADD_I32_PRECISION_SHIFT, BF_VADD_I32_PRECISION_NBITS); }
inline constexpr void embdInstVadd_i32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VADD_I32_PRECISION_SHIFT, BF_VADD_I32_PRECISION_MASK, imm); }

const uint8_t BF_VSUB_I32_XS_SHIFT = 7;
const uint8_t BF_VSUB_I32_XS_NBITS = 5;
const uint32_t BF_VSUB_I32_XS_MASK = 0x1f;
const bool BF_VSUB_I32_XS_SIGNED = false;
inline constexpr RegId extrInstVsub_i32Xs(EncInst inst) { return extrReg5(inst, BF_VSUB_I32_XS_SHIFT); }
inline constexpr void embdInstVsub_i32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSUB_I32_XS_SHIFT, reg); }

const uint8_t BF_VSUB_I32_XD_SHIFT = 12;
const uint8_t BF_VSUB_I32_XD_NBITS = 5;
const uint32_t BF_VSUB_I32_XD_MASK = 0x1f;
const bool BF_VSUB_I32_XD_SIGNED = false;
inline constexpr RegId extrInstVsub_i32Xd(EncInst inst) { return extrReg5(inst, BF_VSUB_I32_XD_SHIFT); }
inline constexpr void embdInstVsub_i32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSUB_I32_XD_SHIFT, reg); }

const uint8_t BF_VSUB_I32_XT_SHIFT = 17;
const uint8_t BF_VSUB_I32_XT_NBITS = 5;
const uint32_t BF_VSUB_I32_XT_MASK = 0x1f;
const bool BF_VSUB_I32_XT_SIGNED = false;
inline constexpr RegId extrInstVsub_i32Xt(EncInst inst) { return extrReg5(inst, BF_VSUB_I32_XT_SHIFT); }
inline constexpr void embdInstVsub_i32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSUB_I32_XT_SHIFT, reg); }

const uint8_t BF_VSUB_I32_MASK_SHIFT = 22;
const uint8_t BF_VSUB_I32_MASK_NBITS = 4;
const uint32_t BF_VSUB_I32_MASK_MASK = 0xf;
const bool BF_VSUB_I32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVsub_i32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VSUB_I32_MASK_SHIFT, BF_VSUB_I32_MASK_NBITS); }
inline constexpr void embdInstVsub_i32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSUB_I32_MASK_SHIFT, BF_VSUB_I32_MASK_MASK, imm); }

const uint8_t BF_VSUB_I32_FUNC_SHIFT = 26;
const uint8_t BF_VSUB_I32_FUNC_NBITS = 3;
const uint32_t BF_VSUB_I32_FUNC_MASK = 0x7;
const bool BF_VSUB_I32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVsub_i32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VSUB_I32_FUNC_SHIFT, BF_VSUB_I32_FUNC_NBITS); }
inline constexpr void embdInstVsub_i32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSUB_I32_FUNC_SHIFT, BF_VSUB_I32_FUNC_MASK, imm); }

const uint8_t BF_VSUB_I32_PRECISION_SHIFT = 29;
const uint8_t BF_VSUB_I32_PRECISION_NBITS = 3;
const uint32_t BF_VSUB_I32_PRECISION_MASK = 0x7;
const bool BF_VSUB_I32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVsub_i32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VSUB_I32_PRECISION_SHIFT, BF_VSUB_I32_PRECISION_NBITS); }
inline constexpr void embdInstVsub_i32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSUB_I32_PRECISION_SHIFT, BF_VSUB_I32_PRECISION_MASK, imm); }

const uint8_t BF_VMUL_I32_XS_SHIFT = 7;
const uint8_t BF_VMUL_I32_XS_NBITS = 5;
const uint32_t BF_VMUL_I32_XS_MASK = 0x1f;
const bool BF_VMUL_I32_XS_SIGNED = false;
inline constexpr RegId extrInstVmul_i32Xs(EncInst inst) { return extrReg5(inst, BF_VMUL_I32_XS_SHIFT); }
inline constexpr void embdInstVmul_i32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMUL_I32_XS_SHIFT, reg); }

const uint8_t BF_VMUL_I32_XD_SHIFT = 12;
const uint8_t BF_VMUL_I32_XD_NBITS = 5;
const uint32_t BF_VMUL_I32_XD_MASK = 0x1f;
const bool BF_VMUL_I32_XD_SIGNED = false;
inline constexpr RegId extrInstVmul_i32Xd(EncInst inst) { return extrReg5(inst, BF_VMUL_I32_XD_SHIFT); }
inline constexpr void embdInstVmul_i32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMUL_I32_XD_SHIFT, reg); }

const uint8_t BF_VMUL_I32_XT_SHIFT = 17;
const uint8_t BF_VMUL_I32_XT_NBITS = 5;
const uint32_t BF_VMUL_I32_XT_MASK = 0x1f;
const bool BF_VMUL_I32_XT_SIGNED = false;
inline constexpr RegId extrInstVmul_i32Xt(EncInst inst) { return extrReg5(inst, BF_VMUL_I32_XT_SHIFT); }
inline constexpr void embdInstVmul_i32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VMUL_I32_XT_SHIFT, reg); }

const uint8_t BF_VMUL_I32_MASK_SHIFT = 22;
const uint8_t BF_VMUL_I32_MASK_NBITS = 4;
const uint32_t BF_VMUL_I32_MASK_MASK = 0xf;
const bool BF_VMUL_I32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVmul_i32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VMUL_I32_MASK_SHIFT, BF_VMUL_I32_MASK_NBITS); }
inline constexpr void embdInstVmul_i32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMUL_I32_MASK_SHIFT, BF_VMUL_I32_MASK_MASK, imm); }

const uint8_t BF_VMUL_I32_FUNC_SHIFT = 26;
const uint8_t BF_VMUL_I32_FUNC_NBITS = 3;
const uint32_t BF_VMUL_I32_FUNC_MASK = 0x7;
const bool BF_VMUL_I32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVmul_i32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VMUL_I32_FUNC_SHIFT, BF_VMUL_I32_FUNC_NBITS); }
inline constexpr void embdInstVmul_i32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMUL_I32_FUNC_SHIFT, BF_VMUL_I32_FUNC_MASK, imm); }

const uint8_t BF_VMUL_I32_PRECISION_SHIFT = 29;
const uint8_t BF_VMUL_I32_PRECISION_NBITS = 3;
const uint32_t BF_VMUL_I32_PRECISION_MASK = 0x7;
const bool BF_VMUL_I32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVmul_i32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VMUL_I32_PRECISION_SHIFT, BF_VMUL_I32_PRECISION_NBITS); }
inline constexpr void embdInstVmul_i32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VMUL_I32_PRECISION_SHIFT, BF_VMUL_I32_PRECISION_MASK, imm); }

const uint8_t BF_VDIV_I32_XS_SHIFT = 7;
const uint8_t BF_VDIV_I32_XS_NBITS = 5;
const uint32_t BF_VDIV_I32_XS_MASK = 0x1f;
const bool BF_VDIV_I32_XS_SIGNED = false;
inline constexpr RegId extrInstVdiv_i32Xs(EncInst inst) { return extrReg5(inst, BF_VDIV_I32_XS_SHIFT); }
inline constexpr void embdInstVdiv_i32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VDIV_I32_XS_SHIFT, reg); }

const uint8_t BF_VDIV_I32_XD_SHIFT = 12;
const uint8_t BF_VDIV_I32_XD_NBITS = 5;
const uint32_t BF_VDIV_I32_XD_MASK = 0x1f;
const bool BF_VDIV_I32_XD_SIGNED = false;
inline constexpr RegId extrInstVdiv_i32Xd(EncInst inst) { return extrReg5(inst, BF_VDIV_I32_XD_SHIFT); }
inline constexpr void embdInstVdiv_i32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VDIV_I32_XD_SHIFT, reg); }

const uint8_t BF_VDIV_I32_XT_SHIFT = 17;
const uint8_t BF_VDIV_I32_XT_NBITS = 5;
const uint32_t BF_VDIV_I32_XT_MASK = 0x1f;
const bool BF_VDIV_I32_XT_SIGNED = false;
inline constexpr RegId extrInstVdiv_i32Xt(EncInst inst) { return extrReg5(inst, BF_VDIV_I32_XT_SHIFT); }
inline constexpr void embdInstVdiv_i32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VDIV_I32_XT_SHIFT, reg); }

const uint8_t BF_VDIV_I32_MASK_SHIFT = 22;
const uint8_t BF_VDIV_I32_MASK_NBITS = 4;
const uint32_t BF_VDIV_I32_MASK_MASK = 0xf;
const bool BF_VDIV_I32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVdiv_i32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VDIV_I32_MASK_SHIFT, BF_VDIV_I32_MASK_NBITS); }
inline constexpr void embdInstVdiv_i32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VDIV_I32_MASK_SHIFT, BF_VDIV_I32_MASK_MASK, imm); }

const uint8_t BF_VDIV_I32_FUNC_SHIFT = 26;
const uint8_t BF_VDIV_I32_FUNC_NBITS = 3;
const uint32_t BF_VDIV_I32_FUNC_MASK = 0x7;
const bool BF_VDIV_I32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVdiv_i32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VDIV_I32_FUNC_SHIFT, BF_VDIV_I32_FUNC_NBITS); }
inline constexpr void embdInstVdiv_i32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VDIV_I32_FUNC_SHIFT, BF_VDIV_I32_FUNC_MASK, imm); }

const uint8_t BF_VDIV_I32_PRECISION_SHIFT = 29;
const uint8_t BF_VDIV_I32_PRECISION_NBITS = 3;
const uint32_t BF_VDIV_I32_PRECISION_MASK = 0x7;
const bool BF_VDIV_I32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVdiv_i32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VDIV_I32_PRECISION_SHIFT, BF_VDIV_I32_PRECISION_NBITS); }
inline constexpr void embdInstVdiv_i32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VDIV_I32_PRECISION_SHIFT, BF_VDIV_I32_PRECISION_MASK, imm); }

const uint8_t BF_VSQRT_I32_XS_SHIFT = 7;
const uint8_t BF_VSQRT_I32_XS_NBITS = 5;
const uint32_t BF_VSQRT_I32_XS_MASK = 0x1f;
const bool BF_VSQRT_I32_XS_SIGNED = false;
inline constexpr RegId extrInstVsqrt_i32Xs(EncInst inst) { return extrReg5(inst, BF_VSQRT_I32_XS_SHIFT); }
inline constexpr void embdInstVsqrt_i32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSQRT_I32_XS_SHIFT, reg); }

const uint8_t BF_VSQRT_I32_XD_SHIFT = 12;
const uint8_t BF_VSQRT_I32_XD_NBITS = 5;
const uint32_t BF_VSQRT_I32_XD_MASK = 0x1f;
const bool BF_VSQRT_I32_XD_SIGNED = false;
inline constexpr RegId extrInstVsqrt_i32Xd(EncInst inst) { return extrReg5(inst, BF_VSQRT_I32_XD_SHIFT); }
inline constexpr void embdInstVsqrt_i32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSQRT_I32_XD_SHIFT, reg); }

const uint8_t BF_VSQRT_I32_XT_SHIFT = 17;
const uint8_t BF_VSQRT_I32_XT_NBITS = 5;
const uint32_t BF_VSQRT_I32_XT_MASK = 0x1f;
const bool BF_VSQRT_I32_XT_SIGNED = false;
inline constexpr RegId extrInstVsqrt_i32Xt(EncInst inst) { return extrReg5(inst, BF_VSQRT_I32_XT_SHIFT); }
inline constexpr void embdInstVsqrt_i32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VSQRT_I32_XT_SHIFT, reg); }

const uint8_t BF_VSQRT_I32_MASK_SHIFT = 22;
const uint8_t BF_VSQRT_I32_MASK_NBITS = 4;
const uint32_t BF_VSQRT_I32_MASK_MASK = 0xf;
const bool BF_VSQRT_I32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVsqrt_i32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VSQRT_I32_MASK_SHIFT, BF_VSQRT_I32_MASK_NBITS); }
inline constexpr void embdInstVsqrt_i32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSQRT_I32_MASK_SHIFT, BF_VSQRT_I32_MASK_MASK, imm); }

const uint8_t BF_VSQRT_I32_FUNC_SHIFT = 26;
const uint8_t BF_VSQRT_I32_FUNC_NBITS = 3;
const uint32_t BF_VSQRT_I32_FUNC_MASK = 0x7;
const bool BF_VSQRT_I32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVsqrt_i32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VSQRT_I32_FUNC_SHIFT, BF_VSQRT_I32_FUNC_NBITS); }
inline constexpr void embdInstVsqrt_i32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSQRT_I32_FUNC_SHIFT, BF_VSQRT_I32_FUNC_MASK, imm); }

const uint8_t BF_VSQRT_I32_PRECISION_SHIFT = 29;
const uint8_t BF_VSQRT_I32_PRECISION_NBITS = 3;
const uint32_t BF_VSQRT_I32_PRECISION_MASK = 0x7;
const bool BF_VSQRT_I32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVsqrt_i32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VSQRT_I32_PRECISION_SHIFT, BF_VSQRT_I32_PRECISION_NBITS); }
inline constexpr void embdInstVsqrt_i32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VSQRT_I32_PRECISION_SHIFT, BF_VSQRT_I32_PRECISION_MASK, imm); }

const uint8_t BF_VEXP_I32_XS_SHIFT = 7;
const uint8_t BF_VEXP_I32_XS_NBITS = 5;
const uint32_t BF_VEXP_I32_XS_MASK = 0x1f;
const bool BF_VEXP_I32_XS_SIGNED = false;
inline constexpr RegId extrInstVexp_i32Xs(EncInst inst) { return extrReg5(inst, BF_VEXP_I32_XS_SHIFT); }
inline constexpr void embdInstVexp_i32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VEXP_I32_XS_SHIFT, reg); }

const uint8_t BF_VEXP_I32_XD_SHIFT = 12;
const uint8_t BF_VEXP_I32_XD_NBITS = 5;
const uint32_t BF_VEXP_I32_XD_MASK = 0x1f;
const bool BF_VEXP_I32_XD_SIGNED = false;
inline constexpr RegId extrInstVexp_i32Xd(EncInst inst) { return extrReg5(inst, BF_VEXP_I32_XD_SHIFT); }
inline constexpr void embdInstVexp_i32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VEXP_I32_XD_SHIFT, reg); }

const uint8_t BF_VEXP_I32_XT_SHIFT = 17;
const uint8_t BF_VEXP_I32_XT_NBITS = 5;
const uint32_t BF_VEXP_I32_XT_MASK = 0x1f;
const bool BF_VEXP_I32_XT_SIGNED = false;
inline constexpr RegId extrInstVexp_i32Xt(EncInst inst) { return extrReg5(inst, BF_VEXP_I32_XT_SHIFT); }
inline constexpr void embdInstVexp_i32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VEXP_I32_XT_SHIFT, reg); }

const uint8_t BF_VEXP_I32_MASK_SHIFT = 22;
const uint8_t BF_VEXP_I32_MASK_NBITS = 4;
const uint32_t BF_VEXP_I32_MASK_MASK = 0xf;
const bool BF_VEXP_I32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVexp_i32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VEXP_I32_MASK_SHIFT, BF_VEXP_I32_MASK_NBITS); }
inline constexpr void embdInstVexp_i32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VEXP_I32_MASK_SHIFT, BF_VEXP_I32_MASK_MASK, imm); }

const uint8_t BF_VEXP_I32_FUNC_SHIFT = 26;
const uint8_t BF_VEXP_I32_FUNC_NBITS = 3;
const uint32_t BF_VEXP_I32_FUNC_MASK = 0x7;
const bool BF_VEXP_I32_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstVexp_i32Func(EncInst inst) { return extrUnsignedImm(inst, BF_VEXP_I32_FUNC_SHIFT, BF_VEXP_I32_FUNC_NBITS); }
inline constexpr void embdInstVexp_i32Func(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VEXP_I32_FUNC_SHIFT, BF_VEXP_I32_FUNC_MASK, imm); }

const uint8_t BF_VEXP_I32_PRECISION_SHIFT = 29;
const uint8_t BF_VEXP_I32_PRECISION_NBITS = 3;
const uint32_t BF_VEXP_I32_PRECISION_MASK = 0x7;
const bool BF_VEXP_I32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVexp_i32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VEXP_I32_PRECISION_SHIFT, BF_VEXP_I32_PRECISION_NBITS); }
inline constexpr void embdInstVexp_i32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VEXP_I32_PRECISION_SHIFT, BF_VEXP_I32_PRECISION_MASK, imm); }

const uint8_t BF_VGT_32_XS_SHIFT = 7;
const uint8_t BF_VGT_32_XS_NBITS = 5;
const uint32_t BF_VGT_32_XS_MASK = 0x1f;
const bool BF_VGT_32_XS_SIGNED = false;
inline constexpr RegId extrInstVgt_32Xs(EncInst inst) { return extrReg5(inst, BF_VGT_32_XS_SHIFT); }
inline constexpr void embdInstVgt_32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VGT_32_XS_SHIFT, reg); }

const uint8_t BF_VGT_32_XD_SHIFT = 12;
const uint8_t BF_VGT_32_XD_NBITS = 5;
const uint32_t BF_VGT_32_XD_MASK = 0x1f;
const bool BF_VGT_32_XD_SIGNED = false;
inline constexpr RegId extrInstVgt_32Xd(EncInst inst) { return extrReg5(inst, BF_VGT_32_XD_SHIFT); }
inline constexpr void embdInstVgt_32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VGT_32_XD_SHIFT, reg); }

const uint8_t BF_VGT_32_XT_SHIFT = 17;
const uint8_t BF_VGT_32_XT_NBITS = 5;
const uint32_t BF_VGT_32_XT_MASK = 0x1f;
const bool BF_VGT_32_XT_SIGNED = false;
inline constexpr RegId extrInstVgt_32Xt(EncInst inst) { return extrReg5(inst, BF_VGT_32_XT_SHIFT); }
inline constexpr void embdInstVgt_32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VGT_32_XT_SHIFT, reg); }

const uint8_t BF_VGT_32_MASK_SHIFT = 22;
const uint8_t BF_VGT_32_MASK_NBITS = 4;
const uint32_t BF_VGT_32_MASK_MASK = 0xf;
const bool BF_VGT_32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVgt_32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VGT_32_MASK_SHIFT, BF_VGT_32_MASK_NBITS); }
inline constexpr void embdInstVgt_32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VGT_32_MASK_SHIFT, BF_VGT_32_MASK_MASK, imm); }

const uint8_t BF_VGT_32_PRECISION_SHIFT = 29;
const uint8_t BF_VGT_32_PRECISION_NBITS = 3;
const uint32_t BF_VGT_32_PRECISION_MASK = 0x7;
const bool BF_VGT_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVgt_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VGT_32_PRECISION_SHIFT, BF_VGT_32_PRECISION_NBITS); }
inline constexpr void embdInstVgt_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VGT_32_PRECISION_SHIFT, BF_VGT_32_PRECISION_MASK, imm); }

const uint8_t BF_VGT_B16_XS_SHIFT = 7;
const uint8_t BF_VGT_B16_XS_NBITS = 5;
const uint32_t BF_VGT_B16_XS_MASK = 0x1f;
const bool BF_VGT_B16_XS_SIGNED = false;
inline constexpr RegId extrInstVgt_b16Xs(EncInst inst) { return extrReg5(inst, BF_VGT_B16_XS_SHIFT); }
inline constexpr void embdInstVgt_b16Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VGT_B16_XS_SHIFT, reg); }

const uint8_t BF_VGT_B16_XD_SHIFT = 12;
const uint8_t BF_VGT_B16_XD_NBITS = 5;
const uint32_t BF_VGT_B16_XD_MASK = 0x1f;
const bool BF_VGT_B16_XD_SIGNED = false;
inline constexpr RegId extrInstVgt_b16Xd(EncInst inst) { return extrReg5(inst, BF_VGT_B16_XD_SHIFT); }
inline constexpr void embdInstVgt_b16Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VGT_B16_XD_SHIFT, reg); }

const uint8_t BF_VGT_B16_XT_SHIFT = 17;
const uint8_t BF_VGT_B16_XT_NBITS = 5;
const uint32_t BF_VGT_B16_XT_MASK = 0x1f;
const bool BF_VGT_B16_XT_SIGNED = false;
inline constexpr RegId extrInstVgt_b16Xt(EncInst inst) { return extrReg5(inst, BF_VGT_B16_XT_SHIFT); }
inline constexpr void embdInstVgt_b16Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VGT_B16_XT_SHIFT, reg); }

const uint8_t BF_VGT_B16_MASK_SHIFT = 22;
const uint8_t BF_VGT_B16_MASK_NBITS = 4;
const uint32_t BF_VGT_B16_MASK_MASK = 0xf;
const bool BF_VGT_B16_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVgt_b16Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VGT_B16_MASK_SHIFT, BF_VGT_B16_MASK_NBITS); }
inline constexpr void embdInstVgt_b16Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VGT_B16_MASK_SHIFT, BF_VGT_B16_MASK_MASK, imm); }

const uint8_t BF_VGT_B16_PRECISION_SHIFT = 29;
const uint8_t BF_VGT_B16_PRECISION_NBITS = 3;
const uint32_t BF_VGT_B16_PRECISION_MASK = 0x7;
const bool BF_VGT_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVgt_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VGT_B16_PRECISION_SHIFT, BF_VGT_B16_PRECISION_NBITS); }
inline constexpr void embdInstVgt_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VGT_B16_PRECISION_SHIFT, BF_VGT_B16_PRECISION_MASK, imm); }

const uint8_t BF_VGT_I32_XS_SHIFT = 7;
const uint8_t BF_VGT_I32_XS_NBITS = 5;
const uint32_t BF_VGT_I32_XS_MASK = 0x1f;
const bool BF_VGT_I32_XS_SIGNED = false;
inline constexpr RegId extrInstVgt_i32Xs(EncInst inst) { return extrReg5(inst, BF_VGT_I32_XS_SHIFT); }
inline constexpr void embdInstVgt_i32Xs(EncInst& inst, RegId reg) { embdReg5(inst, BF_VGT_I32_XS_SHIFT, reg); }

const uint8_t BF_VGT_I32_XD_SHIFT = 12;
const uint8_t BF_VGT_I32_XD_NBITS = 5;
const uint32_t BF_VGT_I32_XD_MASK = 0x1f;
const bool BF_VGT_I32_XD_SIGNED = false;
inline constexpr RegId extrInstVgt_i32Xd(EncInst inst) { return extrReg5(inst, BF_VGT_I32_XD_SHIFT); }
inline constexpr void embdInstVgt_i32Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_VGT_I32_XD_SHIFT, reg); }

const uint8_t BF_VGT_I32_XT_SHIFT = 17;
const uint8_t BF_VGT_I32_XT_NBITS = 5;
const uint32_t BF_VGT_I32_XT_MASK = 0x1f;
const bool BF_VGT_I32_XT_SIGNED = false;
inline constexpr RegId extrInstVgt_i32Xt(EncInst inst) { return extrReg5(inst, BF_VGT_I32_XT_SHIFT); }
inline constexpr void embdInstVgt_i32Xt(EncInst& inst, RegId reg) { embdReg5(inst, BF_VGT_I32_XT_SHIFT, reg); }

const uint8_t BF_VGT_I32_MASK_SHIFT = 22;
const uint8_t BF_VGT_I32_MASK_NBITS = 4;
const uint32_t BF_VGT_I32_MASK_MASK = 0xf;
const bool BF_VGT_I32_MASK_SIGNED = false;
inline constexpr uint64_t extrInstVgt_i32Mask(EncInst inst) { return extrUnsignedImm(inst, BF_VGT_I32_MASK_SHIFT, BF_VGT_I32_MASK_NBITS); }
inline constexpr void embdInstVgt_i32Mask(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VGT_I32_MASK_SHIFT, BF_VGT_I32_MASK_MASK, imm); }

const uint8_t BF_VGT_I32_PRECISION_SHIFT = 29;
const uint8_t BF_VGT_I32_PRECISION_NBITS = 3;
const uint32_t BF_VGT_I32_PRECISION_MASK = 0x7;
const bool BF_VGT_I32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVgt_i32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VGT_I32_PRECISION_SHIFT, BF_VGT_I32_PRECISION_NBITS); }
inline constexpr void embdInstVgt_i32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VGT_I32_PRECISION_SHIFT, BF_VGT_I32_PRECISION_MASK, imm); }

/* B-Type Bitfields */
const uint8_t BF_BTYPE_XS1_SHIFT = 7;
const uint8_t BF_BTYPE_XS1_NBITS = 5;
const uint32_t BF_BTYPE_XS1_MASK = 0x1f;
const bool BF_BTYPE_XS1_SIGNED = false;
inline constexpr RegId extrInstBtypeXs1(EncInst inst) { return extrReg5(inst, BF_BTYPE_XS1_SHIFT); }
inline constexpr void embdInstBtypeXs1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BTYPE_XS1_SHIFT, reg); }

const uint8_t BF_BTYPE_XS2_SHIFT = 12;
const uint8_t BF_BTYPE_XS2_NBITS = 5;
const uint32_t BF_BTYPE_XS2_MASK = 0x1f;
const bool BF_BTYPE_XS2_SIGNED = false;
inline constexpr RegId extrInstBtypeXs2(EncInst inst) { return extrReg5(inst, BF_BTYPE_XS2_SHIFT); }
inline constexpr void embdInstBtypeXs2(EncInst& inst, RegId reg) { embdReg5(inst, BF_BTYPE_XS2_SHIFT, reg); }

const uint8_t BF_BTYPE_IMM12A_SHIFT = 17;
const uint8_t BF_BTYPE_IMM12A_NBITS = 9;
const uint32_t BF_BTYPE_IMM12A_MASK = 0x1ff;
const bool BF_BTYPE_IMM12A_SIGNED = false;
inline constexpr uint64_t extrInstBtypeImm12a(EncInst inst) { return extrUnsignedImm(inst, BF_BTYPE_IMM12A_SHIFT, BF_BTYPE_IMM12A_NBITS); }
inline constexpr void embdInstBtypeImm12a(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BTYPE_IMM12A_SHIFT, BF_BTYPE_IMM12A_MASK, imm); }

const uint8_t BF_BTYPE_FUNC_SHIFT = 26;
const uint8_t BF_BTYPE_FUNC_NBITS = 3;
const uint32_t BF_BTYPE_FUNC_MASK = 0x7;
const bool BF_BTYPE_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBtypeFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BTYPE_FUNC_SHIFT, BF_BTYPE_FUNC_NBITS); }
inline constexpr void embdInstBtypeFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BTYPE_FUNC_SHIFT, BF_BTYPE_FUNC_MASK, imm); }

const uint8_t BF_BTYPE_IMM12B_SHIFT = 29;
const uint8_t BF_BTYPE_IMM12B_NBITS = 3;
const uint32_t BF_BTYPE_IMM12B_MASK = 0x7;
const bool BF_BTYPE_IMM12B_SIGNED = true;
inline constexpr int64_t extrInstBtypeImm12b(EncInst inst) { return extrSignedImm(inst, BF_BTYPE_IMM12B_SHIFT, BF_BTYPE_IMM12B_NBITS); }
inline constexpr void embdInstBtypeImm12b(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BTYPE_IMM12B_SHIFT, BF_BTYPE_IMM12B_MASK, imm); }

const uint8_t BF_BNE_X1_SHIFT = 7;
const uint8_t BF_BNE_X1_NBITS = 5;
const uint32_t BF_BNE_X1_MASK = 0x1f;
const bool BF_BNE_X1_SIGNED = false;
inline constexpr RegId extrInstBneX1(EncInst inst) { return extrReg5(inst, BF_BNE_X1_SHIFT); }
inline constexpr void embdInstBneX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BNE_X1_SHIFT, reg); }

const uint8_t BF_BNE_X2_SHIFT = 12;
const uint8_t BF_BNE_X2_NBITS = 5;
const uint32_t BF_BNE_X2_MASK = 0x1f;
const bool BF_BNE_X2_SIGNED = false;
inline constexpr RegId extrInstBneX2(EncInst inst) { return extrReg5(inst, BF_BNE_X2_SHIFT); }
inline constexpr void embdInstBneX2(EncInst& inst, RegId reg) { embdReg5(inst, BF_BNE_X2_SHIFT, reg); }

const uint8_t BF_BNE_TARGETA_SHIFT = 17;
const uint8_t BF_BNE_TARGETA_NBITS = 9;
const uint32_t BF_BNE_TARGETA_MASK = 0x1ff;
const bool BF_BNE_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBneTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BNE_TARGETA_SHIFT, BF_BNE_TARGETA_NBITS); }
inline constexpr void embdInstBneTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BNE_TARGETA_SHIFT, BF_BNE_TARGETA_MASK, imm); }

const uint8_t BF_BNE_FUNC_SHIFT = 26;
const uint8_t BF_BNE_FUNC_NBITS = 3;
const uint32_t BF_BNE_FUNC_MASK = 0x7;
const bool BF_BNE_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBneFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BNE_FUNC_SHIFT, BF_BNE_FUNC_NBITS); }
inline constexpr void embdInstBneFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BNE_FUNC_SHIFT, BF_BNE_FUNC_MASK, imm); }

const uint8_t BF_BNE_TARGETB_SHIFT = 29;
const uint8_t BF_BNE_TARGETB_NBITS = 3;
const uint32_t BF_BNE_TARGETB_MASK = 0x7;
const bool BF_BNE_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBneTargetb(EncInst inst) { return extrSignedImm(inst, BF_BNE_TARGETB_SHIFT, BF_BNE_TARGETB_NBITS); }
inline constexpr void embdInstBneTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BNE_TARGETB_SHIFT, BF_BNE_TARGETB_MASK, imm); }

const uint8_t BF_BEQ_X1_SHIFT = 7;
const uint8_t BF_BEQ_X1_NBITS = 5;
const uint32_t BF_BEQ_X1_MASK = 0x1f;
const bool BF_BEQ_X1_SIGNED = false;
inline constexpr RegId extrInstBeqX1(EncInst inst) { return extrReg5(inst, BF_BEQ_X1_SHIFT); }
inline constexpr void embdInstBeqX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BEQ_X1_SHIFT, reg); }

const uint8_t BF_BEQ_X2_SHIFT = 12;
const uint8_t BF_BEQ_X2_NBITS = 5;
const uint32_t BF_BEQ_X2_MASK = 0x1f;
const bool BF_BEQ_X2_SIGNED = false;
inline constexpr RegId extrInstBeqX2(EncInst inst) { return extrReg5(inst, BF_BEQ_X2_SHIFT); }
inline constexpr void embdInstBeqX2(EncInst& inst, RegId reg) { embdReg5(inst, BF_BEQ_X2_SHIFT, reg); }

const uint8_t BF_BEQ_TARGETA_SHIFT = 17;
const uint8_t BF_BEQ_TARGETA_NBITS = 9;
const uint32_t BF_BEQ_TARGETA_MASK = 0x1ff;
const bool BF_BEQ_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBeqTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BEQ_TARGETA_SHIFT, BF_BEQ_TARGETA_NBITS); }
inline constexpr void embdInstBeqTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BEQ_TARGETA_SHIFT, BF_BEQ_TARGETA_MASK, imm); }

const uint8_t BF_BEQ_FUNC_SHIFT = 26;
const uint8_t BF_BEQ_FUNC_NBITS = 3;
const uint32_t BF_BEQ_FUNC_MASK = 0x7;
const bool BF_BEQ_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBeqFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BEQ_FUNC_SHIFT, BF_BEQ_FUNC_NBITS); }
inline constexpr void embdInstBeqFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BEQ_FUNC_SHIFT, BF_BEQ_FUNC_MASK, imm); }

const uint8_t BF_BEQ_TARGETB_SHIFT = 29;
const uint8_t BF_BEQ_TARGETB_NBITS = 3;
const uint32_t BF_BEQ_TARGETB_MASK = 0x7;
const bool BF_BEQ_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBeqTargetb(EncInst inst) { return extrSignedImm(inst, BF_BEQ_TARGETB_SHIFT, BF_BEQ_TARGETB_NBITS); }
inline constexpr void embdInstBeqTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BEQ_TARGETB_SHIFT, BF_BEQ_TARGETB_MASK, imm); }

const uint8_t BF_BGT_X1_SHIFT = 7;
const uint8_t BF_BGT_X1_NBITS = 5;
const uint32_t BF_BGT_X1_MASK = 0x1f;
const bool BF_BGT_X1_SIGNED = false;
inline constexpr RegId extrInstBgtX1(EncInst inst) { return extrReg5(inst, BF_BGT_X1_SHIFT); }
inline constexpr void embdInstBgtX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BGT_X1_SHIFT, reg); }

const uint8_t BF_BGT_X2_SHIFT = 12;
const uint8_t BF_BGT_X2_NBITS = 5;
const uint32_t BF_BGT_X2_MASK = 0x1f;
const bool BF_BGT_X2_SIGNED = false;
inline constexpr RegId extrInstBgtX2(EncInst inst) { return extrReg5(inst, BF_BGT_X2_SHIFT); }
inline constexpr void embdInstBgtX2(EncInst& inst, RegId reg) { embdReg5(inst, BF_BGT_X2_SHIFT, reg); }

const uint8_t BF_BGT_TARGETA_SHIFT = 17;
const uint8_t BF_BGT_TARGETA_NBITS = 9;
const uint32_t BF_BGT_TARGETA_MASK = 0x1ff;
const bool BF_BGT_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBgtTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BGT_TARGETA_SHIFT, BF_BGT_TARGETA_NBITS); }
inline constexpr void embdInstBgtTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGT_TARGETA_SHIFT, BF_BGT_TARGETA_MASK, imm); }

const uint8_t BF_BGT_FUNC_SHIFT = 26;
const uint8_t BF_BGT_FUNC_NBITS = 3;
const uint32_t BF_BGT_FUNC_MASK = 0x7;
const bool BF_BGT_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBgtFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BGT_FUNC_SHIFT, BF_BGT_FUNC_NBITS); }
inline constexpr void embdInstBgtFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGT_FUNC_SHIFT, BF_BGT_FUNC_MASK, imm); }

const uint8_t BF_BGT_TARGETB_SHIFT = 29;
const uint8_t BF_BGT_TARGETB_NBITS = 3;
const uint32_t BF_BGT_TARGETB_MASK = 0x7;
const bool BF_BGT_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBgtTargetb(EncInst inst) { return extrSignedImm(inst, BF_BGT_TARGETB_SHIFT, BF_BGT_TARGETB_NBITS); }
inline constexpr void embdInstBgtTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BGT_TARGETB_SHIFT, BF_BGT_TARGETB_MASK, imm); }

const uint8_t BF_BLE_X1_SHIFT = 7;
const uint8_t BF_BLE_X1_NBITS = 5;
const uint32_t BF_BLE_X1_MASK = 0x1f;
const bool BF_BLE_X1_SIGNED = false;
inline constexpr RegId extrInstBleX1(EncInst inst) { return extrReg5(inst, BF_BLE_X1_SHIFT); }
inline constexpr void embdInstBleX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BLE_X1_SHIFT, reg); }

const uint8_t BF_BLE_X2_SHIFT = 12;
const uint8_t BF_BLE_X2_NBITS = 5;
const uint32_t BF_BLE_X2_MASK = 0x1f;
const bool BF_BLE_X2_SIGNED = false;
inline constexpr RegId extrInstBleX2(EncInst inst) { return extrReg5(inst, BF_BLE_X2_SHIFT); }
inline constexpr void embdInstBleX2(EncInst& inst, RegId reg) { embdReg5(inst, BF_BLE_X2_SHIFT, reg); }

const uint8_t BF_BLE_TARGETA_SHIFT = 17;
const uint8_t BF_BLE_TARGETA_NBITS = 9;
const uint32_t BF_BLE_TARGETA_MASK = 0x1ff;
const bool BF_BLE_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBleTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BLE_TARGETA_SHIFT, BF_BLE_TARGETA_NBITS); }
inline constexpr void embdInstBleTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLE_TARGETA_SHIFT, BF_BLE_TARGETA_MASK, imm); }

const uint8_t BF_BLE_FUNC_SHIFT = 26;
const uint8_t BF_BLE_FUNC_NBITS = 3;
const uint32_t BF_BLE_FUNC_MASK = 0x7;
const bool BF_BLE_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBleFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BLE_FUNC_SHIFT, BF_BLE_FUNC_NBITS); }
inline constexpr void embdInstBleFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLE_FUNC_SHIFT, BF_BLE_FUNC_MASK, imm); }

const uint8_t BF_BLE_TARGETB_SHIFT = 29;
const uint8_t BF_BLE_TARGETB_NBITS = 3;
const uint32_t BF_BLE_TARGETB_MASK = 0x7;
const bool BF_BLE_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBleTargetb(EncInst inst) { return extrSignedImm(inst, BF_BLE_TARGETB_SHIFT, BF_BLE_TARGETB_NBITS); }
inline constexpr void embdInstBleTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BLE_TARGETB_SHIFT, BF_BLE_TARGETB_MASK, imm); }

const uint8_t BF_BNEU_X1_SHIFT = 7;
const uint8_t BF_BNEU_X1_NBITS = 5;
const uint32_t BF_BNEU_X1_MASK = 0x1f;
const bool BF_BNEU_X1_SIGNED = false;
inline constexpr RegId extrInstBneuX1(EncInst inst) { return extrReg5(inst, BF_BNEU_X1_SHIFT); }
inline constexpr void embdInstBneuX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BNEU_X1_SHIFT, reg); }

const uint8_t BF_BNEU_X2_SHIFT = 12;
const uint8_t BF_BNEU_X2_NBITS = 5;
const uint32_t BF_BNEU_X2_MASK = 0x1f;
const bool BF_BNEU_X2_SIGNED = false;
inline constexpr RegId extrInstBneuX2(EncInst inst) { return extrReg5(inst, BF_BNEU_X2_SHIFT); }
inline constexpr void embdInstBneuX2(EncInst& inst, RegId reg) { embdReg5(inst, BF_BNEU_X2_SHIFT, reg); }

const uint8_t BF_BNEU_TARGETA_SHIFT = 17;
const uint8_t BF_BNEU_TARGETA_NBITS = 9;
const uint32_t BF_BNEU_TARGETA_MASK = 0x1ff;
const bool BF_BNEU_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBneuTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BNEU_TARGETA_SHIFT, BF_BNEU_TARGETA_NBITS); }
inline constexpr void embdInstBneuTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BNEU_TARGETA_SHIFT, BF_BNEU_TARGETA_MASK, imm); }

const uint8_t BF_BNEU_FUNC_SHIFT = 26;
const uint8_t BF_BNEU_FUNC_NBITS = 3;
const uint32_t BF_BNEU_FUNC_MASK = 0x7;
const bool BF_BNEU_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBneuFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BNEU_FUNC_SHIFT, BF_BNEU_FUNC_NBITS); }
inline constexpr void embdInstBneuFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BNEU_FUNC_SHIFT, BF_BNEU_FUNC_MASK, imm); }

const uint8_t BF_BNEU_TARGETB_SHIFT = 29;
const uint8_t BF_BNEU_TARGETB_NBITS = 3;
const uint32_t BF_BNEU_TARGETB_MASK = 0x7;
const bool BF_BNEU_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBneuTargetb(EncInst inst) { return extrSignedImm(inst, BF_BNEU_TARGETB_SHIFT, BF_BNEU_TARGETB_NBITS); }
inline constexpr void embdInstBneuTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BNEU_TARGETB_SHIFT, BF_BNEU_TARGETB_MASK, imm); }

const uint8_t BF_BEQU_X1_SHIFT = 7;
const uint8_t BF_BEQU_X1_NBITS = 5;
const uint32_t BF_BEQU_X1_MASK = 0x1f;
const bool BF_BEQU_X1_SIGNED = false;
inline constexpr RegId extrInstBequX1(EncInst inst) { return extrReg5(inst, BF_BEQU_X1_SHIFT); }
inline constexpr void embdInstBequX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BEQU_X1_SHIFT, reg); }

const uint8_t BF_BEQU_X2_SHIFT = 12;
const uint8_t BF_BEQU_X2_NBITS = 5;
const uint32_t BF_BEQU_X2_MASK = 0x1f;
const bool BF_BEQU_X2_SIGNED = false;
inline constexpr RegId extrInstBequX2(EncInst inst) { return extrReg5(inst, BF_BEQU_X2_SHIFT); }
inline constexpr void embdInstBequX2(EncInst& inst, RegId reg) { embdReg5(inst, BF_BEQU_X2_SHIFT, reg); }

const uint8_t BF_BEQU_TARGETA_SHIFT = 17;
const uint8_t BF_BEQU_TARGETA_NBITS = 9;
const uint32_t BF_BEQU_TARGETA_MASK = 0x1ff;
const bool BF_BEQU_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBequTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BEQU_TARGETA_SHIFT, BF_BEQU_TARGETA_NBITS); }
inline constexpr void embdInstBequTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BEQU_TARGETA_SHIFT, BF_BEQU_TARGETA_MASK, imm); }

const uint8_t BF_BEQU_FUNC_SHIFT = 26;
const uint8_t BF_BEQU_FUNC_NBITS = 3;
const uint32_t BF_BEQU_FUNC_MASK = 0x7;
const bool BF_BEQU_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBequFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BEQU_FUNC_SHIFT, BF_BEQU_FUNC_NBITS); }
inline constexpr void embdInstBequFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BEQU_FUNC_SHIFT, BF_BEQU_FUNC_MASK, imm); }

const uint8_t BF_BEQU_TARGETB_SHIFT = 29;
const uint8_t BF_BEQU_TARGETB_NBITS = 3;
const uint32_t BF_BEQU_TARGETB_MASK = 0x7;
const bool BF_BEQU_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBequTargetb(EncInst inst) { return extrSignedImm(inst, BF_BEQU_TARGETB_SHIFT, BF_BEQU_TARGETB_NBITS); }
inline constexpr void embdInstBequTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BEQU_TARGETB_SHIFT, BF_BEQU_TARGETB_MASK, imm); }

const uint8_t BF_BGTU_X1_SHIFT = 7;
const uint8_t BF_BGTU_X1_NBITS = 5;
const uint32_t BF_BGTU_X1_MASK = 0x1f;
const bool BF_BGTU_X1_SIGNED = false;
inline constexpr RegId extrInstBgtuX1(EncInst inst) { return extrReg5(inst, BF_BGTU_X1_SHIFT); }
inline constexpr void embdInstBgtuX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BGTU_X1_SHIFT, reg); }

const uint8_t BF_BGTU_X2_SHIFT = 12;
const uint8_t BF_BGTU_X2_NBITS = 5;
const uint32_t BF_BGTU_X2_MASK = 0x1f;
const bool BF_BGTU_X2_SIGNED = false;
inline constexpr RegId extrInstBgtuX2(EncInst inst) { return extrReg5(inst, BF_BGTU_X2_SHIFT); }
inline constexpr void embdInstBgtuX2(EncInst& inst, RegId reg) { embdReg5(inst, BF_BGTU_X2_SHIFT, reg); }

const uint8_t BF_BGTU_TARGETA_SHIFT = 17;
const uint8_t BF_BGTU_TARGETA_NBITS = 9;
const uint32_t BF_BGTU_TARGETA_MASK = 0x1ff;
const bool BF_BGTU_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBgtuTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BGTU_TARGETA_SHIFT, BF_BGTU_TARGETA_NBITS); }
inline constexpr void embdInstBgtuTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGTU_TARGETA_SHIFT, BF_BGTU_TARGETA_MASK, imm); }

const uint8_t BF_BGTU_FUNC_SHIFT = 26;
const uint8_t BF_BGTU_FUNC_NBITS = 3;
const uint32_t BF_BGTU_FUNC_MASK = 0x7;
const bool BF_BGTU_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBgtuFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BGTU_FUNC_SHIFT, BF_BGTU_FUNC_NBITS); }
inline constexpr void embdInstBgtuFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGTU_FUNC_SHIFT, BF_BGTU_FUNC_MASK, imm); }

const uint8_t BF_BGTU_TARGETB_SHIFT = 29;
const uint8_t BF_BGTU_TARGETB_NBITS = 3;
const uint32_t BF_BGTU_TARGETB_MASK = 0x7;
const bool BF_BGTU_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBgtuTargetb(EncInst inst) { return extrSignedImm(inst, BF_BGTU_TARGETB_SHIFT, BF_BGTU_TARGETB_NBITS); }
inline constexpr void embdInstBgtuTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BGTU_TARGETB_SHIFT, BF_BGTU_TARGETB_MASK, imm); }

const uint8_t BF_BLEU_X1_SHIFT = 7;
const uint8_t BF_BLEU_X1_NBITS = 5;
const uint32_t BF_BLEU_X1_MASK = 0x1f;
const bool BF_BLEU_X1_SIGNED = false;
inline constexpr RegId extrInstBleuX1(EncInst inst) { return extrReg5(inst, BF_BLEU_X1_SHIFT); }
inline constexpr void embdInstBleuX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BLEU_X1_SHIFT, reg); }

const uint8_t BF_BLEU_X2_SHIFT = 12;
const uint8_t BF_BLEU_X2_NBITS = 5;
const uint32_t BF_BLEU_X2_MASK = 0x1f;
const bool BF_BLEU_X2_SIGNED = false;
inline constexpr RegId extrInstBleuX2(EncInst inst) { return extrReg5(inst, BF_BLEU_X2_SHIFT); }
inline constexpr void embdInstBleuX2(EncInst& inst, RegId reg) { embdReg5(inst, BF_BLEU_X2_SHIFT, reg); }

const uint8_t BF_BLEU_TARGETA_SHIFT = 17;
const uint8_t BF_BLEU_TARGETA_NBITS = 9;
const uint32_t BF_BLEU_TARGETA_MASK = 0x1ff;
const bool BF_BLEU_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBleuTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BLEU_TARGETA_SHIFT, BF_BLEU_TARGETA_NBITS); }
inline constexpr void embdInstBleuTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLEU_TARGETA_SHIFT, BF_BLEU_TARGETA_MASK, imm); }

const uint8_t BF_BLEU_FUNC_SHIFT = 26;
const uint8_t BF_BLEU_FUNC_NBITS = 3;
const uint32_t BF_BLEU_FUNC_MASK = 0x7;
const bool BF_BLEU_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBleuFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BLEU_FUNC_SHIFT, BF_BLEU_FUNC_NBITS); }
inline constexpr void embdInstBleuFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLEU_FUNC_SHIFT, BF_BLEU_FUNC_MASK, imm); }

const uint8_t BF_BLEU_TARGETB_SHIFT = 29;
const uint8_t BF_BLEU_TARGETB_NBITS = 3;
const uint32_t BF_BLEU_TARGETB_MASK = 0x7;
const bool BF_BLEU_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBleuTargetb(EncInst inst) { return extrSignedImm(inst, BF_BLEU_TARGETB_SHIFT, BF_BLEU_TARGETB_NBITS); }
inline constexpr void embdInstBleuTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BLEU_TARGETB_SHIFT, BF_BLEU_TARGETB_MASK, imm); }

const uint8_t BF_BNEI_X1_SHIFT = 7;
const uint8_t BF_BNEI_X1_NBITS = 5;
const uint32_t BF_BNEI_X1_MASK = 0x1f;
const bool BF_BNEI_X1_SIGNED = false;
inline constexpr RegId extrInstBneiX1(EncInst inst) { return extrReg5(inst, BF_BNEI_X1_SHIFT); }
inline constexpr void embdInstBneiX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BNEI_X1_SHIFT, reg); }

const uint8_t BF_BNEI_IMM_SHIFT = 12;
const uint8_t BF_BNEI_IMM_NBITS = 5;
const uint32_t BF_BNEI_IMM_MASK = 0x1f;
const bool BF_BNEI_IMM_SIGNED = true;
inline constexpr int64_t extrInstBneiImm(EncInst inst) { return extrSignedImm(inst, BF_BNEI_IMM_SHIFT, BF_BNEI_IMM_NBITS); }
inline constexpr void embdInstBneiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BNEI_IMM_SHIFT, BF_BNEI_IMM_MASK, imm); }

const uint8_t BF_BNEI_TARGETA_SHIFT = 17;
const uint8_t BF_BNEI_TARGETA_NBITS = 9;
const uint32_t BF_BNEI_TARGETA_MASK = 0x1ff;
const bool BF_BNEI_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBneiTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BNEI_TARGETA_SHIFT, BF_BNEI_TARGETA_NBITS); }
inline constexpr void embdInstBneiTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BNEI_TARGETA_SHIFT, BF_BNEI_TARGETA_MASK, imm); }

const uint8_t BF_BNEI_FUNC_SHIFT = 26;
const uint8_t BF_BNEI_FUNC_NBITS = 3;
const uint32_t BF_BNEI_FUNC_MASK = 0x7;
const bool BF_BNEI_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBneiFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BNEI_FUNC_SHIFT, BF_BNEI_FUNC_NBITS); }
inline constexpr void embdInstBneiFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BNEI_FUNC_SHIFT, BF_BNEI_FUNC_MASK, imm); }

const uint8_t BF_BNEI_TARGETB_SHIFT = 29;
const uint8_t BF_BNEI_TARGETB_NBITS = 3;
const uint32_t BF_BNEI_TARGETB_MASK = 0x7;
const bool BF_BNEI_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBneiTargetb(EncInst inst) { return extrSignedImm(inst, BF_BNEI_TARGETB_SHIFT, BF_BNEI_TARGETB_NBITS); }
inline constexpr void embdInstBneiTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BNEI_TARGETB_SHIFT, BF_BNEI_TARGETB_MASK, imm); }

const uint8_t BF_BEQI_X1_SHIFT = 7;
const uint8_t BF_BEQI_X1_NBITS = 5;
const uint32_t BF_BEQI_X1_MASK = 0x1f;
const bool BF_BEQI_X1_SIGNED = false;
inline constexpr RegId extrInstBeqiX1(EncInst inst) { return extrReg5(inst, BF_BEQI_X1_SHIFT); }
inline constexpr void embdInstBeqiX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BEQI_X1_SHIFT, reg); }

const uint8_t BF_BEQI_IMM_SHIFT = 12;
const uint8_t BF_BEQI_IMM_NBITS = 5;
const uint32_t BF_BEQI_IMM_MASK = 0x1f;
const bool BF_BEQI_IMM_SIGNED = true;
inline constexpr int64_t extrInstBeqiImm(EncInst inst) { return extrSignedImm(inst, BF_BEQI_IMM_SHIFT, BF_BEQI_IMM_NBITS); }
inline constexpr void embdInstBeqiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BEQI_IMM_SHIFT, BF_BEQI_IMM_MASK, imm); }

const uint8_t BF_BEQI_TARGETA_SHIFT = 17;
const uint8_t BF_BEQI_TARGETA_NBITS = 9;
const uint32_t BF_BEQI_TARGETA_MASK = 0x1ff;
const bool BF_BEQI_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBeqiTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BEQI_TARGETA_SHIFT, BF_BEQI_TARGETA_NBITS); }
inline constexpr void embdInstBeqiTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BEQI_TARGETA_SHIFT, BF_BEQI_TARGETA_MASK, imm); }

const uint8_t BF_BEQI_FUNC_SHIFT = 26;
const uint8_t BF_BEQI_FUNC_NBITS = 3;
const uint32_t BF_BEQI_FUNC_MASK = 0x7;
const bool BF_BEQI_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBeqiFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BEQI_FUNC_SHIFT, BF_BEQI_FUNC_NBITS); }
inline constexpr void embdInstBeqiFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BEQI_FUNC_SHIFT, BF_BEQI_FUNC_MASK, imm); }

const uint8_t BF_BEQI_TARGETB_SHIFT = 29;
const uint8_t BF_BEQI_TARGETB_NBITS = 3;
const uint32_t BF_BEQI_TARGETB_MASK = 0x7;
const bool BF_BEQI_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBeqiTargetb(EncInst inst) { return extrSignedImm(inst, BF_BEQI_TARGETB_SHIFT, BF_BEQI_TARGETB_NBITS); }
inline constexpr void embdInstBeqiTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BEQI_TARGETB_SHIFT, BF_BEQI_TARGETB_MASK, imm); }

const uint8_t BF_BGTI_X1_SHIFT = 7;
const uint8_t BF_BGTI_X1_NBITS = 5;
const uint32_t BF_BGTI_X1_MASK = 0x1f;
const bool BF_BGTI_X1_SIGNED = false;
inline constexpr RegId extrInstBgtiX1(EncInst inst) { return extrReg5(inst, BF_BGTI_X1_SHIFT); }
inline constexpr void embdInstBgtiX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BGTI_X1_SHIFT, reg); }

const uint8_t BF_BGTI_IMM_SHIFT = 12;
const uint8_t BF_BGTI_IMM_NBITS = 5;
const uint32_t BF_BGTI_IMM_MASK = 0x1f;
const bool BF_BGTI_IMM_SIGNED = true;
inline constexpr int64_t extrInstBgtiImm(EncInst inst) { return extrSignedImm(inst, BF_BGTI_IMM_SHIFT, BF_BGTI_IMM_NBITS); }
inline constexpr void embdInstBgtiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BGTI_IMM_SHIFT, BF_BGTI_IMM_MASK, imm); }

const uint8_t BF_BGTI_TARGETA_SHIFT = 17;
const uint8_t BF_BGTI_TARGETA_NBITS = 9;
const uint32_t BF_BGTI_TARGETA_MASK = 0x1ff;
const bool BF_BGTI_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBgtiTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BGTI_TARGETA_SHIFT, BF_BGTI_TARGETA_NBITS); }
inline constexpr void embdInstBgtiTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGTI_TARGETA_SHIFT, BF_BGTI_TARGETA_MASK, imm); }

const uint8_t BF_BGTI_FUNC_SHIFT = 26;
const uint8_t BF_BGTI_FUNC_NBITS = 3;
const uint32_t BF_BGTI_FUNC_MASK = 0x7;
const bool BF_BGTI_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBgtiFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BGTI_FUNC_SHIFT, BF_BGTI_FUNC_NBITS); }
inline constexpr void embdInstBgtiFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGTI_FUNC_SHIFT, BF_BGTI_FUNC_MASK, imm); }

const uint8_t BF_BGTI_TARGETB_SHIFT = 29;
const uint8_t BF_BGTI_TARGETB_NBITS = 3;
const uint32_t BF_BGTI_TARGETB_MASK = 0x7;
const bool BF_BGTI_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBgtiTargetb(EncInst inst) { return extrSignedImm(inst, BF_BGTI_TARGETB_SHIFT, BF_BGTI_TARGETB_NBITS); }
inline constexpr void embdInstBgtiTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BGTI_TARGETB_SHIFT, BF_BGTI_TARGETB_MASK, imm); }

const uint8_t BF_BLEI_X1_SHIFT = 7;
const uint8_t BF_BLEI_X1_NBITS = 5;
const uint32_t BF_BLEI_X1_MASK = 0x1f;
const bool BF_BLEI_X1_SIGNED = false;
inline constexpr RegId extrInstBleiX1(EncInst inst) { return extrReg5(inst, BF_BLEI_X1_SHIFT); }
inline constexpr void embdInstBleiX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BLEI_X1_SHIFT, reg); }

const uint8_t BF_BLEI_IMM_SHIFT = 12;
const uint8_t BF_BLEI_IMM_NBITS = 5;
const uint32_t BF_BLEI_IMM_MASK = 0x1f;
const bool BF_BLEI_IMM_SIGNED = true;
inline constexpr int64_t extrInstBleiImm(EncInst inst) { return extrSignedImm(inst, BF_BLEI_IMM_SHIFT, BF_BLEI_IMM_NBITS); }
inline constexpr void embdInstBleiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BLEI_IMM_SHIFT, BF_BLEI_IMM_MASK, imm); }

const uint8_t BF_BLEI_TARGETA_SHIFT = 17;
const uint8_t BF_BLEI_TARGETA_NBITS = 9;
const uint32_t BF_BLEI_TARGETA_MASK = 0x1ff;
const bool BF_BLEI_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBleiTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BLEI_TARGETA_SHIFT, BF_BLEI_TARGETA_NBITS); }
inline constexpr void embdInstBleiTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLEI_TARGETA_SHIFT, BF_BLEI_TARGETA_MASK, imm); }

const uint8_t BF_BLEI_FUNC_SHIFT = 26;
const uint8_t BF_BLEI_FUNC_NBITS = 3;
const uint32_t BF_BLEI_FUNC_MASK = 0x7;
const bool BF_BLEI_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBleiFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BLEI_FUNC_SHIFT, BF_BLEI_FUNC_NBITS); }
inline constexpr void embdInstBleiFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLEI_FUNC_SHIFT, BF_BLEI_FUNC_MASK, imm); }

const uint8_t BF_BLEI_TARGETB_SHIFT = 29;
const uint8_t BF_BLEI_TARGETB_NBITS = 3;
const uint32_t BF_BLEI_TARGETB_MASK = 0x7;
const bool BF_BLEI_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBleiTargetb(EncInst inst) { return extrSignedImm(inst, BF_BLEI_TARGETB_SHIFT, BF_BLEI_TARGETB_NBITS); }
inline constexpr void embdInstBleiTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BLEI_TARGETB_SHIFT, BF_BLEI_TARGETB_MASK, imm); }

const uint8_t BF_BLTI_X1_SHIFT = 7;
const uint8_t BF_BLTI_X1_NBITS = 5;
const uint32_t BF_BLTI_X1_MASK = 0x1f;
const bool BF_BLTI_X1_SIGNED = false;
inline constexpr RegId extrInstBltiX1(EncInst inst) { return extrReg5(inst, BF_BLTI_X1_SHIFT); }
inline constexpr void embdInstBltiX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BLTI_X1_SHIFT, reg); }

const uint8_t BF_BLTI_IMM_SHIFT = 12;
const uint8_t BF_BLTI_IMM_NBITS = 5;
const uint32_t BF_BLTI_IMM_MASK = 0x1f;
const bool BF_BLTI_IMM_SIGNED = true;
inline constexpr int64_t extrInstBltiImm(EncInst inst) { return extrSignedImm(inst, BF_BLTI_IMM_SHIFT, BF_BLTI_IMM_NBITS); }
inline constexpr void embdInstBltiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BLTI_IMM_SHIFT, BF_BLTI_IMM_MASK, imm); }

const uint8_t BF_BLTI_TARGETA_SHIFT = 17;
const uint8_t BF_BLTI_TARGETA_NBITS = 9;
const uint32_t BF_BLTI_TARGETA_MASK = 0x1ff;
const bool BF_BLTI_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBltiTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BLTI_TARGETA_SHIFT, BF_BLTI_TARGETA_NBITS); }
inline constexpr void embdInstBltiTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLTI_TARGETA_SHIFT, BF_BLTI_TARGETA_MASK, imm); }

const uint8_t BF_BLTI_FUNC_SHIFT = 26;
const uint8_t BF_BLTI_FUNC_NBITS = 3;
const uint32_t BF_BLTI_FUNC_MASK = 0x7;
const bool BF_BLTI_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBltiFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BLTI_FUNC_SHIFT, BF_BLTI_FUNC_NBITS); }
inline constexpr void embdInstBltiFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLTI_FUNC_SHIFT, BF_BLTI_FUNC_MASK, imm); }

const uint8_t BF_BLTI_TARGETB_SHIFT = 29;
const uint8_t BF_BLTI_TARGETB_NBITS = 3;
const uint32_t BF_BLTI_TARGETB_MASK = 0x7;
const bool BF_BLTI_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBltiTargetb(EncInst inst) { return extrSignedImm(inst, BF_BLTI_TARGETB_SHIFT, BF_BLTI_TARGETB_NBITS); }
inline constexpr void embdInstBltiTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BLTI_TARGETB_SHIFT, BF_BLTI_TARGETB_MASK, imm); }

const uint8_t BF_BGEI_X1_SHIFT = 7;
const uint8_t BF_BGEI_X1_NBITS = 5;
const uint32_t BF_BGEI_X1_MASK = 0x1f;
const bool BF_BGEI_X1_SIGNED = false;
inline constexpr RegId extrInstBgeiX1(EncInst inst) { return extrReg5(inst, BF_BGEI_X1_SHIFT); }
inline constexpr void embdInstBgeiX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BGEI_X1_SHIFT, reg); }

const uint8_t BF_BGEI_IMM_SHIFT = 12;
const uint8_t BF_BGEI_IMM_NBITS = 5;
const uint32_t BF_BGEI_IMM_MASK = 0x1f;
const bool BF_BGEI_IMM_SIGNED = true;
inline constexpr int64_t extrInstBgeiImm(EncInst inst) { return extrSignedImm(inst, BF_BGEI_IMM_SHIFT, BF_BGEI_IMM_NBITS); }
inline constexpr void embdInstBgeiImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BGEI_IMM_SHIFT, BF_BGEI_IMM_MASK, imm); }

const uint8_t BF_BGEI_TARGETA_SHIFT = 17;
const uint8_t BF_BGEI_TARGETA_NBITS = 9;
const uint32_t BF_BGEI_TARGETA_MASK = 0x1ff;
const bool BF_BGEI_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBgeiTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BGEI_TARGETA_SHIFT, BF_BGEI_TARGETA_NBITS); }
inline constexpr void embdInstBgeiTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGEI_TARGETA_SHIFT, BF_BGEI_TARGETA_MASK, imm); }

const uint8_t BF_BGEI_FUNC_SHIFT = 26;
const uint8_t BF_BGEI_FUNC_NBITS = 3;
const uint32_t BF_BGEI_FUNC_MASK = 0x7;
const bool BF_BGEI_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBgeiFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BGEI_FUNC_SHIFT, BF_BGEI_FUNC_NBITS); }
inline constexpr void embdInstBgeiFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGEI_FUNC_SHIFT, BF_BGEI_FUNC_MASK, imm); }

const uint8_t BF_BGEI_TARGETB_SHIFT = 29;
const uint8_t BF_BGEI_TARGETB_NBITS = 3;
const uint32_t BF_BGEI_TARGETB_MASK = 0x7;
const bool BF_BGEI_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBgeiTargetb(EncInst inst) { return extrSignedImm(inst, BF_BGEI_TARGETB_SHIFT, BF_BGEI_TARGETB_NBITS); }
inline constexpr void embdInstBgeiTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BGEI_TARGETB_SHIFT, BF_BGEI_TARGETB_MASK, imm); }

const uint8_t BF_BNEIU_X1_SHIFT = 7;
const uint8_t BF_BNEIU_X1_NBITS = 5;
const uint32_t BF_BNEIU_X1_MASK = 0x1f;
const bool BF_BNEIU_X1_SIGNED = false;
inline constexpr RegId extrInstBneiuX1(EncInst inst) { return extrReg5(inst, BF_BNEIU_X1_SHIFT); }
inline constexpr void embdInstBneiuX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BNEIU_X1_SHIFT, reg); }

const uint8_t BF_BNEIU_IMM_SHIFT = 12;
const uint8_t BF_BNEIU_IMM_NBITS = 5;
const uint32_t BF_BNEIU_IMM_MASK = 0x1f;
const bool BF_BNEIU_IMM_SIGNED = false;
inline constexpr uint64_t extrInstBneiuImm(EncInst inst) { return extrUnsignedImm(inst, BF_BNEIU_IMM_SHIFT, BF_BNEIU_IMM_NBITS); }
inline constexpr void embdInstBneiuImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BNEIU_IMM_SHIFT, BF_BNEIU_IMM_MASK, imm); }

const uint8_t BF_BNEIU_TARGETA_SHIFT = 17;
const uint8_t BF_BNEIU_TARGETA_NBITS = 9;
const uint32_t BF_BNEIU_TARGETA_MASK = 0x1ff;
const bool BF_BNEIU_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBneiuTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BNEIU_TARGETA_SHIFT, BF_BNEIU_TARGETA_NBITS); }
inline constexpr void embdInstBneiuTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BNEIU_TARGETA_SHIFT, BF_BNEIU_TARGETA_MASK, imm); }

const uint8_t BF_BNEIU_FUNC_SHIFT = 26;
const uint8_t BF_BNEIU_FUNC_NBITS = 3;
const uint32_t BF_BNEIU_FUNC_MASK = 0x7;
const bool BF_BNEIU_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBneiuFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BNEIU_FUNC_SHIFT, BF_BNEIU_FUNC_NBITS); }
inline constexpr void embdInstBneiuFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BNEIU_FUNC_SHIFT, BF_BNEIU_FUNC_MASK, imm); }

const uint8_t BF_BNEIU_TARGETB_SHIFT = 29;
const uint8_t BF_BNEIU_TARGETB_NBITS = 3;
const uint32_t BF_BNEIU_TARGETB_MASK = 0x7;
const bool BF_BNEIU_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBneiuTargetb(EncInst inst) { return extrSignedImm(inst, BF_BNEIU_TARGETB_SHIFT, BF_BNEIU_TARGETB_NBITS); }
inline constexpr void embdInstBneiuTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BNEIU_TARGETB_SHIFT, BF_BNEIU_TARGETB_MASK, imm); }

const uint8_t BF_BEQIU_X1_SHIFT = 7;
const uint8_t BF_BEQIU_X1_NBITS = 5;
const uint32_t BF_BEQIU_X1_MASK = 0x1f;
const bool BF_BEQIU_X1_SIGNED = false;
inline constexpr RegId extrInstBeqiuX1(EncInst inst) { return extrReg5(inst, BF_BEQIU_X1_SHIFT); }
inline constexpr void embdInstBeqiuX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BEQIU_X1_SHIFT, reg); }

const uint8_t BF_BEQIU_IMM_SHIFT = 12;
const uint8_t BF_BEQIU_IMM_NBITS = 5;
const uint32_t BF_BEQIU_IMM_MASK = 0x1f;
const bool BF_BEQIU_IMM_SIGNED = false;
inline constexpr uint64_t extrInstBeqiuImm(EncInst inst) { return extrUnsignedImm(inst, BF_BEQIU_IMM_SHIFT, BF_BEQIU_IMM_NBITS); }
inline constexpr void embdInstBeqiuImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BEQIU_IMM_SHIFT, BF_BEQIU_IMM_MASK, imm); }

const uint8_t BF_BEQIU_TARGETA_SHIFT = 17;
const uint8_t BF_BEQIU_TARGETA_NBITS = 9;
const uint32_t BF_BEQIU_TARGETA_MASK = 0x1ff;
const bool BF_BEQIU_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBeqiuTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BEQIU_TARGETA_SHIFT, BF_BEQIU_TARGETA_NBITS); }
inline constexpr void embdInstBeqiuTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BEQIU_TARGETA_SHIFT, BF_BEQIU_TARGETA_MASK, imm); }

const uint8_t BF_BEQIU_FUNC_SHIFT = 26;
const uint8_t BF_BEQIU_FUNC_NBITS = 3;
const uint32_t BF_BEQIU_FUNC_MASK = 0x7;
const bool BF_BEQIU_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBeqiuFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BEQIU_FUNC_SHIFT, BF_BEQIU_FUNC_NBITS); }
inline constexpr void embdInstBeqiuFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BEQIU_FUNC_SHIFT, BF_BEQIU_FUNC_MASK, imm); }

const uint8_t BF_BEQIU_TARGETB_SHIFT = 29;
const uint8_t BF_BEQIU_TARGETB_NBITS = 3;
const uint32_t BF_BEQIU_TARGETB_MASK = 0x7;
const bool BF_BEQIU_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBeqiuTargetb(EncInst inst) { return extrSignedImm(inst, BF_BEQIU_TARGETB_SHIFT, BF_BEQIU_TARGETB_NBITS); }
inline constexpr void embdInstBeqiuTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BEQIU_TARGETB_SHIFT, BF_BEQIU_TARGETB_MASK, imm); }

const uint8_t BF_BGTIU_X1_SHIFT = 7;
const uint8_t BF_BGTIU_X1_NBITS = 5;
const uint32_t BF_BGTIU_X1_MASK = 0x1f;
const bool BF_BGTIU_X1_SIGNED = false;
inline constexpr RegId extrInstBgtiuX1(EncInst inst) { return extrReg5(inst, BF_BGTIU_X1_SHIFT); }
inline constexpr void embdInstBgtiuX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BGTIU_X1_SHIFT, reg); }

const uint8_t BF_BGTIU_IMM_SHIFT = 12;
const uint8_t BF_BGTIU_IMM_NBITS = 5;
const uint32_t BF_BGTIU_IMM_MASK = 0x1f;
const bool BF_BGTIU_IMM_SIGNED = false;
inline constexpr uint64_t extrInstBgtiuImm(EncInst inst) { return extrUnsignedImm(inst, BF_BGTIU_IMM_SHIFT, BF_BGTIU_IMM_NBITS); }
inline constexpr void embdInstBgtiuImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGTIU_IMM_SHIFT, BF_BGTIU_IMM_MASK, imm); }

const uint8_t BF_BGTIU_TARGETA_SHIFT = 17;
const uint8_t BF_BGTIU_TARGETA_NBITS = 9;
const uint32_t BF_BGTIU_TARGETA_MASK = 0x1ff;
const bool BF_BGTIU_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBgtiuTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BGTIU_TARGETA_SHIFT, BF_BGTIU_TARGETA_NBITS); }
inline constexpr void embdInstBgtiuTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGTIU_TARGETA_SHIFT, BF_BGTIU_TARGETA_MASK, imm); }

const uint8_t BF_BGTIU_FUNC_SHIFT = 26;
const uint8_t BF_BGTIU_FUNC_NBITS = 3;
const uint32_t BF_BGTIU_FUNC_MASK = 0x7;
const bool BF_BGTIU_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBgtiuFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BGTIU_FUNC_SHIFT, BF_BGTIU_FUNC_NBITS); }
inline constexpr void embdInstBgtiuFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGTIU_FUNC_SHIFT, BF_BGTIU_FUNC_MASK, imm); }

const uint8_t BF_BGTIU_TARGETB_SHIFT = 29;
const uint8_t BF_BGTIU_TARGETB_NBITS = 3;
const uint32_t BF_BGTIU_TARGETB_MASK = 0x7;
const bool BF_BGTIU_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBgtiuTargetb(EncInst inst) { return extrSignedImm(inst, BF_BGTIU_TARGETB_SHIFT, BF_BGTIU_TARGETB_NBITS); }
inline constexpr void embdInstBgtiuTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BGTIU_TARGETB_SHIFT, BF_BGTIU_TARGETB_MASK, imm); }

const uint8_t BF_BLEIU_X1_SHIFT = 7;
const uint8_t BF_BLEIU_X1_NBITS = 5;
const uint32_t BF_BLEIU_X1_MASK = 0x1f;
const bool BF_BLEIU_X1_SIGNED = false;
inline constexpr RegId extrInstBleiuX1(EncInst inst) { return extrReg5(inst, BF_BLEIU_X1_SHIFT); }
inline constexpr void embdInstBleiuX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BLEIU_X1_SHIFT, reg); }

const uint8_t BF_BLEIU_IMM_SHIFT = 12;
const uint8_t BF_BLEIU_IMM_NBITS = 5;
const uint32_t BF_BLEIU_IMM_MASK = 0x1f;
const bool BF_BLEIU_IMM_SIGNED = false;
inline constexpr uint64_t extrInstBleiuImm(EncInst inst) { return extrUnsignedImm(inst, BF_BLEIU_IMM_SHIFT, BF_BLEIU_IMM_NBITS); }
inline constexpr void embdInstBleiuImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLEIU_IMM_SHIFT, BF_BLEIU_IMM_MASK, imm); }

const uint8_t BF_BLEIU_TARGETA_SHIFT = 17;
const uint8_t BF_BLEIU_TARGETA_NBITS = 9;
const uint32_t BF_BLEIU_TARGETA_MASK = 0x1ff;
const bool BF_BLEIU_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBleiuTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BLEIU_TARGETA_SHIFT, BF_BLEIU_TARGETA_NBITS); }
inline constexpr void embdInstBleiuTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLEIU_TARGETA_SHIFT, BF_BLEIU_TARGETA_MASK, imm); }

const uint8_t BF_BLEIU_FUNC_SHIFT = 26;
const uint8_t BF_BLEIU_FUNC_NBITS = 3;
const uint32_t BF_BLEIU_FUNC_MASK = 0x7;
const bool BF_BLEIU_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBleiuFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BLEIU_FUNC_SHIFT, BF_BLEIU_FUNC_NBITS); }
inline constexpr void embdInstBleiuFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLEIU_FUNC_SHIFT, BF_BLEIU_FUNC_MASK, imm); }

const uint8_t BF_BLEIU_TARGETB_SHIFT = 29;
const uint8_t BF_BLEIU_TARGETB_NBITS = 3;
const uint32_t BF_BLEIU_TARGETB_MASK = 0x7;
const bool BF_BLEIU_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBleiuTargetb(EncInst inst) { return extrSignedImm(inst, BF_BLEIU_TARGETB_SHIFT, BF_BLEIU_TARGETB_NBITS); }
inline constexpr void embdInstBleiuTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BLEIU_TARGETB_SHIFT, BF_BLEIU_TARGETB_MASK, imm); }

const uint8_t BF_BLTIU_X1_SHIFT = 7;
const uint8_t BF_BLTIU_X1_NBITS = 5;
const uint32_t BF_BLTIU_X1_MASK = 0x1f;
const bool BF_BLTIU_X1_SIGNED = false;
inline constexpr RegId extrInstBltiuX1(EncInst inst) { return extrReg5(inst, BF_BLTIU_X1_SHIFT); }
inline constexpr void embdInstBltiuX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BLTIU_X1_SHIFT, reg); }

const uint8_t BF_BLTIU_IMM_SHIFT = 12;
const uint8_t BF_BLTIU_IMM_NBITS = 5;
const uint32_t BF_BLTIU_IMM_MASK = 0x1f;
const bool BF_BLTIU_IMM_SIGNED = false;
inline constexpr uint64_t extrInstBltiuImm(EncInst inst) { return extrUnsignedImm(inst, BF_BLTIU_IMM_SHIFT, BF_BLTIU_IMM_NBITS); }
inline constexpr void embdInstBltiuImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLTIU_IMM_SHIFT, BF_BLTIU_IMM_MASK, imm); }

const uint8_t BF_BLTIU_TARGETA_SHIFT = 17;
const uint8_t BF_BLTIU_TARGETA_NBITS = 9;
const uint32_t BF_BLTIU_TARGETA_MASK = 0x1ff;
const bool BF_BLTIU_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBltiuTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BLTIU_TARGETA_SHIFT, BF_BLTIU_TARGETA_NBITS); }
inline constexpr void embdInstBltiuTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLTIU_TARGETA_SHIFT, BF_BLTIU_TARGETA_MASK, imm); }

const uint8_t BF_BLTIU_FUNC_SHIFT = 26;
const uint8_t BF_BLTIU_FUNC_NBITS = 3;
const uint32_t BF_BLTIU_FUNC_MASK = 0x7;
const bool BF_BLTIU_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBltiuFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BLTIU_FUNC_SHIFT, BF_BLTIU_FUNC_NBITS); }
inline constexpr void embdInstBltiuFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BLTIU_FUNC_SHIFT, BF_BLTIU_FUNC_MASK, imm); }

const uint8_t BF_BLTIU_TARGETB_SHIFT = 29;
const uint8_t BF_BLTIU_TARGETB_NBITS = 3;
const uint32_t BF_BLTIU_TARGETB_MASK = 0x7;
const bool BF_BLTIU_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBltiuTargetb(EncInst inst) { return extrSignedImm(inst, BF_BLTIU_TARGETB_SHIFT, BF_BLTIU_TARGETB_NBITS); }
inline constexpr void embdInstBltiuTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BLTIU_TARGETB_SHIFT, BF_BLTIU_TARGETB_MASK, imm); }

const uint8_t BF_BGEIU_X1_SHIFT = 7;
const uint8_t BF_BGEIU_X1_NBITS = 5;
const uint32_t BF_BGEIU_X1_MASK = 0x1f;
const bool BF_BGEIU_X1_SIGNED = false;
inline constexpr RegId extrInstBgeiuX1(EncInst inst) { return extrReg5(inst, BF_BGEIU_X1_SHIFT); }
inline constexpr void embdInstBgeiuX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_BGEIU_X1_SHIFT, reg); }

const uint8_t BF_BGEIU_IMM_SHIFT = 12;
const uint8_t BF_BGEIU_IMM_NBITS = 5;
const uint32_t BF_BGEIU_IMM_MASK = 0x1f;
const bool BF_BGEIU_IMM_SIGNED = false;
inline constexpr uint64_t extrInstBgeiuImm(EncInst inst) { return extrUnsignedImm(inst, BF_BGEIU_IMM_SHIFT, BF_BGEIU_IMM_NBITS); }
inline constexpr void embdInstBgeiuImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGEIU_IMM_SHIFT, BF_BGEIU_IMM_MASK, imm); }

const uint8_t BF_BGEIU_TARGETA_SHIFT = 17;
const uint8_t BF_BGEIU_TARGETA_NBITS = 9;
const uint32_t BF_BGEIU_TARGETA_MASK = 0x1ff;
const bool BF_BGEIU_TARGETA_SIGNED = false;
inline constexpr uint64_t extrInstBgeiuTargeta(EncInst inst) { return extrUnsignedImm(inst, BF_BGEIU_TARGETA_SHIFT, BF_BGEIU_TARGETA_NBITS); }
inline constexpr void embdInstBgeiuTargeta(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGEIU_TARGETA_SHIFT, BF_BGEIU_TARGETA_MASK, imm); }

const uint8_t BF_BGEIU_FUNC_SHIFT = 26;
const uint8_t BF_BGEIU_FUNC_NBITS = 3;
const uint32_t BF_BGEIU_FUNC_MASK = 0x7;
const bool BF_BGEIU_FUNC_SIGNED = false;
inline constexpr uint64_t extrInstBgeiuFunc(EncInst inst) { return extrUnsignedImm(inst, BF_BGEIU_FUNC_SHIFT, BF_BGEIU_FUNC_NBITS); }
inline constexpr void embdInstBgeiuFunc(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BGEIU_FUNC_SHIFT, BF_BGEIU_FUNC_MASK, imm); }

const uint8_t BF_BGEIU_TARGETB_SHIFT = 29;
const uint8_t BF_BGEIU_TARGETB_NBITS = 3;
const uint32_t BF_BGEIU_TARGETB_MASK = 0x7;
const bool BF_BGEIU_TARGETB_SIGNED = true;
inline constexpr int64_t extrInstBgeiuTargetb(EncInst inst) { return extrSignedImm(inst, BF_BGEIU_TARGETB_SHIFT, BF_BGEIU_TARGETB_NBITS); }
inline constexpr void embdInstBgeiuTargetb(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BGEIU_TARGETB_SHIFT, BF_BGEIU_TARGETB_MASK, imm); }

/* J-Type Bitfields */
const uint8_t BF_JTYPE_IMM25_SHIFT = 7;
const uint8_t BF_JTYPE_IMM25_NBITS = 25;
const uint32_t BF_JTYPE_IMM25_MASK = 0x1ffffff;
const bool BF_JTYPE_IMM25_SIGNED = true;
inline constexpr int64_t extrInstJtypeImm25(EncInst inst) { return extrSignedImm(inst, BF_JTYPE_IMM25_SHIFT, BF_JTYPE_IMM25_NBITS); }
inline constexpr void embdInstJtypeImm25(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_JTYPE_IMM25_SHIFT, BF_JTYPE_IMM25_MASK, imm); }

const uint8_t BF_JMP_IMM_SHIFT = 7;
const uint8_t BF_JMP_IMM_NBITS = 25;
const uint32_t BF_JMP_IMM_MASK = 0x1ffffff;
const bool BF_JMP_IMM_SIGNED = true;
inline constexpr int64_t extrInstJmpImm(EncInst inst) { return extrSignedImm(inst, BF_JMP_IMM_SHIFT, BF_JMP_IMM_NBITS); }
inline constexpr void embdInstJmpImm(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_JMP_IMM_SHIFT, BF_JMP_IMM_MASK, imm); }

/* M1-Type Bitfields */
const uint8_t BF_M1TYPE_XE_SHIFT = 7;
const uint8_t BF_M1TYPE_XE_NBITS = 5;
const uint32_t BF_M1TYPE_XE_MASK = 0x1f;
const bool BF_M1TYPE_XE_SIGNED = false;
inline constexpr RegId extrInstM1typeXe(EncInst inst) { return extrReg5(inst, BF_M1TYPE_XE_SHIFT); }
inline constexpr void embdInstM1typeXe(EncInst& inst, RegId reg) { embdReg5(inst, BF_M1TYPE_XE_SHIFT, reg); }

const uint8_t BF_M1TYPE_XC_SHIFT = 12;
const uint8_t BF_M1TYPE_XC_NBITS = 5;
const uint32_t BF_M1TYPE_XC_MASK = 0x1f;
const bool BF_M1TYPE_XC_SIGNED = false;
inline constexpr RegId extrInstM1typeXc(EncInst inst) { return extrReg5(inst, BF_M1TYPE_XC_SHIFT); }
inline constexpr void embdInstM1typeXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_M1TYPE_XC_SHIFT, reg); }

const uint8_t BF_M1TYPE_XPTR_SHIFT = 17;
const uint8_t BF_M1TYPE_XPTR_NBITS = 5;
const uint32_t BF_M1TYPE_XPTR_MASK = 0x1f;
const bool BF_M1TYPE_XPTR_SIGNED = false;
inline constexpr RegId extrInstM1typeXptr(EncInst inst) { return extrReg5(inst, BF_M1TYPE_XPTR_SHIFT); }
inline constexpr void embdInstM1typeXptr(EncInst& inst, RegId reg) { embdReg5(inst, BF_M1TYPE_XPTR_SHIFT, reg); }

const uint8_t BF_M1TYPE_IMM3_SHIFT = 22;
const uint8_t BF_M1TYPE_IMM3_NBITS = 3;
const uint32_t BF_M1TYPE_IMM3_MASK = 0x7;
const bool BF_M1TYPE_IMM3_SIGNED = false;
inline constexpr uint64_t extrInstM1typeImm3(EncInst inst) { return extrUnsignedImm(inst, BF_M1TYPE_IMM3_SHIFT, BF_M1TYPE_IMM3_NBITS); }
inline constexpr void embdInstM1typeImm3(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_M1TYPE_IMM3_SHIFT, BF_M1TYPE_IMM3_MASK, imm); }

const uint8_t BF_M1TYPE_IMM1_SHIFT = 26;
const uint8_t BF_M1TYPE_IMM1_NBITS = 1;
const uint32_t BF_M1TYPE_IMM1_MASK = 0x1;
const bool BF_M1TYPE_IMM1_SIGNED = false;
inline constexpr uint64_t extrInstM1typeImm1(EncInst inst) { return extrUnsignedImm(inst, BF_M1TYPE_IMM1_SHIFT, BF_M1TYPE_IMM1_NBITS); }
inline constexpr void embdInstM1typeImm1(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_M1TYPE_IMM1_SHIFT, BF_M1TYPE_IMM1_MASK, imm); }

const uint8_t BF_SEND_XE_SHIFT = 7;
const uint8_t BF_SEND_XE_NBITS = 5;
const uint32_t BF_SEND_XE_MASK = 0x1f;
const bool BF_SEND_XE_SIGNED = false;
inline constexpr RegId extrInstSendXe(EncInst inst) { return extrReg5(inst, BF_SEND_XE_SHIFT); }
inline constexpr void embdInstSendXe(EncInst& inst, RegId reg) { embdReg5(inst, BF_SEND_XE_SHIFT, reg); }

const uint8_t BF_SEND_XC_SHIFT = 12;
const uint8_t BF_SEND_XC_NBITS = 5;
const uint32_t BF_SEND_XC_MASK = 0x1f;
const bool BF_SEND_XC_SIGNED = false;
inline constexpr RegId extrInstSendXc(EncInst inst) { return extrReg5(inst, BF_SEND_XC_SHIFT); }
inline constexpr void embdInstSendXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_SEND_XC_SHIFT, reg); }

const uint8_t BF_SEND_XPTR_SHIFT = 17;
const uint8_t BF_SEND_XPTR_NBITS = 5;
const uint32_t BF_SEND_XPTR_MASK = 0x1f;
const bool BF_SEND_XPTR_SIGNED = false;
inline constexpr RegId extrInstSendXptr(EncInst inst) { return extrReg5(inst, BF_SEND_XPTR_SHIFT); }
inline constexpr void embdInstSendXptr(EncInst& inst, RegId reg) { embdReg5(inst, BF_SEND_XPTR_SHIFT, reg); }

const uint8_t BF_SEND_LENW_SHIFT = 22;
const uint8_t BF_SEND_LENW_NBITS = 3;
const uint32_t BF_SEND_LENW_MASK = 0x7;
const bool BF_SEND_LENW_SIGNED = false;
inline constexpr uint64_t extrInstSendLenw(EncInst inst) { return extrUnsignedImm(inst, BF_SEND_LENW_SHIFT, BF_SEND_LENW_NBITS); }
inline constexpr void embdInstSendLenw(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SEND_LENW_SHIFT, BF_SEND_LENW_MASK, imm); }

const uint8_t BF_SEND_MODE_SHIFT = 26;
const uint8_t BF_SEND_MODE_NBITS = 1;
const uint32_t BF_SEND_MODE_MASK = 0x1;
const bool BF_SEND_MODE_SIGNED = false;
inline constexpr uint64_t extrInstSendMode(EncInst inst) { return extrUnsignedImm(inst, BF_SEND_MODE_SHIFT, BF_SEND_MODE_NBITS); }
inline constexpr void embdInstSendMode(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SEND_MODE_SHIFT, BF_SEND_MODE_MASK, imm); }

const uint8_t BF_SENDB_XE_SHIFT = 7;
const uint8_t BF_SENDB_XE_NBITS = 5;
const uint32_t BF_SENDB_XE_MASK = 0x1f;
const bool BF_SENDB_XE_SIGNED = false;
inline constexpr RegId extrInstSendbXe(EncInst inst) { return extrReg5(inst, BF_SENDB_XE_SHIFT); }
inline constexpr void embdInstSendbXe(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDB_XE_SHIFT, reg); }

const uint8_t BF_SENDB_XC_SHIFT = 12;
const uint8_t BF_SENDB_XC_NBITS = 5;
const uint32_t BF_SENDB_XC_MASK = 0x1f;
const bool BF_SENDB_XC_SIGNED = false;
inline constexpr RegId extrInstSendbXc(EncInst inst) { return extrReg5(inst, BF_SENDB_XC_SHIFT); }
inline constexpr void embdInstSendbXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDB_XC_SHIFT, reg); }

const uint8_t BF_SENDB_XPTR_SHIFT = 17;
const uint8_t BF_SENDB_XPTR_NBITS = 5;
const uint32_t BF_SENDB_XPTR_MASK = 0x1f;
const bool BF_SENDB_XPTR_SIGNED = false;
inline constexpr RegId extrInstSendbXptr(EncInst inst) { return extrReg5(inst, BF_SENDB_XPTR_SHIFT); }
inline constexpr void embdInstSendbXptr(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDB_XPTR_SHIFT, reg); }

const uint8_t BF_SENDB_LENW_SHIFT = 22;
const uint8_t BF_SENDB_LENW_NBITS = 3;
const uint32_t BF_SENDB_LENW_MASK = 0x7;
const bool BF_SENDB_LENW_SIGNED = false;
inline constexpr uint64_t extrInstSendbLenw(EncInst inst) { return extrUnsignedImm(inst, BF_SENDB_LENW_SHIFT, BF_SENDB_LENW_NBITS); }
inline constexpr void embdInstSendbLenw(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SENDB_LENW_SHIFT, BF_SENDB_LENW_MASK, imm); }

const uint8_t BF_SENDB_MODE_SHIFT = 26;
const uint8_t BF_SENDB_MODE_NBITS = 1;
const uint32_t BF_SENDB_MODE_MASK = 0x1;
const bool BF_SENDB_MODE_SIGNED = false;
inline constexpr uint64_t extrInstSendbMode(EncInst inst) { return extrUnsignedImm(inst, BF_SENDB_MODE_SHIFT, BF_SENDB_MODE_NBITS); }
inline constexpr void embdInstSendbMode(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SENDB_MODE_SHIFT, BF_SENDB_MODE_MASK, imm); }

/* M2-Type Bitfields */
const uint8_t BF_M2TYPE_XE_SHIFT = 7;
const uint8_t BF_M2TYPE_XE_NBITS = 5;
const uint32_t BF_M2TYPE_XE_MASK = 0x1f;
const bool BF_M2TYPE_XE_SIGNED = false;
inline constexpr RegId extrInstM2typeXe(EncInst inst) { return extrReg5(inst, BF_M2TYPE_XE_SHIFT); }
inline constexpr void embdInstM2typeXe(EncInst& inst, RegId reg) { embdReg5(inst, BF_M2TYPE_XE_SHIFT, reg); }

const uint8_t BF_M2TYPE_XC_SHIFT = 12;
const uint8_t BF_M2TYPE_XC_NBITS = 5;
const uint32_t BF_M2TYPE_XC_MASK = 0x1f;
const bool BF_M2TYPE_XC_SIGNED = false;
inline constexpr RegId extrInstM2typeXc(EncInst inst) { return extrReg5(inst, BF_M2TYPE_XC_SHIFT); }
inline constexpr void embdInstM2typeXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_M2TYPE_XC_SHIFT, reg); }

const uint8_t BF_M2TYPE_XPTR_SHIFT = 17;
const uint8_t BF_M2TYPE_XPTR_NBITS = 5;
const uint32_t BF_M2TYPE_XPTR_MASK = 0x1f;
const bool BF_M2TYPE_XPTR_SIGNED = false;
inline constexpr RegId extrInstM2typeXptr(EncInst inst) { return extrReg5(inst, BF_M2TYPE_XPTR_SHIFT); }
inline constexpr void embdInstM2typeXptr(EncInst& inst, RegId reg) { embdReg5(inst, BF_M2TYPE_XPTR_SHIFT, reg); }

const uint8_t BF_M2TYPE_IMM3_SHIFT = 22;
const uint8_t BF_M2TYPE_IMM3_NBITS = 3;
const uint32_t BF_M2TYPE_IMM3_MASK = 0x7;
const bool BF_M2TYPE_IMM3_SIGNED = false;
inline constexpr uint64_t extrInstM2typeImm3(EncInst inst) { return extrUnsignedImm(inst, BF_M2TYPE_IMM3_SHIFT, BF_M2TYPE_IMM3_NBITS); }
inline constexpr void embdInstM2typeImm3(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_M2TYPE_IMM3_SHIFT, BF_M2TYPE_IMM3_MASK, imm); }

const uint8_t BF_M2TYPE_IMM2_SHIFT = 25;
const uint8_t BF_M2TYPE_IMM2_NBITS = 2;
const uint32_t BF_M2TYPE_IMM2_MASK = 0x3;
const bool BF_M2TYPE_IMM2_SIGNED = false;
inline constexpr uint64_t extrInstM2typeImm2(EncInst inst) { return extrUnsignedImm(inst, BF_M2TYPE_IMM2_SHIFT, BF_M2TYPE_IMM2_NBITS); }
inline constexpr void embdInstM2typeImm2(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_M2TYPE_IMM2_SHIFT, BF_M2TYPE_IMM2_MASK, imm); }

const uint8_t BF_M2TYPE_XD_SHIFT = 27;
const uint8_t BF_M2TYPE_XD_NBITS = 5;
const uint32_t BF_M2TYPE_XD_MASK = 0x1f;
const bool BF_M2TYPE_XD_SIGNED = false;
inline constexpr RegId extrInstM2typeXd(EncInst inst) { return extrReg5(inst, BF_M2TYPE_XD_SHIFT); }
inline constexpr void embdInstM2typeXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_M2TYPE_XD_SHIFT, reg); }

const uint8_t BF_SENDM_XC_SHIFT = 12;
const uint8_t BF_SENDM_XC_NBITS = 5;
const uint32_t BF_SENDM_XC_MASK = 0x1f;
const bool BF_SENDM_XC_SIGNED = false;
inline constexpr RegId extrInstSendmXc(EncInst inst) { return extrReg5(inst, BF_SENDM_XC_SHIFT); }
inline constexpr void embdInstSendmXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDM_XC_SHIFT, reg); }

const uint8_t BF_SENDM_XPTR_SHIFT = 17;
const uint8_t BF_SENDM_XPTR_NBITS = 5;
const uint32_t BF_SENDM_XPTR_MASK = 0x1f;
const bool BF_SENDM_XPTR_SIGNED = false;
inline constexpr RegId extrInstSendmXptr(EncInst inst) { return extrReg5(inst, BF_SENDM_XPTR_SHIFT); }
inline constexpr void embdInstSendmXptr(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDM_XPTR_SHIFT, reg); }

const uint8_t BF_SENDM_LENW_SHIFT = 22;
const uint8_t BF_SENDM_LENW_NBITS = 3;
const uint32_t BF_SENDM_LENW_MASK = 0x7;
const bool BF_SENDM_LENW_SIGNED = false;
inline constexpr uint64_t extrInstSendmLenw(EncInst inst) { return extrUnsignedImm(inst, BF_SENDM_LENW_SHIFT, BF_SENDM_LENW_NBITS); }
inline constexpr void embdInstSendmLenw(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SENDM_LENW_SHIFT, BF_SENDM_LENW_MASK, imm); }

const uint8_t BF_SENDM_MODE_SHIFT = 25;
const uint8_t BF_SENDM_MODE_NBITS = 2;
const uint32_t BF_SENDM_MODE_MASK = 0x3;
const bool BF_SENDM_MODE_SIGNED = false;
inline constexpr uint64_t extrInstSendmMode(EncInst inst) { return extrUnsignedImm(inst, BF_SENDM_MODE_SHIFT, BF_SENDM_MODE_NBITS); }
inline constexpr void embdInstSendmMode(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SENDM_MODE_SHIFT, BF_SENDM_MODE_MASK, imm); }

const uint8_t BF_SENDM_XD_SHIFT = 27;
const uint8_t BF_SENDM_XD_NBITS = 5;
const uint32_t BF_SENDM_XD_MASK = 0x1f;
const bool BF_SENDM_XD_SIGNED = false;
inline constexpr RegId extrInstSendmXd(EncInst inst) { return extrReg5(inst, BF_SENDM_XD_SHIFT); }
inline constexpr void embdInstSendmXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDM_XD_SHIFT, reg); }

const uint8_t BF_SENDMB_XC_SHIFT = 12;
const uint8_t BF_SENDMB_XC_NBITS = 5;
const uint32_t BF_SENDMB_XC_MASK = 0x1f;
const bool BF_SENDMB_XC_SIGNED = false;
inline constexpr RegId extrInstSendmbXc(EncInst inst) { return extrReg5(inst, BF_SENDMB_XC_SHIFT); }
inline constexpr void embdInstSendmbXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMB_XC_SHIFT, reg); }

const uint8_t BF_SENDMB_XPTR_SHIFT = 17;
const uint8_t BF_SENDMB_XPTR_NBITS = 5;
const uint32_t BF_SENDMB_XPTR_MASK = 0x1f;
const bool BF_SENDMB_XPTR_SIGNED = false;
inline constexpr RegId extrInstSendmbXptr(EncInst inst) { return extrReg5(inst, BF_SENDMB_XPTR_SHIFT); }
inline constexpr void embdInstSendmbXptr(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMB_XPTR_SHIFT, reg); }

const uint8_t BF_SENDMB_LENW_SHIFT = 22;
const uint8_t BF_SENDMB_LENW_NBITS = 3;
const uint32_t BF_SENDMB_LENW_MASK = 0x7;
const bool BF_SENDMB_LENW_SIGNED = false;
inline constexpr uint64_t extrInstSendmbLenw(EncInst inst) { return extrUnsignedImm(inst, BF_SENDMB_LENW_SHIFT, BF_SENDMB_LENW_NBITS); }
inline constexpr void embdInstSendmbLenw(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SENDMB_LENW_SHIFT, BF_SENDMB_LENW_MASK, imm); }

const uint8_t BF_SENDMB_MODE_SHIFT = 25;
const uint8_t BF_SENDMB_MODE_NBITS = 2;
const uint32_t BF_SENDMB_MODE_MASK = 0x3;
const bool BF_SENDMB_MODE_SIGNED = false;
inline constexpr uint64_t extrInstSendmbMode(EncInst inst) { return extrUnsignedImm(inst, BF_SENDMB_MODE_SHIFT, BF_SENDMB_MODE_NBITS); }
inline constexpr void embdInstSendmbMode(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SENDMB_MODE_SHIFT, BF_SENDMB_MODE_MASK, imm); }

const uint8_t BF_SENDMB_XD_SHIFT = 27;
const uint8_t BF_SENDMB_XD_NBITS = 5;
const uint32_t BF_SENDMB_XD_MASK = 0x1f;
const bool BF_SENDMB_XD_SIGNED = false;
inline constexpr RegId extrInstSendmbXd(EncInst inst) { return extrReg5(inst, BF_SENDMB_XD_SHIFT); }
inline constexpr void embdInstSendmbXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMB_XD_SHIFT, reg); }

const uint8_t BF_INSTRANS_X1_SHIFT = 7;
const uint8_t BF_INSTRANS_X1_NBITS = 5;
const uint32_t BF_INSTRANS_X1_MASK = 0x1f;
const bool BF_INSTRANS_X1_SIGNED = false;
inline constexpr RegId extrInstInstransX1(EncInst inst) { return extrReg5(inst, BF_INSTRANS_X1_SHIFT); }
inline constexpr void embdInstInstransX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_INSTRANS_X1_SHIFT, reg); }

const uint8_t BF_INSTRANS_X2_SHIFT = 12;
const uint8_t BF_INSTRANS_X2_NBITS = 5;
const uint32_t BF_INSTRANS_X2_MASK = 0x1f;
const bool BF_INSTRANS_X2_SIGNED = false;
inline constexpr RegId extrInstInstransX2(EncInst inst) { return extrReg5(inst, BF_INSTRANS_X2_SHIFT); }
inline constexpr void embdInstInstransX2(EncInst& inst, RegId reg) { embdReg5(inst, BF_INSTRANS_X2_SHIFT, reg); }

const uint8_t BF_INSTRANS_X3_SHIFT = 17;
const uint8_t BF_INSTRANS_X3_NBITS = 5;
const uint32_t BF_INSTRANS_X3_MASK = 0x1f;
const bool BF_INSTRANS_X3_SIGNED = false;
inline constexpr RegId extrInstInstransX3(EncInst inst) { return extrReg5(inst, BF_INSTRANS_X3_SHIFT); }
inline constexpr void embdInstInstransX3(EncInst& inst, RegId reg) { embdReg5(inst, BF_INSTRANS_X3_SHIFT, reg); }

const uint8_t BF_INSTRANS_PERM_SHIFT = 22;
const uint8_t BF_INSTRANS_PERM_NBITS = 3;
const uint32_t BF_INSTRANS_PERM_MASK = 0x7;
const bool BF_INSTRANS_PERM_SIGNED = false;
inline constexpr uint64_t extrInstInstransPerm(EncInst inst) { return extrUnsignedImm(inst, BF_INSTRANS_PERM_SHIFT, BF_INSTRANS_PERM_NBITS); }
inline constexpr void embdInstInstransPerm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_INSTRANS_PERM_SHIFT, BF_INSTRANS_PERM_MASK, imm); }

const uint8_t BF_INSTRANS_MODE_SHIFT = 25;
const uint8_t BF_INSTRANS_MODE_NBITS = 2;
const uint32_t BF_INSTRANS_MODE_MASK = 0x3;
const bool BF_INSTRANS_MODE_SIGNED = false;
inline constexpr uint64_t extrInstInstransMode(EncInst inst) { return extrUnsignedImm(inst, BF_INSTRANS_MODE_SHIFT, BF_INSTRANS_MODE_NBITS); }
inline constexpr void embdInstInstransMode(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_INSTRANS_MODE_SHIFT, BF_INSTRANS_MODE_MASK, imm); }

const uint8_t BF_INSTRANS_X4_SHIFT = 27;
const uint8_t BF_INSTRANS_X4_NBITS = 5;
const uint32_t BF_INSTRANS_X4_MASK = 0x1f;
const bool BF_INSTRANS_X4_SIGNED = false;
inline constexpr RegId extrInstInstransX4(EncInst inst) { return extrReg5(inst, BF_INSTRANS_X4_SHIFT); }
inline constexpr void embdInstInstransX4(EncInst& inst, RegId reg) { embdReg5(inst, BF_INSTRANS_X4_SHIFT, reg); }

/* M3-Type Bitfields */
const uint8_t BF_M3TYPE_XE_SHIFT = 7;
const uint8_t BF_M3TYPE_XE_NBITS = 5;
const uint32_t BF_M3TYPE_XE_MASK = 0x1f;
const bool BF_M3TYPE_XE_SIGNED = false;
inline constexpr RegId extrInstM3typeXe(EncInst inst) { return extrReg5(inst, BF_M3TYPE_XE_SHIFT); }
inline constexpr void embdInstM3typeXe(EncInst& inst, RegId reg) { embdReg5(inst, BF_M3TYPE_XE_SHIFT, reg); }

const uint8_t BF_M3TYPE_XC_SHIFT = 12;
const uint8_t BF_M3TYPE_XC_NBITS = 5;
const uint32_t BF_M3TYPE_XC_MASK = 0x1f;
const bool BF_M3TYPE_XC_SIGNED = false;
inline constexpr RegId extrInstM3typeXc(EncInst inst) { return extrReg5(inst, BF_M3TYPE_XC_SHIFT); }
inline constexpr void embdInstM3typeXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_M3TYPE_XC_SHIFT, reg); }

const uint8_t BF_M3TYPE_X1_SHIFT = 17;
const uint8_t BF_M3TYPE_X1_NBITS = 5;
const uint32_t BF_M3TYPE_X1_MASK = 0x1f;
const bool BF_M3TYPE_X1_SIGNED = false;
inline constexpr RegId extrInstM3typeX1(EncInst inst) { return extrReg5(inst, BF_M3TYPE_X1_SHIFT); }
inline constexpr void embdInstM3typeX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_M3TYPE_X1_SHIFT, reg); }

const uint8_t BF_M3TYPE_X2_SHIFT = 22;
const uint8_t BF_M3TYPE_X2_NBITS = 5;
const uint32_t BF_M3TYPE_X2_MASK = 0x1f;
const bool BF_M3TYPE_X2_SIGNED = false;
inline constexpr RegId extrInstM3typeX2(EncInst inst) { return extrReg5(inst, BF_M3TYPE_X2_SHIFT); }
inline constexpr void embdInstM3typeX2(EncInst& inst, RegId reg) { embdReg5(inst, BF_M3TYPE_X2_SHIFT, reg); }

const uint8_t BF_M3TYPE_XD_SHIFT = 27;
const uint8_t BF_M3TYPE_XD_NBITS = 5;
const uint32_t BF_M3TYPE_XD_MASK = 0x1f;
const bool BF_M3TYPE_XD_SIGNED = false;
inline constexpr RegId extrInstM3typeXd(EncInst inst) { return extrReg5(inst, BF_M3TYPE_XD_SHIFT); }
inline constexpr void embdInstM3typeXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_M3TYPE_XD_SHIFT, reg); }

const uint8_t BF_SENDR_XE_SHIFT = 7;
const uint8_t BF_SENDR_XE_NBITS = 5;
const uint32_t BF_SENDR_XE_MASK = 0x1f;
const bool BF_SENDR_XE_SIGNED = false;
inline constexpr RegId extrInstSendrXe(EncInst inst) { return extrReg5(inst, BF_SENDR_XE_SHIFT); }
inline constexpr void embdInstSendrXe(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDR_XE_SHIFT, reg); }

const uint8_t BF_SENDR_XC_SHIFT = 12;
const uint8_t BF_SENDR_XC_NBITS = 5;
const uint32_t BF_SENDR_XC_MASK = 0x1f;
const bool BF_SENDR_XC_SIGNED = false;
inline constexpr RegId extrInstSendrXc(EncInst inst) { return extrReg5(inst, BF_SENDR_XC_SHIFT); }
inline constexpr void embdInstSendrXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDR_XC_SHIFT, reg); }

const uint8_t BF_SENDR_X1_SHIFT = 17;
const uint8_t BF_SENDR_X1_NBITS = 5;
const uint32_t BF_SENDR_X1_MASK = 0x1f;
const bool BF_SENDR_X1_SIGNED = false;
inline constexpr RegId extrInstSendrX1(EncInst inst) { return extrReg5(inst, BF_SENDR_X1_SHIFT); }
inline constexpr void embdInstSendrX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDR_X1_SHIFT, reg); }

const uint8_t BF_SENDR_X2_SHIFT = 22;
const uint8_t BF_SENDR_X2_NBITS = 5;
const uint32_t BF_SENDR_X2_MASK = 0x1f;
const bool BF_SENDR_X2_SIGNED = false;
inline constexpr RegId extrInstSendrX2(EncInst inst) { return extrReg5(inst, BF_SENDR_X2_SHIFT); }
inline constexpr void embdInstSendrX2(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDR_X2_SHIFT, reg); }

const uint8_t BF_SENDR3_XE_SHIFT = 7;
const uint8_t BF_SENDR3_XE_NBITS = 5;
const uint32_t BF_SENDR3_XE_MASK = 0x1f;
const bool BF_SENDR3_XE_SIGNED = false;
inline constexpr RegId extrInstSendr3Xe(EncInst inst) { return extrReg5(inst, BF_SENDR3_XE_SHIFT); }
inline constexpr void embdInstSendr3Xe(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDR3_XE_SHIFT, reg); }

const uint8_t BF_SENDR3_XC_SHIFT = 12;
const uint8_t BF_SENDR3_XC_NBITS = 5;
const uint32_t BF_SENDR3_XC_MASK = 0x1f;
const bool BF_SENDR3_XC_SIGNED = false;
inline constexpr RegId extrInstSendr3Xc(EncInst inst) { return extrReg5(inst, BF_SENDR3_XC_SHIFT); }
inline constexpr void embdInstSendr3Xc(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDR3_XC_SHIFT, reg); }

const uint8_t BF_SENDR3_X1_SHIFT = 17;
const uint8_t BF_SENDR3_X1_NBITS = 5;
const uint32_t BF_SENDR3_X1_MASK = 0x1f;
const bool BF_SENDR3_X1_SIGNED = false;
inline constexpr RegId extrInstSendr3X1(EncInst inst) { return extrReg5(inst, BF_SENDR3_X1_SHIFT); }
inline constexpr void embdInstSendr3X1(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDR3_X1_SHIFT, reg); }

const uint8_t BF_SENDR3_X2_SHIFT = 22;
const uint8_t BF_SENDR3_X2_NBITS = 5;
const uint32_t BF_SENDR3_X2_MASK = 0x1f;
const bool BF_SENDR3_X2_SIGNED = false;
inline constexpr RegId extrInstSendr3X2(EncInst inst) { return extrReg5(inst, BF_SENDR3_X2_SHIFT); }
inline constexpr void embdInstSendr3X2(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDR3_X2_SHIFT, reg); }

const uint8_t BF_SENDR3_X3_SHIFT = 27;
const uint8_t BF_SENDR3_X3_NBITS = 5;
const uint32_t BF_SENDR3_X3_MASK = 0x1f;
const bool BF_SENDR3_X3_SIGNED = false;
inline constexpr RegId extrInstSendr3X3(EncInst inst) { return extrReg5(inst, BF_SENDR3_X3_SHIFT); }
inline constexpr void embdInstSendr3X3(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDR3_X3_SHIFT, reg); }

const uint8_t BF_SENDMR_XC_SHIFT = 12;
const uint8_t BF_SENDMR_XC_NBITS = 5;
const uint32_t BF_SENDMR_XC_MASK = 0x1f;
const bool BF_SENDMR_XC_SIGNED = false;
inline constexpr RegId extrInstSendmrXc(EncInst inst) { return extrReg5(inst, BF_SENDMR_XC_SHIFT); }
inline constexpr void embdInstSendmrXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMR_XC_SHIFT, reg); }

const uint8_t BF_SENDMR_X1_SHIFT = 17;
const uint8_t BF_SENDMR_X1_NBITS = 5;
const uint32_t BF_SENDMR_X1_MASK = 0x1f;
const bool BF_SENDMR_X1_SIGNED = false;
inline constexpr RegId extrInstSendmrX1(EncInst inst) { return extrReg5(inst, BF_SENDMR_X1_SHIFT); }
inline constexpr void embdInstSendmrX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMR_X1_SHIFT, reg); }

const uint8_t BF_SENDMR_XD_SHIFT = 27;
const uint8_t BF_SENDMR_XD_NBITS = 5;
const uint32_t BF_SENDMR_XD_MASK = 0x1f;
const bool BF_SENDMR_XD_SIGNED = false;
inline constexpr RegId extrInstSendmrXd(EncInst inst) { return extrReg5(inst, BF_SENDMR_XD_SHIFT); }
inline constexpr void embdInstSendmrXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMR_XD_SHIFT, reg); }

const uint8_t BF_SENDMR2_XC_SHIFT = 12;
const uint8_t BF_SENDMR2_XC_NBITS = 5;
const uint32_t BF_SENDMR2_XC_MASK = 0x1f;
const bool BF_SENDMR2_XC_SIGNED = false;
inline constexpr RegId extrInstSendmr2Xc(EncInst inst) { return extrReg5(inst, BF_SENDMR2_XC_SHIFT); }
inline constexpr void embdInstSendmr2Xc(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMR2_XC_SHIFT, reg); }

const uint8_t BF_SENDMR2_X1_SHIFT = 17;
const uint8_t BF_SENDMR2_X1_NBITS = 5;
const uint32_t BF_SENDMR2_X1_MASK = 0x1f;
const bool BF_SENDMR2_X1_SIGNED = false;
inline constexpr RegId extrInstSendmr2X1(EncInst inst) { return extrReg5(inst, BF_SENDMR2_X1_SHIFT); }
inline constexpr void embdInstSendmr2X1(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMR2_X1_SHIFT, reg); }

const uint8_t BF_SENDMR2_X2_SHIFT = 22;
const uint8_t BF_SENDMR2_X2_NBITS = 5;
const uint32_t BF_SENDMR2_X2_MASK = 0x1f;
const bool BF_SENDMR2_X2_SIGNED = false;
inline constexpr RegId extrInstSendmr2X2(EncInst inst) { return extrReg5(inst, BF_SENDMR2_X2_SHIFT); }
inline constexpr void embdInstSendmr2X2(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMR2_X2_SHIFT, reg); }

const uint8_t BF_SENDMR2_XD_SHIFT = 27;
const uint8_t BF_SENDMR2_XD_NBITS = 5;
const uint32_t BF_SENDMR2_XD_MASK = 0x1f;
const bool BF_SENDMR2_XD_SIGNED = false;
inline constexpr RegId extrInstSendmr2Xd(EncInst inst) { return extrReg5(inst, BF_SENDMR2_XD_SHIFT); }
inline constexpr void embdInstSendmr2Xd(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMR2_XD_SHIFT, reg); }

/* M4-Type Bitfields */
const uint8_t BF_M4TYPE_XE_SHIFT = 7;
const uint8_t BF_M4TYPE_XE_NBITS = 5;
const uint32_t BF_M4TYPE_XE_MASK = 0x1f;
const bool BF_M4TYPE_XE_SIGNED = false;
inline constexpr RegId extrInstM4typeXe(EncInst inst) { return extrReg5(inst, BF_M4TYPE_XE_SHIFT); }
inline constexpr void embdInstM4typeXe(EncInst& inst, RegId reg) { embdReg5(inst, BF_M4TYPE_XE_SHIFT, reg); }

const uint8_t BF_M4TYPE_XC_SHIFT = 12;
const uint8_t BF_M4TYPE_XC_NBITS = 5;
const uint32_t BF_M4TYPE_XC_MASK = 0x1f;
const bool BF_M4TYPE_XC_SIGNED = false;
inline constexpr RegId extrInstM4typeXc(EncInst inst) { return extrReg5(inst, BF_M4TYPE_XC_SHIFT); }
inline constexpr void embdInstM4typeXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_M4TYPE_XC_SHIFT, reg); }

const uint8_t BF_M4TYPE_XOP_SHIFT = 17;
const uint8_t BF_M4TYPE_XOP_NBITS = 5;
const uint32_t BF_M4TYPE_XOP_MASK = 0x1f;
const bool BF_M4TYPE_XOP_SIGNED = false;
inline constexpr RegId extrInstM4typeXop(EncInst inst) { return extrReg5(inst, BF_M4TYPE_XOP_SHIFT); }
inline constexpr void embdInstM4typeXop(EncInst& inst, RegId reg) { embdReg5(inst, BF_M4TYPE_XOP_SHIFT, reg); }

const uint8_t BF_M4TYPE_IMM3_SHIFT = 22;
const uint8_t BF_M4TYPE_IMM3_NBITS = 3;
const uint32_t BF_M4TYPE_IMM3_MASK = 0x7;
const bool BF_M4TYPE_IMM3_SIGNED = false;
inline constexpr uint64_t extrInstM4typeImm3(EncInst inst) { return extrUnsignedImm(inst, BF_M4TYPE_IMM3_SHIFT, BF_M4TYPE_IMM3_NBITS); }
inline constexpr void embdInstM4typeImm3(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_M4TYPE_IMM3_SHIFT, BF_M4TYPE_IMM3_MASK, imm); }

const uint8_t BF_M4TYPE_IMM1_SHIFT = 26;
const uint8_t BF_M4TYPE_IMM1_NBITS = 1;
const uint32_t BF_M4TYPE_IMM1_MASK = 0x1;
const bool BF_M4TYPE_IMM1_SIGNED = false;
inline constexpr uint64_t extrInstM4typeImm1(EncInst inst) { return extrUnsignedImm(inst, BF_M4TYPE_IMM1_SHIFT, BF_M4TYPE_IMM1_NBITS); }
inline constexpr void embdInstM4typeImm1(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_M4TYPE_IMM1_SHIFT, BF_M4TYPE_IMM1_MASK, imm); }

const uint8_t BF_M4TYPE_XD_SHIFT = 27;
const uint8_t BF_M4TYPE_XD_NBITS = 5;
const uint32_t BF_M4TYPE_XD_MASK = 0x1f;
const bool BF_M4TYPE_XD_SIGNED = false;
inline constexpr RegId extrInstM4typeXd(EncInst inst) { return extrReg5(inst, BF_M4TYPE_XD_SHIFT); }
inline constexpr void embdInstM4typeXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_M4TYPE_XD_SHIFT, reg); }

const uint8_t BF_SENDOPS_XE_SHIFT = 7;
const uint8_t BF_SENDOPS_XE_NBITS = 5;
const uint32_t BF_SENDOPS_XE_MASK = 0x1f;
const bool BF_SENDOPS_XE_SIGNED = false;
inline constexpr RegId extrInstSendopsXe(EncInst inst) { return extrReg5(inst, BF_SENDOPS_XE_SHIFT); }
inline constexpr void embdInstSendopsXe(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDOPS_XE_SHIFT, reg); }

const uint8_t BF_SENDOPS_XC_SHIFT = 12;
const uint8_t BF_SENDOPS_XC_NBITS = 5;
const uint32_t BF_SENDOPS_XC_MASK = 0x1f;
const bool BF_SENDOPS_XC_SIGNED = false;
inline constexpr RegId extrInstSendopsXc(EncInst inst) { return extrReg5(inst, BF_SENDOPS_XC_SHIFT); }
inline constexpr void embdInstSendopsXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDOPS_XC_SHIFT, reg); }

const uint8_t BF_SENDOPS_XOP_SHIFT = 17;
const uint8_t BF_SENDOPS_XOP_NBITS = 5;
const uint32_t BF_SENDOPS_XOP_MASK = 0x1f;
const bool BF_SENDOPS_XOP_SIGNED = false;
inline constexpr RegId extrInstSendopsXop(EncInst inst) { return extrReg5(inst, BF_SENDOPS_XOP_SHIFT); }
inline constexpr void embdInstSendopsXop(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDOPS_XOP_SHIFT, reg); }

const uint8_t BF_SENDOPS_LENW_SHIFT = 22;
const uint8_t BF_SENDOPS_LENW_NBITS = 3;
const uint32_t BF_SENDOPS_LENW_MASK = 0x7;
const bool BF_SENDOPS_LENW_SIGNED = false;
inline constexpr uint64_t extrInstSendopsLenw(EncInst inst) { return extrUnsignedImm(inst, BF_SENDOPS_LENW_SHIFT, BF_SENDOPS_LENW_NBITS); }
inline constexpr void embdInstSendopsLenw(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SENDOPS_LENW_SHIFT, BF_SENDOPS_LENW_MASK, imm); }

const uint8_t BF_SENDOPS_MODE_SHIFT = 26;
const uint8_t BF_SENDOPS_MODE_NBITS = 1;
const uint32_t BF_SENDOPS_MODE_MASK = 0x1;
const bool BF_SENDOPS_MODE_SIGNED = false;
inline constexpr uint64_t extrInstSendopsMode(EncInst inst) { return extrUnsignedImm(inst, BF_SENDOPS_MODE_SHIFT, BF_SENDOPS_MODE_NBITS); }
inline constexpr void embdInstSendopsMode(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SENDOPS_MODE_SHIFT, BF_SENDOPS_MODE_MASK, imm); }

const uint8_t BF_SENDMOPS_XE_SHIFT = 7;
const uint8_t BF_SENDMOPS_XE_NBITS = 5;
const uint32_t BF_SENDMOPS_XE_MASK = 0x1f;
const bool BF_SENDMOPS_XE_SIGNED = false;
inline constexpr RegId extrInstSendmopsXe(EncInst inst) { return extrReg5(inst, BF_SENDMOPS_XE_SHIFT); }
inline constexpr void embdInstSendmopsXe(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMOPS_XE_SHIFT, reg); }

const uint8_t BF_SENDMOPS_XC_SHIFT = 12;
const uint8_t BF_SENDMOPS_XC_NBITS = 5;
const uint32_t BF_SENDMOPS_XC_MASK = 0x1f;
const bool BF_SENDMOPS_XC_SIGNED = false;
inline constexpr RegId extrInstSendmopsXc(EncInst inst) { return extrReg5(inst, BF_SENDMOPS_XC_SHIFT); }
inline constexpr void embdInstSendmopsXc(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMOPS_XC_SHIFT, reg); }

const uint8_t BF_SENDMOPS_XOP_SHIFT = 17;
const uint8_t BF_SENDMOPS_XOP_NBITS = 5;
const uint32_t BF_SENDMOPS_XOP_MASK = 0x1f;
const bool BF_SENDMOPS_XOP_SIGNED = false;
inline constexpr RegId extrInstSendmopsXop(EncInst inst) { return extrReg5(inst, BF_SENDMOPS_XOP_SHIFT); }
inline constexpr void embdInstSendmopsXop(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMOPS_XOP_SHIFT, reg); }

const uint8_t BF_SENDMOPS_LENW_SHIFT = 22;
const uint8_t BF_SENDMOPS_LENW_NBITS = 3;
const uint32_t BF_SENDMOPS_LENW_MASK = 0x7;
const bool BF_SENDMOPS_LENW_SIGNED = false;
inline constexpr uint64_t extrInstSendmopsLenw(EncInst inst) { return extrUnsignedImm(inst, BF_SENDMOPS_LENW_SHIFT, BF_SENDMOPS_LENW_NBITS); }
inline constexpr void embdInstSendmopsLenw(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SENDMOPS_LENW_SHIFT, BF_SENDMOPS_LENW_MASK, imm); }

const uint8_t BF_SENDMOPS_MODE_SHIFT = 26;
const uint8_t BF_SENDMOPS_MODE_NBITS = 1;
const uint32_t BF_SENDMOPS_MODE_MASK = 0x1;
const bool BF_SENDMOPS_MODE_SIGNED = false;
inline constexpr uint64_t extrInstSendmopsMode(EncInst inst) { return extrUnsignedImm(inst, BF_SENDMOPS_MODE_SHIFT, BF_SENDMOPS_MODE_NBITS); }
inline constexpr void embdInstSendmopsMode(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_SENDMOPS_MODE_SHIFT, BF_SENDMOPS_MODE_MASK, imm); }

const uint8_t BF_SENDMOPS_XD_SHIFT = 27;
const uint8_t BF_SENDMOPS_XD_NBITS = 5;
const uint32_t BF_SENDMOPS_XD_MASK = 0x1f;
const bool BF_SENDMOPS_XD_SIGNED = false;
inline constexpr RegId extrInstSendmopsXd(EncInst inst) { return extrReg5(inst, BF_SENDMOPS_XD_SHIFT); }
inline constexpr void embdInstSendmopsXd(EncInst& inst, RegId reg) { embdReg5(inst, BF_SENDMOPS_XD_SHIFT, reg); }

/* E-Type Bitfields */
const uint8_t BF_ETYPE_XS_SHIFT = 7;
const uint8_t BF_ETYPE_XS_NBITS = 5;
const uint32_t BF_ETYPE_XS_MASK = 0x1f;
const bool BF_ETYPE_XS_SIGNED = false;
inline constexpr RegId extrInstEtypeXs(EncInst inst) { return extrReg5(inst, BF_ETYPE_XS_SHIFT); }
inline constexpr void embdInstEtypeXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_ETYPE_XS_SHIFT, reg); }

const uint8_t BF_ETYPE_XD_SHIFT = 12;
const uint8_t BF_ETYPE_XD_NBITS = 4;
const uint32_t BF_ETYPE_XD_MASK = 0xf;
const bool BF_ETYPE_XD_SIGNED = false;
inline constexpr RegId extrInstEtypeXd(EncInst inst) { return extrReg4(inst, BF_ETYPE_XD_SHIFT); }
inline constexpr void embdInstEtypeXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_ETYPE_XD_SHIFT, reg); }

const uint8_t BF_ETYPE_SEL_SHIFT = 16;
const uint8_t BF_ETYPE_SEL_NBITS = 4;
const uint32_t BF_ETYPE_SEL_MASK = 0xf;
const bool BF_ETYPE_SEL_SIGNED = false;
inline constexpr uint64_t extrInstEtypeSel(EncInst inst) { return extrUnsignedImm(inst, BF_ETYPE_SEL_SHIFT, BF_ETYPE_SEL_NBITS); }
inline constexpr void embdInstEtypeSel(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_ETYPE_SEL_SHIFT, BF_ETYPE_SEL_MASK, imm); }

const uint8_t BF_ETYPE_IMM12_SHIFT = 20;
const uint8_t BF_ETYPE_IMM12_NBITS = 12;
const uint32_t BF_ETYPE_IMM12_MASK = 0xfff;
const bool BF_ETYPE_IMM12_SIGNED = false;
inline constexpr uint64_t extrInstEtypeImm12(EncInst inst) { return extrUnsignedImm(inst, BF_ETYPE_IMM12_SHIFT, BF_ETYPE_IMM12_NBITS); }
inline constexpr void embdInstEtypeImm12(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_ETYPE_IMM12_SHIFT, BF_ETYPE_IMM12_MASK, imm); }

const uint8_t BF_EVI_XS_SHIFT = 7;
const uint8_t BF_EVI_XS_NBITS = 5;
const uint32_t BF_EVI_XS_MASK = 0x1f;
const bool BF_EVI_XS_SIGNED = false;
inline constexpr RegId extrInstEviXs(EncInst inst) { return extrReg5(inst, BF_EVI_XS_SHIFT); }
inline constexpr void embdInstEviXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_EVI_XS_SHIFT, reg); }

const uint8_t BF_EVI_XD_SHIFT = 12;
const uint8_t BF_EVI_XD_NBITS = 4;
const uint32_t BF_EVI_XD_MASK = 0xf;
const bool BF_EVI_XD_SIGNED = false;
inline constexpr RegId extrInstEviXd(EncInst inst) { return extrReg4(inst, BF_EVI_XD_SHIFT); }
inline constexpr void embdInstEviXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_EVI_XD_SHIFT, reg); }

const uint8_t BF_EVI_SEL_SHIFT = 16;
const uint8_t BF_EVI_SEL_NBITS = 4;
const uint32_t BF_EVI_SEL_MASK = 0xf;
const bool BF_EVI_SEL_SIGNED = false;
inline constexpr uint64_t extrInstEviSel(EncInst inst) { return extrUnsignedImm(inst, BF_EVI_SEL_SHIFT, BF_EVI_SEL_NBITS); }
inline constexpr void embdInstEviSel(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_EVI_SEL_SHIFT, BF_EVI_SEL_MASK, imm); }

const uint8_t BF_EVI_IMM_SHIFT = 20;
const uint8_t BF_EVI_IMM_NBITS = 12;
const uint32_t BF_EVI_IMM_MASK = 0xfff;
const bool BF_EVI_IMM_SIGNED = false;
inline constexpr uint64_t extrInstEviImm(EncInst inst) { return extrUnsignedImm(inst, BF_EVI_IMM_SHIFT, BF_EVI_IMM_NBITS); }
inline constexpr void embdInstEviImm(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_EVI_IMM_SHIFT, BF_EVI_IMM_MASK, imm); }

const uint8_t BF_EVII_IMM1_SHIFT = 7;
const uint8_t BF_EVII_IMM1_NBITS = 5;
const uint32_t BF_EVII_IMM1_MASK = 0x1f;
const bool BF_EVII_IMM1_SIGNED = false;
inline constexpr uint64_t extrInstEviiImm1(EncInst inst) { return extrUnsignedImm(inst, BF_EVII_IMM1_SHIFT, BF_EVII_IMM1_NBITS); }
inline constexpr void embdInstEviiImm1(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_EVII_IMM1_SHIFT, BF_EVII_IMM1_MASK, imm); }

const uint8_t BF_EVII_XD_SHIFT = 12;
const uint8_t BF_EVII_XD_NBITS = 4;
const uint32_t BF_EVII_XD_MASK = 0xf;
const bool BF_EVII_XD_SIGNED = false;
inline constexpr RegId extrInstEviiXd(EncInst inst) { return extrReg4(inst, BF_EVII_XD_SHIFT); }
inline constexpr void embdInstEviiXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_EVII_XD_SHIFT, reg); }

const uint8_t BF_EVII_SEL_SHIFT = 16;
const uint8_t BF_EVII_SEL_NBITS = 4;
const uint32_t BF_EVII_SEL_MASK = 0xf;
const bool BF_EVII_SEL_SIGNED = false;
inline constexpr uint64_t extrInstEviiSel(EncInst inst) { return extrUnsignedImm(inst, BF_EVII_SEL_SHIFT, BF_EVII_SEL_NBITS); }
inline constexpr void embdInstEviiSel(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_EVII_SEL_SHIFT, BF_EVII_SEL_MASK, imm); }

const uint8_t BF_EVII_IMM2_SHIFT = 20;
const uint8_t BF_EVII_IMM2_NBITS = 12;
const uint32_t BF_EVII_IMM2_MASK = 0xfff;
const bool BF_EVII_IMM2_SIGNED = false;
inline constexpr uint64_t extrInstEviiImm2(EncInst inst) { return extrUnsignedImm(inst, BF_EVII_IMM2_SHIFT, BF_EVII_IMM2_NBITS); }
inline constexpr void embdInstEviiImm2(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_EVII_IMM2_SHIFT, BF_EVII_IMM2_MASK, imm); }

/* R4-Type Bitfields */
const uint8_t BF_R4TYPE_XS_SHIFT = 7;
const uint8_t BF_R4TYPE_XS_NBITS = 5;
const uint32_t BF_R4TYPE_XS_MASK = 0x1f;
const bool BF_R4TYPE_XS_SIGNED = false;
inline constexpr RegId extrInstR4typeXs(EncInst inst) { return extrReg5(inst, BF_R4TYPE_XS_SHIFT); }
inline constexpr void embdInstR4typeXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_R4TYPE_XS_SHIFT, reg); }

const uint8_t BF_R4TYPE_XD_SHIFT = 12;
const uint8_t BF_R4TYPE_XD_NBITS = 4;
const uint32_t BF_R4TYPE_XD_MASK = 0xf;
const bool BF_R4TYPE_XD_SIGNED = false;
inline constexpr RegId extrInstR4typeXd(EncInst inst) { return extrReg4(inst, BF_R4TYPE_XD_SHIFT); }
inline constexpr void embdInstR4typeXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_R4TYPE_XD_SHIFT, reg); }

const uint8_t BF_R4TYPE_SEL_SHIFT = 16;
const uint8_t BF_R4TYPE_SEL_NBITS = 4;
const uint32_t BF_R4TYPE_SEL_MASK = 0xf;
const bool BF_R4TYPE_SEL_SIGNED = false;
inline constexpr uint64_t extrInstR4typeSel(EncInst inst) { return extrUnsignedImm(inst, BF_R4TYPE_SEL_SHIFT, BF_R4TYPE_SEL_NBITS); }
inline constexpr void embdInstR4typeSel(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_R4TYPE_SEL_SHIFT, BF_R4TYPE_SEL_MASK, imm); }

const uint8_t BF_R4TYPE_XOP1_SHIFT = 20;
const uint8_t BF_R4TYPE_XOP1_NBITS = 5;
const uint32_t BF_R4TYPE_XOP1_MASK = 0x1f;
const bool BF_R4TYPE_XOP1_SIGNED = false;
inline constexpr RegId extrInstR4typeXop1(EncInst inst) { return extrReg5(inst, BF_R4TYPE_XOP1_SHIFT); }
inline constexpr void embdInstR4typeXop1(EncInst& inst, RegId reg) { embdReg5(inst, BF_R4TYPE_XOP1_SHIFT, reg); }

const uint8_t BF_R4TYPE_XOP2_SHIFT = 25;
const uint8_t BF_R4TYPE_XOP2_NBITS = 5;
const uint32_t BF_R4TYPE_XOP2_MASK = 0x1f;
const bool BF_R4TYPE_XOP2_SIGNED = false;
inline constexpr RegId extrInstR4typeXop2(EncInst inst) { return extrReg5(inst, BF_R4TYPE_XOP2_SHIFT); }
inline constexpr void embdInstR4typeXop2(EncInst& inst, RegId reg) { embdReg5(inst, BF_R4TYPE_XOP2_SHIFT, reg); }

const uint8_t BF_EV_XS_SHIFT = 7;
const uint8_t BF_EV_XS_NBITS = 5;
const uint32_t BF_EV_XS_MASK = 0x1f;
const bool BF_EV_XS_SIGNED = false;
inline constexpr RegId extrInstEvXs(EncInst inst) { return extrReg5(inst, BF_EV_XS_SHIFT); }
inline constexpr void embdInstEvXs(EncInst& inst, RegId reg) { embdReg5(inst, BF_EV_XS_SHIFT, reg); }

const uint8_t BF_EV_XD_SHIFT = 12;
const uint8_t BF_EV_XD_NBITS = 4;
const uint32_t BF_EV_XD_MASK = 0xf;
const bool BF_EV_XD_SIGNED = false;
inline constexpr RegId extrInstEvXd(EncInst inst) { return extrReg4(inst, BF_EV_XD_SHIFT); }
inline constexpr void embdInstEvXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_EV_XD_SHIFT, reg); }

const uint8_t BF_EV_SEL_SHIFT = 16;
const uint8_t BF_EV_SEL_NBITS = 4;
const uint32_t BF_EV_SEL_MASK = 0xf;
const bool BF_EV_SEL_SIGNED = false;
inline constexpr uint64_t extrInstEvSel(EncInst inst) { return extrUnsignedImm(inst, BF_EV_SEL_SHIFT, BF_EV_SEL_NBITS); }
inline constexpr void embdInstEvSel(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_EV_SEL_SHIFT, BF_EV_SEL_MASK, imm); }

const uint8_t BF_EV_XOP1_SHIFT = 20;
const uint8_t BF_EV_XOP1_NBITS = 5;
const uint32_t BF_EV_XOP1_MASK = 0x1f;
const bool BF_EV_XOP1_SIGNED = false;
inline constexpr RegId extrInstEvXop1(EncInst inst) { return extrReg5(inst, BF_EV_XOP1_SHIFT); }
inline constexpr void embdInstEvXop1(EncInst& inst, RegId reg) { embdReg5(inst, BF_EV_XOP1_SHIFT, reg); }

const uint8_t BF_EV_XOP2_SHIFT = 25;
const uint8_t BF_EV_XOP2_NBITS = 5;
const uint32_t BF_EV_XOP2_MASK = 0x1f;
const bool BF_EV_XOP2_SIGNED = false;
inline constexpr RegId extrInstEvXop2(EncInst inst) { return extrReg5(inst, BF_EV_XOP2_SHIFT); }
inline constexpr void embdInstEvXop2(EncInst& inst, RegId reg) { embdReg5(inst, BF_EV_XOP2_SHIFT, reg); }

const uint8_t BF_CSWP_X1_SHIFT = 7;
const uint8_t BF_CSWP_X1_NBITS = 5;
const uint32_t BF_CSWP_X1_MASK = 0x1f;
const bool BF_CSWP_X1_SIGNED = false;
inline constexpr RegId extrInstCswpX1(EncInst inst) { return extrReg5(inst, BF_CSWP_X1_SHIFT); }
inline constexpr void embdInstCswpX1(EncInst& inst, RegId reg) { embdReg5(inst, BF_CSWP_X1_SHIFT, reg); }

const uint8_t BF_CSWP_X2_SHIFT = 12;
const uint8_t BF_CSWP_X2_NBITS = 4;
const uint32_t BF_CSWP_X2_MASK = 0xf;
const bool BF_CSWP_X2_SIGNED = false;
inline constexpr RegId extrInstCswpX2(EncInst inst) { return extrReg4(inst, BF_CSWP_X2_SHIFT); }
inline constexpr void embdInstCswpX2(EncInst& inst, RegId reg) { embdReg4(inst, BF_CSWP_X2_SHIFT, reg); }

const uint8_t BF_CSWP_X3_SHIFT = 20;
const uint8_t BF_CSWP_X3_NBITS = 5;
const uint32_t BF_CSWP_X3_MASK = 0x1f;
const bool BF_CSWP_X3_SIGNED = false;
inline constexpr RegId extrInstCswpX3(EncInst inst) { return extrReg5(inst, BF_CSWP_X3_SHIFT); }
inline constexpr void embdInstCswpX3(EncInst& inst, RegId reg) { embdReg5(inst, BF_CSWP_X3_SHIFT, reg); }

const uint8_t BF_CSWP_X4_SHIFT = 25;
const uint8_t BF_CSWP_X4_NBITS = 5;
const uint32_t BF_CSWP_X4_MASK = 0x1f;
const bool BF_CSWP_X4_SIGNED = false;
inline constexpr RegId extrInstCswpX4(EncInst inst) { return extrReg5(inst, BF_CSWP_X4_SHIFT); }
inline constexpr void embdInstCswpX4(EncInst& inst, RegId reg) { embdReg5(inst, BF_CSWP_X4_SHIFT, reg); }

/* VF-Type Bitfields */
const uint8_t BF_VFTYPE_IMMA_SHIFT = 7;
const uint8_t BF_VFTYPE_IMMA_NBITS = 4;
const uint32_t BF_VFTYPE_IMMA_MASK = 0xf;
const bool BF_VFTYPE_IMMA_SIGNED = false;
inline constexpr uint64_t extrInstVftypeImma(EncInst inst) { return extrUnsignedImm(inst, BF_VFTYPE_IMMA_SHIFT, BF_VFTYPE_IMMA_NBITS); }
inline constexpr void embdInstVftypeImma(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VFTYPE_IMMA_SHIFT, BF_VFTYPE_IMMA_MASK, imm); }

const uint8_t BF_VFTYPE_XD_SHIFT = 12;
const uint8_t BF_VFTYPE_XD_NBITS = 4;
const uint32_t BF_VFTYPE_XD_MASK = 0xf;
const bool BF_VFTYPE_XD_SIGNED = false;
inline constexpr RegId extrInstVftypeXd(EncInst inst) { return extrReg4(inst, BF_VFTYPE_XD_SHIFT); }
inline constexpr void embdInstVftypeXd(EncInst& inst, RegId reg) { embdReg4(inst, BF_VFTYPE_XD_SHIFT, reg); }

const uint8_t BF_VFTYPE_IMMB_SHIFT = 17;
const uint8_t BF_VFTYPE_IMMB_NBITS = 12;
const uint32_t BF_VFTYPE_IMMB_MASK = 0xfff;
const bool BF_VFTYPE_IMMB_SIGNED = false;
inline constexpr uint64_t extrInstVftypeImmb(EncInst inst) { return extrUnsignedImm(inst, BF_VFTYPE_IMMB_SHIFT, BF_VFTYPE_IMMB_NBITS); }
inline constexpr void embdInstVftypeImmb(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VFTYPE_IMMB_SHIFT, BF_VFTYPE_IMMB_MASK, imm); }

const uint8_t BF_VFTYPE_PRECISION_SHIFT = 29;
const uint8_t BF_VFTYPE_PRECISION_NBITS = 3;
const uint32_t BF_VFTYPE_PRECISION_MASK = 0x7;
const bool BF_VFTYPE_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVftypePrecision(EncInst inst) { return extrUnsignedImm(inst, BF_VFTYPE_PRECISION_SHIFT, BF_VFTYPE_PRECISION_NBITS); }
inline constexpr void embdInstVftypePrecision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VFTYPE_PRECISION_SHIFT, BF_VFTYPE_PRECISION_MASK, imm); }

const uint8_t BF_VFILL_32_IMMA_SHIFT = 7;
const uint8_t BF_VFILL_32_IMMA_NBITS = 4;
const uint32_t BF_VFILL_32_IMMA_MASK = 0xf;
const bool BF_VFILL_32_IMMA_SIGNED = false;
inline constexpr uint64_t extrInstVfill_32Imma(EncInst inst) { return extrUnsignedImm(inst, BF_VFILL_32_IMMA_SHIFT, BF_VFILL_32_IMMA_NBITS); }
inline constexpr void embdInstVfill_32Imma(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VFILL_32_IMMA_SHIFT, BF_VFILL_32_IMMA_MASK, imm); }

const uint8_t BF_VFILL_32_XD_SHIFT = 12;
const uint8_t BF_VFILL_32_XD_NBITS = 4;
const uint32_t BF_VFILL_32_XD_MASK = 0xf;
const bool BF_VFILL_32_XD_SIGNED = false;
inline constexpr RegId extrInstVfill_32Xd(EncInst inst) { return extrReg4(inst, BF_VFILL_32_XD_SHIFT); }
inline constexpr void embdInstVfill_32Xd(EncInst& inst, RegId reg) { embdReg4(inst, BF_VFILL_32_XD_SHIFT, reg); }

const uint8_t BF_VFILL_32_IMMB_SHIFT = 17;
const uint8_t BF_VFILL_32_IMMB_NBITS = 12;
const uint32_t BF_VFILL_32_IMMB_MASK = 0xfff;
const bool BF_VFILL_32_IMMB_SIGNED = false;
inline constexpr uint64_t extrInstVfill_32Immb(EncInst inst) { return extrUnsignedImm(inst, BF_VFILL_32_IMMB_SHIFT, BF_VFILL_32_IMMB_NBITS); }
inline constexpr void embdInstVfill_32Immb(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VFILL_32_IMMB_SHIFT, BF_VFILL_32_IMMB_MASK, imm); }

const uint8_t BF_VFILL_32_PRECISION_SHIFT = 29;
const uint8_t BF_VFILL_32_PRECISION_NBITS = 3;
const uint32_t BF_VFILL_32_PRECISION_MASK = 0x7;
const bool BF_VFILL_32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVfill_32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VFILL_32_PRECISION_SHIFT, BF_VFILL_32_PRECISION_NBITS); }
inline constexpr void embdInstVfill_32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VFILL_32_PRECISION_SHIFT, BF_VFILL_32_PRECISION_MASK, imm); }

const uint8_t BF_VFILL_I32_IMMA_SHIFT = 7;
const uint8_t BF_VFILL_I32_IMMA_NBITS = 4;
const uint32_t BF_VFILL_I32_IMMA_MASK = 0xf;
const bool BF_VFILL_I32_IMMA_SIGNED = true;
inline constexpr int64_t extrInstVfill_i32Imma(EncInst inst) { return extrSignedImm(inst, BF_VFILL_I32_IMMA_SHIFT, BF_VFILL_I32_IMMA_NBITS); }
inline constexpr void embdInstVfill_i32Imma(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_VFILL_I32_IMMA_SHIFT, BF_VFILL_I32_IMMA_MASK, imm); }

const uint8_t BF_VFILL_I32_XD_SHIFT = 12;
const uint8_t BF_VFILL_I32_XD_NBITS = 4;
const uint32_t BF_VFILL_I32_XD_MASK = 0xf;
const bool BF_VFILL_I32_XD_SIGNED = false;
inline constexpr RegId extrInstVfill_i32Xd(EncInst inst) { return extrReg4(inst, BF_VFILL_I32_XD_SHIFT); }
inline constexpr void embdInstVfill_i32Xd(EncInst& inst, RegId reg) { embdReg4(inst, BF_VFILL_I32_XD_SHIFT, reg); }

const uint8_t BF_VFILL_I32_IMMB_SHIFT = 17;
const uint8_t BF_VFILL_I32_IMMB_NBITS = 12;
const uint32_t BF_VFILL_I32_IMMB_MASK = 0xfff;
const bool BF_VFILL_I32_IMMB_SIGNED = false;
inline constexpr uint64_t extrInstVfill_i32Immb(EncInst inst) { return extrUnsignedImm(inst, BF_VFILL_I32_IMMB_SHIFT, BF_VFILL_I32_IMMB_NBITS); }
inline constexpr void embdInstVfill_i32Immb(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VFILL_I32_IMMB_SHIFT, BF_VFILL_I32_IMMB_MASK, imm); }

const uint8_t BF_VFILL_I32_PRECISION_SHIFT = 29;
const uint8_t BF_VFILL_I32_PRECISION_NBITS = 3;
const uint32_t BF_VFILL_I32_PRECISION_MASK = 0x7;
const bool BF_VFILL_I32_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVfill_i32Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VFILL_I32_PRECISION_SHIFT, BF_VFILL_I32_PRECISION_NBITS); }
inline constexpr void embdInstVfill_i32Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VFILL_I32_PRECISION_SHIFT, BF_VFILL_I32_PRECISION_MASK, imm); }

const uint8_t BF_VFILL_B16_IMMA_SHIFT = 7;
const uint8_t BF_VFILL_B16_IMMA_NBITS = 4;
const uint32_t BF_VFILL_B16_IMMA_MASK = 0xf;
const bool BF_VFILL_B16_IMMA_SIGNED = false;
inline constexpr uint64_t extrInstVfill_b16Imma(EncInst inst) { return extrUnsignedImm(inst, BF_VFILL_B16_IMMA_SHIFT, BF_VFILL_B16_IMMA_NBITS); }
inline constexpr void embdInstVfill_b16Imma(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VFILL_B16_IMMA_SHIFT, BF_VFILL_B16_IMMA_MASK, imm); }

const uint8_t BF_VFILL_B16_XD_SHIFT = 12;
const uint8_t BF_VFILL_B16_XD_NBITS = 4;
const uint32_t BF_VFILL_B16_XD_MASK = 0xf;
const bool BF_VFILL_B16_XD_SIGNED = false;
inline constexpr RegId extrInstVfill_b16Xd(EncInst inst) { return extrReg4(inst, BF_VFILL_B16_XD_SHIFT); }
inline constexpr void embdInstVfill_b16Xd(EncInst& inst, RegId reg) { embdReg4(inst, BF_VFILL_B16_XD_SHIFT, reg); }

const uint8_t BF_VFILL_B16_IMMB_SHIFT = 17;
const uint8_t BF_VFILL_B16_IMMB_NBITS = 12;
const uint32_t BF_VFILL_B16_IMMB_MASK = 0xfff;
const bool BF_VFILL_B16_IMMB_SIGNED = false;
inline constexpr uint64_t extrInstVfill_b16Immb(EncInst inst) { return extrUnsignedImm(inst, BF_VFILL_B16_IMMB_SHIFT, BF_VFILL_B16_IMMB_NBITS); }
inline constexpr void embdInstVfill_b16Immb(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VFILL_B16_IMMB_SHIFT, BF_VFILL_B16_IMMB_MASK, imm); }

const uint8_t BF_VFILL_B16_PRECISION_SHIFT = 29;
const uint8_t BF_VFILL_B16_PRECISION_NBITS = 3;
const uint32_t BF_VFILL_B16_PRECISION_MASK = 0x7;
const bool BF_VFILL_B16_PRECISION_SIGNED = false;
inline constexpr uint64_t extrInstVfill_b16Precision(EncInst inst) { return extrUnsignedImm(inst, BF_VFILL_B16_PRECISION_SHIFT, BF_VFILL_B16_PRECISION_NBITS); }
inline constexpr void embdInstVfill_b16Precision(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_VFILL_B16_PRECISION_SHIFT, BF_VFILL_B16_PRECISION_MASK, imm); }

/* Event-Transition Bitfields */
const uint8_t BF_EVENTTR_ATTACH_SHIFT = 0;
const uint8_t BF_EVENTTR_ATTACH_NBITS = 8;
const uint32_t BF_EVENTTR_ATTACH_MASK = 0xff;
const bool BF_EVENTTR_ATTACH_SIGNED = true;
inline constexpr int64_t extrInstEventtrAttach(EncInst inst) { return extrSignedImm(inst, BF_EVENTTR_ATTACH_SHIFT, BF_EVENTTR_ATTACH_NBITS); }
inline constexpr void embdInstEventtrAttach(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_EVENTTR_ATTACH_SHIFT, BF_EVENTTR_ATTACH_MASK, imm); }

const uint8_t BF_EVENTTR_TYPE_SHIFT = 8;
const uint8_t BF_EVENTTR_TYPE_NBITS = 4;
const uint32_t BF_EVENTTR_TYPE_MASK = 0xf;

const uint8_t BF_EVENTTR_TARGET_SHIFT = 12;
const uint8_t BF_EVENTTR_TARGET_NBITS = 20;
const uint32_t BF_EVENTTR_TARGET_MASK = 0xfffff;
const bool BF_EVENTTR_TARGET_SIGNED = true;
inline constexpr int64_t extrInstEventtrTarget(EncInst inst) { return extrSignedImm(inst, BF_EVENTTR_TARGET_SHIFT, BF_EVENTTR_TARGET_NBITS); }
inline constexpr void embdInstEventtrTarget(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_EVENTTR_TARGET_SHIFT, BF_EVENTTR_TARGET_MASK, imm); }

const uint8_t BF_EVENTTX_ATTACH_SHIFT = 0;
const uint8_t BF_EVENTTX_ATTACH_NBITS = 8;
const uint32_t BF_EVENTTX_ATTACH_MASK = 0xff;
const bool BF_EVENTTX_ATTACH_SIGNED = true;
inline constexpr int64_t extrInstEventtxAttach(EncInst inst) { return extrSignedImm(inst, BF_EVENTTX_ATTACH_SHIFT, BF_EVENTTX_ATTACH_NBITS); }
inline constexpr void embdInstEventtxAttach(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_EVENTTX_ATTACH_SHIFT, BF_EVENTTX_ATTACH_MASK, imm); }

const uint8_t BF_EVENTTX_TYPE_SHIFT = 8;
const uint8_t BF_EVENTTX_TYPE_NBITS = 4;
const uint32_t BF_EVENTTX_TYPE_MASK = 0xf;

const uint8_t BF_EVENTTX_TARGET_SHIFT = 12;
const uint8_t BF_EVENTTX_TARGET_NBITS = 20;
const uint32_t BF_EVENTTX_TARGET_MASK = 0xfffff;
const bool BF_EVENTTX_TARGET_SIGNED = true;
inline constexpr int64_t extrInstEventtxTarget(EncInst inst) { return extrSignedImm(inst, BF_EVENTTX_TARGET_SHIFT, BF_EVENTTX_TARGET_NBITS); }
inline constexpr void embdInstEventtxTarget(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_EVENTTX_TARGET_SHIFT, BF_EVENTTX_TARGET_MASK, imm); }

/* EFA-Transition Bitfields */
const uint8_t BF_EFATR_ATTACH_SHIFT = 0;
const uint8_t BF_EFATR_ATTACH_NBITS = 8;
const uint32_t BF_EFATR_ATTACH_MASK = 0xff;
const bool BF_EFATR_ATTACH_SIGNED = true;
inline constexpr int64_t extrInstEfatrAttach(EncInst inst) { return extrSignedImm(inst, BF_EFATR_ATTACH_SHIFT, BF_EFATR_ATTACH_NBITS); }
inline constexpr void embdInstEfatrAttach(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_EFATR_ATTACH_SHIFT, BF_EFATR_ATTACH_MASK, imm); }

const uint8_t BF_EFATR_TYPE_SHIFT = 8;
const uint8_t BF_EFATR_TYPE_NBITS = 4;
const uint32_t BF_EFATR_TYPE_MASK = 0xf;

const uint8_t BF_EFATR_TARGET_SHIFT = 12;
const uint8_t BF_EFATR_TARGET_NBITS = 12;
const uint32_t BF_EFATR_TARGET_MASK = 0xfff;
const bool BF_EFATR_TARGET_SIGNED = true;
inline constexpr int64_t extrInstEfatrTarget(EncInst inst) { return extrSignedImm(inst, BF_EFATR_TARGET_SHIFT, BF_EFATR_TARGET_NBITS); }
inline constexpr void embdInstEfatrTarget(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_EFATR_TARGET_SHIFT, BF_EFATR_TARGET_MASK, imm); }

const uint8_t BF_EFATR_SIGNATURE_SHIFT = 24;
const uint8_t BF_EFATR_SIGNATURE_NBITS = 8;
const uint32_t BF_EFATR_SIGNATURE_MASK = 0xff;
const bool BF_EFATR_SIGNATURE_SIGNED = false;
inline constexpr uint64_t extrInstEfatrSignature(EncInst inst) { return extrUnsignedImm(inst, BF_EFATR_SIGNATURE_SHIFT, BF_EFATR_SIGNATURE_NBITS); }
inline constexpr void embdInstEfatrSignature(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_EFATR_SIGNATURE_SHIFT, BF_EFATR_SIGNATURE_MASK, imm); }

const uint8_t BF_BASICTX_ATTACH_SHIFT = 0;
const uint8_t BF_BASICTX_ATTACH_NBITS = 8;
const uint32_t BF_BASICTX_ATTACH_MASK = 0xff;
const bool BF_BASICTX_ATTACH_SIGNED = true;
inline constexpr int64_t extrInstBasictxAttach(EncInst inst) { return extrSignedImm(inst, BF_BASICTX_ATTACH_SHIFT, BF_BASICTX_ATTACH_NBITS); }
inline constexpr void embdInstBasictxAttach(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BASICTX_ATTACH_SHIFT, BF_BASICTX_ATTACH_MASK, imm); }

const uint8_t BF_BASICTX_TYPE_SHIFT = 8;
const uint8_t BF_BASICTX_TYPE_NBITS = 4;
const uint32_t BF_BASICTX_TYPE_MASK = 0xf;

const uint8_t BF_BASICTX_TARGET_SHIFT = 12;
const uint8_t BF_BASICTX_TARGET_NBITS = 12;
const uint32_t BF_BASICTX_TARGET_MASK = 0xfff;
const bool BF_BASICTX_TARGET_SIGNED = true;
inline constexpr int64_t extrInstBasictxTarget(EncInst inst) { return extrSignedImm(inst, BF_BASICTX_TARGET_SHIFT, BF_BASICTX_TARGET_NBITS); }
inline constexpr void embdInstBasictxTarget(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_BASICTX_TARGET_SHIFT, BF_BASICTX_TARGET_MASK, imm); }

const uint8_t BF_BASICTX_SIGNATURE_SHIFT = 24;
const uint8_t BF_BASICTX_SIGNATURE_NBITS = 8;
const uint32_t BF_BASICTX_SIGNATURE_MASK = 0xff;
const bool BF_BASICTX_SIGNATURE_SIGNED = false;
inline constexpr uint64_t extrInstBasictxSignature(EncInst inst) { return extrUnsignedImm(inst, BF_BASICTX_SIGNATURE_SHIFT, BF_BASICTX_SIGNATURE_NBITS); }
inline constexpr void embdInstBasictxSignature(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_BASICTX_SIGNATURE_SHIFT, BF_BASICTX_SIGNATURE_MASK, imm); }

const uint8_t BF_MAJORITYTX_ATTACH_SHIFT = 0;
const uint8_t BF_MAJORITYTX_ATTACH_NBITS = 8;
const uint32_t BF_MAJORITYTX_ATTACH_MASK = 0xff;
const bool BF_MAJORITYTX_ATTACH_SIGNED = true;
inline constexpr int64_t extrInstMajoritytxAttach(EncInst inst) { return extrSignedImm(inst, BF_MAJORITYTX_ATTACH_SHIFT, BF_MAJORITYTX_ATTACH_NBITS); }
inline constexpr void embdInstMajoritytxAttach(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_MAJORITYTX_ATTACH_SHIFT, BF_MAJORITYTX_ATTACH_MASK, imm); }

const uint8_t BF_MAJORITYTX_TYPE_SHIFT = 8;
const uint8_t BF_MAJORITYTX_TYPE_NBITS = 4;
const uint32_t BF_MAJORITYTX_TYPE_MASK = 0xf;

const uint8_t BF_MAJORITYTX_TARGET_SHIFT = 12;
const uint8_t BF_MAJORITYTX_TARGET_NBITS = 12;
const uint32_t BF_MAJORITYTX_TARGET_MASK = 0xfff;
const bool BF_MAJORITYTX_TARGET_SIGNED = true;
inline constexpr int64_t extrInstMajoritytxTarget(EncInst inst) { return extrSignedImm(inst, BF_MAJORITYTX_TARGET_SHIFT, BF_MAJORITYTX_TARGET_NBITS); }
inline constexpr void embdInstMajoritytxTarget(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_MAJORITYTX_TARGET_SHIFT, BF_MAJORITYTX_TARGET_MASK, imm); }

const uint8_t BF_MAJORITYTX_SIGNATURE_SHIFT = 24;
const uint8_t BF_MAJORITYTX_SIGNATURE_NBITS = 8;
const uint32_t BF_MAJORITYTX_SIGNATURE_MASK = 0xff;
const bool BF_MAJORITYTX_SIGNATURE_SIGNED = false;
inline constexpr uint64_t extrInstMajoritytxSignature(EncInst inst) { return extrUnsignedImm(inst, BF_MAJORITYTX_SIGNATURE_SHIFT, BF_MAJORITYTX_SIGNATURE_NBITS); }
inline constexpr void embdInstMajoritytxSignature(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_MAJORITYTX_SIGNATURE_SHIFT, BF_MAJORITYTX_SIGNATURE_MASK, imm); }

const uint8_t BF_DEFAULTTX_ATTACH_SHIFT = 0;
const uint8_t BF_DEFAULTTX_ATTACH_NBITS = 8;
const uint32_t BF_DEFAULTTX_ATTACH_MASK = 0xff;
const bool BF_DEFAULTTX_ATTACH_SIGNED = true;
inline constexpr int64_t extrInstDefaulttxAttach(EncInst inst) { return extrSignedImm(inst, BF_DEFAULTTX_ATTACH_SHIFT, BF_DEFAULTTX_ATTACH_NBITS); }
inline constexpr void embdInstDefaulttxAttach(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_DEFAULTTX_ATTACH_SHIFT, BF_DEFAULTTX_ATTACH_MASK, imm); }

const uint8_t BF_DEFAULTTX_TYPE_SHIFT = 8;
const uint8_t BF_DEFAULTTX_TYPE_NBITS = 4;
const uint32_t BF_DEFAULTTX_TYPE_MASK = 0xf;

const uint8_t BF_DEFAULTTX_TARGET_SHIFT = 12;
const uint8_t BF_DEFAULTTX_TARGET_NBITS = 12;
const uint32_t BF_DEFAULTTX_TARGET_MASK = 0xfff;
const bool BF_DEFAULTTX_TARGET_SIGNED = true;
inline constexpr int64_t extrInstDefaulttxTarget(EncInst inst) { return extrSignedImm(inst, BF_DEFAULTTX_TARGET_SHIFT, BF_DEFAULTTX_TARGET_NBITS); }
inline constexpr void embdInstDefaulttxTarget(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_DEFAULTTX_TARGET_SHIFT, BF_DEFAULTTX_TARGET_MASK, imm); }

const uint8_t BF_DEFAULTTX_SIGNATURE_SHIFT = 24;
const uint8_t BF_DEFAULTTX_SIGNATURE_NBITS = 8;
const uint32_t BF_DEFAULTTX_SIGNATURE_MASK = 0xff;
const bool BF_DEFAULTTX_SIGNATURE_SIGNED = false;
inline constexpr uint64_t extrInstDefaulttxSignature(EncInst inst) { return extrUnsignedImm(inst, BF_DEFAULTTX_SIGNATURE_SHIFT, BF_DEFAULTTX_SIGNATURE_NBITS); }
inline constexpr void embdInstDefaulttxSignature(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_DEFAULTTX_SIGNATURE_SHIFT, BF_DEFAULTTX_SIGNATURE_MASK, imm); }

const uint8_t BF_EPSILONTX_ATTACH_SHIFT = 0;
const uint8_t BF_EPSILONTX_ATTACH_NBITS = 8;
const uint32_t BF_EPSILONTX_ATTACH_MASK = 0xff;
const bool BF_EPSILONTX_ATTACH_SIGNED = true;
inline constexpr int64_t extrInstEpsilontxAttach(EncInst inst) { return extrSignedImm(inst, BF_EPSILONTX_ATTACH_SHIFT, BF_EPSILONTX_ATTACH_NBITS); }
inline constexpr void embdInstEpsilontxAttach(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_EPSILONTX_ATTACH_SHIFT, BF_EPSILONTX_ATTACH_MASK, imm); }

const uint8_t BF_EPSILONTX_TYPE_SHIFT = 8;
const uint8_t BF_EPSILONTX_TYPE_NBITS = 4;
const uint32_t BF_EPSILONTX_TYPE_MASK = 0xf;

const uint8_t BF_EPSILONTX_TARGET_SHIFT = 12;
const uint8_t BF_EPSILONTX_TARGET_NBITS = 12;
const uint32_t BF_EPSILONTX_TARGET_MASK = 0xfff;
const bool BF_EPSILONTX_TARGET_SIGNED = true;
inline constexpr int64_t extrInstEpsilontxTarget(EncInst inst) { return extrSignedImm(inst, BF_EPSILONTX_TARGET_SHIFT, BF_EPSILONTX_TARGET_NBITS); }
inline constexpr void embdInstEpsilontxTarget(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_EPSILONTX_TARGET_SHIFT, BF_EPSILONTX_TARGET_MASK, imm); }

const uint8_t BF_EPSILONTX_SIGNATURE_SHIFT = 24;
const uint8_t BF_EPSILONTX_SIGNATURE_NBITS = 8;
const uint32_t BF_EPSILONTX_SIGNATURE_MASK = 0xff;
const bool BF_EPSILONTX_SIGNATURE_SIGNED = false;
inline constexpr uint64_t extrInstEpsilontxSignature(EncInst inst) { return extrUnsignedImm(inst, BF_EPSILONTX_SIGNATURE_SHIFT, BF_EPSILONTX_SIGNATURE_NBITS); }
inline constexpr void embdInstEpsilontxSignature(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_EPSILONTX_SIGNATURE_SHIFT, BF_EPSILONTX_SIGNATURE_MASK, imm); }

const uint8_t BF_COMMONTX_ATTACH_SHIFT = 0;
const uint8_t BF_COMMONTX_ATTACH_NBITS = 8;
const uint32_t BF_COMMONTX_ATTACH_MASK = 0xff;
const bool BF_COMMONTX_ATTACH_SIGNED = true;
inline constexpr int64_t extrInstCommontxAttach(EncInst inst) { return extrSignedImm(inst, BF_COMMONTX_ATTACH_SHIFT, BF_COMMONTX_ATTACH_NBITS); }
inline constexpr void embdInstCommontxAttach(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_COMMONTX_ATTACH_SHIFT, BF_COMMONTX_ATTACH_MASK, imm); }

const uint8_t BF_COMMONTX_TYPE_SHIFT = 8;
const uint8_t BF_COMMONTX_TYPE_NBITS = 4;
const uint32_t BF_COMMONTX_TYPE_MASK = 0xf;

const uint8_t BF_COMMONTX_TARGET_SHIFT = 12;
const uint8_t BF_COMMONTX_TARGET_NBITS = 12;
const uint32_t BF_COMMONTX_TARGET_MASK = 0xfff;
const bool BF_COMMONTX_TARGET_SIGNED = true;
inline constexpr int64_t extrInstCommontxTarget(EncInst inst) { return extrSignedImm(inst, BF_COMMONTX_TARGET_SHIFT, BF_COMMONTX_TARGET_NBITS); }
inline constexpr void embdInstCommontxTarget(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_COMMONTX_TARGET_SHIFT, BF_COMMONTX_TARGET_MASK, imm); }

const uint8_t BF_COMMONTX_SIGNATURE_SHIFT = 24;
const uint8_t BF_COMMONTX_SIGNATURE_NBITS = 8;
const uint32_t BF_COMMONTX_SIGNATURE_MASK = 0xff;
const bool BF_COMMONTX_SIGNATURE_SIGNED = false;
inline constexpr uint64_t extrInstCommontxSignature(EncInst inst) { return extrUnsignedImm(inst, BF_COMMONTX_SIGNATURE_SHIFT, BF_COMMONTX_SIGNATURE_NBITS); }
inline constexpr void embdInstCommontxSignature(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_COMMONTX_SIGNATURE_SHIFT, BF_COMMONTX_SIGNATURE_MASK, imm); }

const uint8_t BF_FLAGGEDTX_ATTACH_SHIFT = 0;
const uint8_t BF_FLAGGEDTX_ATTACH_NBITS = 8;
const uint32_t BF_FLAGGEDTX_ATTACH_MASK = 0xff;
const bool BF_FLAGGEDTX_ATTACH_SIGNED = true;
inline constexpr int64_t extrInstFlaggedtxAttach(EncInst inst) { return extrSignedImm(inst, BF_FLAGGEDTX_ATTACH_SHIFT, BF_FLAGGEDTX_ATTACH_NBITS); }
inline constexpr void embdInstFlaggedtxAttach(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_FLAGGEDTX_ATTACH_SHIFT, BF_FLAGGEDTX_ATTACH_MASK, imm); }

const uint8_t BF_FLAGGEDTX_TYPE_SHIFT = 8;
const uint8_t BF_FLAGGEDTX_TYPE_NBITS = 4;
const uint32_t BF_FLAGGEDTX_TYPE_MASK = 0xf;

const uint8_t BF_FLAGGEDTX_TARGET_SHIFT = 12;
const uint8_t BF_FLAGGEDTX_TARGET_NBITS = 12;
const uint32_t BF_FLAGGEDTX_TARGET_MASK = 0xfff;
const bool BF_FLAGGEDTX_TARGET_SIGNED = true;
inline constexpr int64_t extrInstFlaggedtxTarget(EncInst inst) { return extrSignedImm(inst, BF_FLAGGEDTX_TARGET_SHIFT, BF_FLAGGEDTX_TARGET_NBITS); }
inline constexpr void embdInstFlaggedtxTarget(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_FLAGGEDTX_TARGET_SHIFT, BF_FLAGGEDTX_TARGET_MASK, imm); }

const uint8_t BF_FLAGGEDTX_SIGNATURE_SHIFT = 24;
const uint8_t BF_FLAGGEDTX_SIGNATURE_NBITS = 8;
const uint32_t BF_FLAGGEDTX_SIGNATURE_MASK = 0xff;
const bool BF_FLAGGEDTX_SIGNATURE_SIGNED = false;
inline constexpr uint64_t extrInstFlaggedtxSignature(EncInst inst) { return extrUnsignedImm(inst, BF_FLAGGEDTX_SIGNATURE_SHIFT, BF_FLAGGEDTX_SIGNATURE_NBITS); }
inline constexpr void embdInstFlaggedtxSignature(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_FLAGGEDTX_SIGNATURE_SHIFT, BF_FLAGGEDTX_SIGNATURE_MASK, imm); }

const uint8_t BF_REFILLTX_ATTACH_SHIFT = 0;
const uint8_t BF_REFILLTX_ATTACH_NBITS = 8;
const uint32_t BF_REFILLTX_ATTACH_MASK = 0xff;
const bool BF_REFILLTX_ATTACH_SIGNED = true;
inline constexpr int64_t extrInstRefilltxAttach(EncInst inst) { return extrSignedImm(inst, BF_REFILLTX_ATTACH_SHIFT, BF_REFILLTX_ATTACH_NBITS); }
inline constexpr void embdInstRefilltxAttach(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_REFILLTX_ATTACH_SHIFT, BF_REFILLTX_ATTACH_MASK, imm); }

const uint8_t BF_REFILLTX_TYPE_SHIFT = 8;
const uint8_t BF_REFILLTX_TYPE_NBITS = 4;
const uint32_t BF_REFILLTX_TYPE_MASK = 0xf;

const uint8_t BF_REFILLTX_TARGET_SHIFT = 12;
const uint8_t BF_REFILLTX_TARGET_NBITS = 12;
const uint32_t BF_REFILLTX_TARGET_MASK = 0xfff;
const bool BF_REFILLTX_TARGET_SIGNED = true;
inline constexpr int64_t extrInstRefilltxTarget(EncInst inst) { return extrSignedImm(inst, BF_REFILLTX_TARGET_SHIFT, BF_REFILLTX_TARGET_NBITS); }
inline constexpr void embdInstRefilltxTarget(EncInst& inst, int64_t imm) { embdSignedImm(inst, BF_REFILLTX_TARGET_SHIFT, BF_REFILLTX_TARGET_MASK, imm); }

const uint8_t BF_REFILLTX_SIGNATURE_SHIFT = 24;
const uint8_t BF_REFILLTX_SIGNATURE_NBITS = 8;
const uint32_t BF_REFILLTX_SIGNATURE_MASK = 0xff;
const bool BF_REFILLTX_SIGNATURE_SIGNED = false;
inline constexpr uint64_t extrInstRefilltxSignature(EncInst inst) { return extrUnsignedImm(inst, BF_REFILLTX_SIGNATURE_SHIFT, BF_REFILLTX_SIGNATURE_NBITS); }
inline constexpr void embdInstRefilltxSignature(EncInst& inst, uint64_t imm) { embdUnsignedImm(inst, BF_REFILLTX_SIGNATURE_SHIFT, BF_REFILLTX_SIGNATURE_MASK, imm); }

}; // namespace basim
/* AUTOGENERATED FILE - DO NOT MODIFY */
