/* AUTOGENERATED FILE - DO NOT MODIFY */
#pragma once
#include <cstdint>
#include <string>
#include "encodings.hh"

namespace basim {

struct ArchState; // forward declaration
class Cycles; // forward declaration

/* clti Instruction */
Cycles exeInstClti(ArchState& ast, EncInst inst);
std::string disasmInstClti(EncInst inst);
EncInst constrInstClti(RegId Xs, RegId Xd, int64_t imm);

/* cgti Instruction */
Cycles exeInstCgti(ArchState& ast, EncInst inst);
std::string disasmInstCgti(EncInst inst);
EncInst constrInstCgti(RegId Xs, RegId Xd, int64_t imm);

/* ceqi Instruction */
Cycles exeInstCeqi(ArchState& ast, EncInst inst);
std::string disasmInstCeqi(EncInst inst);
EncInst constrInstCeqi(RegId Xs, RegId Xd, int64_t imm);

/* clt, cgt, ceq, cstr Instruction */
Cycles exeInstCltCgtCeqCstr(ArchState& ast, EncInst inst);
std::string disasmInstCltCgtCeqCstr(EncInst inst);
EncInst constrInstCltCgtCeqCstr(uint64_t func, RegId Xs, RegId Xt, RegId Xd);

}; // namespace basim
/* AUTOGENERATED FILE - DO NOT MODIFY */
