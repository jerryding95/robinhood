/* AUTOGENERATED FILE - DO NOT MODIFY */
#pragma once
#include <cstdint>
#include <string>
#include "encodings.hh"

namespace basim {

struct ArchState; // forward declaration
class Cycles; // forward declaration

/* sli Instruction */
Cycles exeInstSli(ArchState& ast, EncInst inst);
std::string disasmInstSli(EncInst inst);
EncInst constrInstSli(RegId Xs, RegId Xd, uint64_t shift);

/* sri Instruction */
Cycles exeInstSri(ArchState& ast, EncInst inst);
std::string disasmInstSri(EncInst inst);
EncInst constrInstSri(RegId Xs, RegId Xd, uint64_t shift);

/* slori Instruction */
Cycles exeInstSlori(ArchState& ast, EncInst inst);
std::string disasmInstSlori(EncInst inst);
EncInst constrInstSlori(RegId Xs, RegId Xd, uint64_t shift);

/* srori Instruction */
Cycles exeInstSrori(ArchState& ast, EncInst inst);
std::string disasmInstSrori(EncInst inst);
EncInst constrInstSrori(RegId Xs, RegId Xd, uint64_t shift);

/* slandi Instruction */
Cycles exeInstSlandi(ArchState& ast, EncInst inst);
std::string disasmInstSlandi(EncInst inst);
EncInst constrInstSlandi(RegId Xs, RegId Xd, uint64_t shift);

/* srandi Instruction */
Cycles exeInstSrandi(ArchState& ast, EncInst inst);
std::string disasmInstSrandi(EncInst inst);
EncInst constrInstSrandi(RegId Xs, RegId Xd, uint64_t shift);

/* slorii Instruction */
Cycles exeInstSlorii(ArchState& ast, EncInst inst);
std::string disasmInstSlorii(EncInst inst);
EncInst constrInstSlorii(RegId Xs, RegId Xd, uint64_t shift, uint64_t imm);

/* srorii Instruction */
Cycles exeInstSrorii(ArchState& ast, EncInst inst);
std::string disasmInstSrorii(EncInst inst);
EncInst constrInstSrorii(RegId Xs, RegId Xd, uint64_t shift, uint64_t imm);

/* slandii Instruction */
Cycles exeInstSlandii(ArchState& ast, EncInst inst);
std::string disasmInstSlandii(EncInst inst);
EncInst constrInstSlandii(RegId Xs, RegId Xd, uint64_t shift, uint64_t imm);

/* srandii Instruction */
Cycles exeInstSrandii(ArchState& ast, EncInst inst);
std::string disasmInstSrandii(EncInst inst);
EncInst constrInstSrandii(RegId Xs, RegId Xd, uint64_t shift, uint64_t imm);

/* sari Instruction */
Cycles exeInstSari(ArchState& ast, EncInst inst);
std::string disasmInstSari(EncInst inst);
EncInst constrInstSari(RegId Xs, RegId Xd, uint64_t shift);

/* sr, sl, sar Instruction */
Cycles exeInstSrSlSar(ArchState& ast, EncInst inst);
std::string disasmInstSrSlSar(EncInst inst);
EncInst constrInstSrSlSar(uint64_t func, RegId Xs, RegId Xt, RegId Xd);

/* andi Instruction */
Cycles exeInstAndi(ArchState& ast, EncInst inst);
std::string disasmInstAndi(EncInst inst);
EncInst constrInstAndi(RegId Xs, RegId Xd, uint64_t imm);

/* and, or, xor Instruction */
Cycles exeInstAndOrXor(ArchState& ast, EncInst inst);
std::string disasmInstAndOrXor(EncInst inst);
EncInst constrInstAndOrXor(uint64_t func, RegId Xs, RegId Xt, RegId Xd);

/* ori Instruction */
Cycles exeInstOri(ArchState& ast, EncInst inst);
std::string disasmInstOri(EncInst inst);
EncInst constrInstOri(RegId Xs, RegId Xd, uint64_t imm);

/* xori Instruction */
Cycles exeInstXori(ArchState& ast, EncInst inst);
std::string disasmInstXori(EncInst inst);
EncInst constrInstXori(RegId Xs, RegId Xd, uint64_t imm);

/* swiz Instruction */
Cycles exeInstSwiz(ArchState& ast, EncInst inst);
std::string disasmInstSwiz(EncInst inst);
EncInst constrInstSwiz(RegId Xs, RegId Xd);

}; // namespace basim
/* AUTOGENERATED FILE - DO NOT MODIFY */
